// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ovh_dedicated_server_update extends pulumi.CustomResource {
    /**
     * Get an existing Ovh_dedicated_server_update resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ovh_dedicated_server_updateState, opts?: pulumi.CustomResourceOptions): Ovh_dedicated_server_update {
        return new Ovh_dedicated_server_update(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/ovh_dedicated_server_update:ovh_dedicated_server_update';

    /**
     * Returns true if the given object is an instance of Ovh_dedicated_server_update.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ovh_dedicated_server_update {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ovh_dedicated_server_update.__pulumiType;
    }

    /**
     * The boot id of your dedicated server.
     */
    public readonly bootId!: pulumi.Output<number>;
    /**
     * Icmp monitoring state
     */
    public readonly monitoring!: pulumi.Output<boolean>;
    /**
     * The internal name of your dedicated server.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * error, hacked, hackedBlocked, ok
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a Ovh_dedicated_server_update resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ovh_dedicated_server_updateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ovh_dedicated_server_updateArgs | Ovh_dedicated_server_updateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ovh_dedicated_server_updateState | undefined;
            inputs["bootId"] = state ? state.bootId : undefined;
            inputs["monitoring"] = state ? state.monitoring : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as Ovh_dedicated_server_updateArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["bootId"] = args ? args.bootId : undefined;
            inputs["monitoring"] = args ? args.monitoring : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["state"] = args ? args.state : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Ovh_dedicated_server_update.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ovh_dedicated_server_update resources.
 */
export interface Ovh_dedicated_server_updateState {
    /**
     * The boot id of your dedicated server.
     */
    bootId?: pulumi.Input<number>;
    /**
     * Icmp monitoring state
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The internal name of your dedicated server.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * error, hacked, hackedBlocked, ok
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ovh_dedicated_server_update resource.
 */
export interface Ovh_dedicated_server_updateArgs {
    /**
     * The boot id of your dedicated server.
     */
    bootId?: pulumi.Input<number>;
    /**
     * Icmp monitoring state
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The internal name of your dedicated server.
     */
    serviceName: pulumi.Input<string>;
    /**
     * error, hacked, hackedBlocked, ok
     */
    state?: pulumi.Input<string>;
}
