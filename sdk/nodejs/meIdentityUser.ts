// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MeIdentityUser extends pulumi.CustomResource {
    /**
     * Get an existing MeIdentityUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MeIdentityUserState, opts?: pulumi.CustomResourceOptions): MeIdentityUser {
        return new MeIdentityUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/meIdentityUser:MeIdentityUser';

    /**
     * Returns true if the given object is an instance of MeIdentityUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MeIdentityUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MeIdentityUser.__pulumiType;
    }

    /**
     * Creation date of this user
     */
    public /*out*/ readonly creation!: pulumi.Output<string>;
    /**
     * User description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User's email
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * User's group
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Last update of this user
     */
    public /*out*/ readonly lastUpdate!: pulumi.Output<string>;
    /**
     * User's login suffix
     */
    public readonly login!: pulumi.Output<string>;
    /**
     * User's password
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * When the user changed his password for the last time
     */
    public /*out*/ readonly passwordLastUpdate!: pulumi.Output<string>;
    /**
     * Current user's status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a MeIdentityUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MeIdentityUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MeIdentityUserArgs | MeIdentityUserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MeIdentityUserState | undefined;
            inputs["creation"] = state ? state.creation : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["group"] = state ? state.group : undefined;
            inputs["lastUpdate"] = state ? state.lastUpdate : undefined;
            inputs["login"] = state ? state.login : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["passwordLastUpdate"] = state ? state.passwordLastUpdate : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as MeIdentityUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.login === undefined) && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["group"] = args ? args.group : undefined;
            inputs["login"] = args ? args.login : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["creation"] = undefined /*out*/;
            inputs["lastUpdate"] = undefined /*out*/;
            inputs["passwordLastUpdate"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MeIdentityUser.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MeIdentityUser resources.
 */
export interface MeIdentityUserState {
    /**
     * Creation date of this user
     */
    creation?: pulumi.Input<string>;
    /**
     * User description
     */
    description?: pulumi.Input<string>;
    /**
     * User's email
     */
    email?: pulumi.Input<string>;
    /**
     * User's group
     */
    group?: pulumi.Input<string>;
    /**
     * Last update of this user
     */
    lastUpdate?: pulumi.Input<string>;
    /**
     * User's login suffix
     */
    login?: pulumi.Input<string>;
    /**
     * User's password
     */
    password?: pulumi.Input<string>;
    /**
     * When the user changed his password for the last time
     */
    passwordLastUpdate?: pulumi.Input<string>;
    /**
     * Current user's status
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MeIdentityUser resource.
 */
export interface MeIdentityUserArgs {
    /**
     * User description
     */
    description?: pulumi.Input<string>;
    /**
     * User's email
     */
    email: pulumi.Input<string>;
    /**
     * User's group
     */
    group?: pulumi.Input<string>;
    /**
     * User's login suffix
     */
    login: pulumi.Input<string>;
    /**
     * User's password
     */
    password: pulumi.Input<string>;
}
