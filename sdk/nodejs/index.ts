// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cloudProject";
export * from "./cloudProjectContainerregistry";
export * from "./cloudProjectContainerregistryUser";
export * from "./cloudProjectKube";
export * from "./cloudProjectKubeNodepool";
export * from "./cloudProjectNetworkPrivate";
export * from "./cloudProjectNetworkPrivateSubnet";
export * from "./cloudProjectUser";
export * from "./dbaasLogsInput";
export * from "./dbaasLogsOutputGraylogStream";
export * from "./dedicatedCephAcl";
export * from "./dedicatedServerInstallTask";
export * from "./dedicatedServerRebootTask";
export * from "./dedicatedServerUpdate";
export * from "./domainZone";
export * from "./domainZoneRecord";
export * from "./domainZoneRedirection";
export * from "./getCloudProjectCapabilitiesContainerregistry";
export * from "./getCloudProjectCapabilitiesContainerregistryFilter";
export * from "./getCloudProjectContainerregistries";
export * from "./getCloudProjectContainerregistry";
export * from "./getCloudProjectContainerregistryUsers";
export * from "./getCloudProjectKube";
export * from "./getCloudProjectRegion";
export * from "./getCloudProjectRegions";
export * from "./getDbaasLogsInputEngine";
export * from "./getDbaasLogsOutputGraylogStream";
export * from "./getDedicatedCeph";
export * from "./getDedicatedInstallationTemplates";
export * from "./getDedicatedServer";
export * from "./getDedicatedServerBoots";
export * from "./getDedicatedServers";
export * from "./getDomainZone";
export * from "./getIpService";
export * from "./getIploadbalancing";
export * from "./getIploadbalancingVrackNetwork";
export * from "./getIploadbalancingVrackNetworks";
export * from "./getMeIdentityUser";
export * from "./getMeIdentityUsers";
export * from "./getMeInstallationTemplate";
export * from "./getMeInstallationTemplates";
export * from "./getMeIpxeScript";
export * from "./getMeIpxeScripts";
export * from "./getMePaymentmeanBankaccount";
export * from "./getMePaymentmeanCreditcard";
export * from "./getMeSshKey";
export * from "./getMeSshKeys";
export * from "./getOrderCart";
export * from "./getOrderCartProduct";
export * from "./getOrderCartProductOptions";
export * from "./getOrderCartProductOptionsPlan";
export * from "./getOrderCartProductPlan";
export * from "./getVps";
export * from "./getVracks";
export * from "./ipReverse";
export * from "./ipService";
export * from "./iploadbalancing";
export * from "./iploadbalancingHttpFarm";
export * from "./iploadbalancingHttpFarmServer";
export * from "./iploadbalancingHttpFrontend";
export * from "./iploadbalancingHttpRoute";
export * from "./iploadbalancingHttpRouteRule";
export * from "./iploadbalancingRefresh";
export * from "./iploadbalancingTcpFarm";
export * from "./iploadbalancingTcpFarmServer";
export * from "./iploadbalancingTcpFrontend";
export * from "./iploadbalancingTcpRoute";
export * from "./iploadbalancingTcpRouteRule";
export * from "./iploadbalancingVrackNetwork";
export * from "./meIdentityUser";
export * from "./meInstallationTemplate";
export * from "./meInstallationTemplatePartitionScheme";
export * from "./meInstallationTemplatePartitionSchemeHardwareRaid";
export * from "./meInstallationTemplatePartitionSchemePartition";
export * from "./meIpxeScript";
export * from "./meSshKey";
export * from "./provider";
export * from "./vrack";
export * from "./vrackCloudproject";
export * from "./vrackDedicatedServer";
export * from "./vrackDedicatedServerInterface";
export * from "./vrackIp";
export * from "./vrackIploadbalancing";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { CloudProject } from "./cloudProject";
import { CloudProjectContainerregistry } from "./cloudProjectContainerregistry";
import { CloudProjectContainerregistryUser } from "./cloudProjectContainerregistryUser";
import { CloudProjectKube } from "./cloudProjectKube";
import { CloudProjectKubeNodepool } from "./cloudProjectKubeNodepool";
import { CloudProjectNetworkPrivate } from "./cloudProjectNetworkPrivate";
import { CloudProjectNetworkPrivateSubnet } from "./cloudProjectNetworkPrivateSubnet";
import { CloudProjectUser } from "./cloudProjectUser";
import { DbaasLogsInput } from "./dbaasLogsInput";
import { DbaasLogsOutputGraylogStream } from "./dbaasLogsOutputGraylogStream";
import { DedicatedCephAcl } from "./dedicatedCephAcl";
import { DedicatedServerInstallTask } from "./dedicatedServerInstallTask";
import { DedicatedServerRebootTask } from "./dedicatedServerRebootTask";
import { DedicatedServerUpdate } from "./dedicatedServerUpdate";
import { DomainZone } from "./domainZone";
import { DomainZoneRecord } from "./domainZoneRecord";
import { DomainZoneRedirection } from "./domainZoneRedirection";
import { IpReverse } from "./ipReverse";
import { IpService } from "./ipService";
import { Iploadbalancing } from "./iploadbalancing";
import { IploadbalancingHttpFarm } from "./iploadbalancingHttpFarm";
import { IploadbalancingHttpFarmServer } from "./iploadbalancingHttpFarmServer";
import { IploadbalancingHttpFrontend } from "./iploadbalancingHttpFrontend";
import { IploadbalancingHttpRoute } from "./iploadbalancingHttpRoute";
import { IploadbalancingHttpRouteRule } from "./iploadbalancingHttpRouteRule";
import { IploadbalancingRefresh } from "./iploadbalancingRefresh";
import { IploadbalancingTcpFarm } from "./iploadbalancingTcpFarm";
import { IploadbalancingTcpFarmServer } from "./iploadbalancingTcpFarmServer";
import { IploadbalancingTcpFrontend } from "./iploadbalancingTcpFrontend";
import { IploadbalancingTcpRoute } from "./iploadbalancingTcpRoute";
import { IploadbalancingTcpRouteRule } from "./iploadbalancingTcpRouteRule";
import { IploadbalancingVrackNetwork } from "./iploadbalancingVrackNetwork";
import { MeIdentityUser } from "./meIdentityUser";
import { MeInstallationTemplate } from "./meInstallationTemplate";
import { MeInstallationTemplatePartitionScheme } from "./meInstallationTemplatePartitionScheme";
import { MeInstallationTemplatePartitionSchemeHardwareRaid } from "./meInstallationTemplatePartitionSchemeHardwareRaid";
import { MeInstallationTemplatePartitionSchemePartition } from "./meInstallationTemplatePartitionSchemePartition";
import { MeIpxeScript } from "./meIpxeScript";
import { MeSshKey } from "./meSshKey";
import { Vrack } from "./vrack";
import { VrackCloudproject } from "./vrackCloudproject";
import { VrackDedicatedServer } from "./vrackDedicatedServer";
import { VrackDedicatedServerInterface } from "./vrackDedicatedServerInterface";
import { VrackIp } from "./vrackIp";
import { VrackIploadbalancing } from "./vrackIploadbalancing";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:index/cloudProject:CloudProject":
                return new CloudProject(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistry:CloudProjectContainerregistry":
                return new CloudProjectContainerregistry(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerregistryUser:CloudProjectContainerregistryUser":
                return new CloudProjectContainerregistryUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKube:CloudProjectKube":
                return new CloudProjectKube(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKubeNodepool:CloudProjectKubeNodepool":
                return new CloudProjectKubeNodepool(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivate:CloudProjectNetworkPrivate":
                return new CloudProjectNetworkPrivate(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivateSubnet:CloudProjectNetworkPrivateSubnet":
                return new CloudProjectNetworkPrivateSubnet(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectUser:CloudProjectUser":
                return new CloudProjectUser(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsInput:DbaasLogsInput":
                return new DbaasLogsInput(name, <any>undefined, { urn })
            case "ovh:index/dbaasLogsOutputGraylogStream:DbaasLogsOutputGraylogStream":
                return new DbaasLogsOutputGraylogStream(name, <any>undefined, { urn })
            case "ovh:index/dedicatedCephAcl:DedicatedCephAcl":
                return new DedicatedCephAcl(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
                return new DedicatedServerInstallTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
                return new DedicatedServerRebootTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
                return new DedicatedServerUpdate(name, <any>undefined, { urn })
            case "ovh:index/domainZone:DomainZone":
                return new DomainZone(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRecord:DomainZoneRecord":
                return new DomainZoneRecord(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
                return new DomainZoneRedirection(name, <any>undefined, { urn })
            case "ovh:index/ipReverse:IpReverse":
                return new IpReverse(name, <any>undefined, { urn })
            case "ovh:index/ipService:IpService":
                return new IpService(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancing:Iploadbalancing":
                return new Iploadbalancing(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFarm:IploadbalancingHttpFarm":
                return new IploadbalancingHttpFarm(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFarmServer:IploadbalancingHttpFarmServer":
                return new IploadbalancingHttpFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpFrontend:IploadbalancingHttpFrontend":
                return new IploadbalancingHttpFrontend(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpRoute:IploadbalancingHttpRoute":
                return new IploadbalancingHttpRoute(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingHttpRouteRule:IploadbalancingHttpRouteRule":
                return new IploadbalancingHttpRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingRefresh:IploadbalancingRefresh":
                return new IploadbalancingRefresh(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFarm:IploadbalancingTcpFarm":
                return new IploadbalancingTcpFarm(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFarmServer:IploadbalancingTcpFarmServer":
                return new IploadbalancingTcpFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpFrontend:IploadbalancingTcpFrontend":
                return new IploadbalancingTcpFrontend(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute":
                return new IploadbalancingTcpRoute(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingTcpRouteRule:IploadbalancingTcpRouteRule":
                return new IploadbalancingTcpRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork":
                return new IploadbalancingVrackNetwork(name, <any>undefined, { urn })
            case "ovh:index/meIdentityUser:MeIdentityUser":
                return new MeIdentityUser(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
                return new MeInstallationTemplate(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
                return new MeInstallationTemplatePartitionScheme(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid":
                return new MeInstallationTemplatePartitionSchemeHardwareRaid(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
                return new MeInstallationTemplatePartitionSchemePartition(name, <any>undefined, { urn })
            case "ovh:index/meIpxeScript:MeIpxeScript":
                return new MeIpxeScript(name, <any>undefined, { urn })
            case "ovh:index/meSshKey:MeSshKey":
                return new MeSshKey(name, <any>undefined, { urn })
            case "ovh:index/vrack:Vrack":
                return new Vrack(name, <any>undefined, { urn })
            case "ovh:index/vrackCloudproject:VrackCloudproject":
                return new VrackCloudproject(name, <any>undefined, { urn })
            case "ovh:index/vrackDedicatedServer:VrackDedicatedServer":
                return new VrackDedicatedServer(name, <any>undefined, { urn })
            case "ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface":
                return new VrackDedicatedServerInterface(name, <any>undefined, { urn })
            case "ovh:index/vrackIp:VrackIp":
                return new VrackIp(name, <any>undefined, { urn })
            case "ovh:index/vrackIploadbalancing:VrackIploadbalancing":
                return new VrackIploadbalancing(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "index/cloudProject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistry", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKube", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKubeNodepool", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivateSubnet", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsInput", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dbaasLogsOutputGraylogStream", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedCephAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerInstallTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerRebootTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerUpdate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZone", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRecord", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRedirection", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipReverse", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ipService", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancing", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingHttpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingRefresh", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingTcpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iploadbalancingVrackNetwork", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meIdentityUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionScheme", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemeHardwareRaid", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemePartition", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meIpxeScript", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meSshKey", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrack", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackCloudproject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackDedicatedServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackDedicatedServerInterface", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackIp", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackIploadbalancing", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("ovh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ovh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
