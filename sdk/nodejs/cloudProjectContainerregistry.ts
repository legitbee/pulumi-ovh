// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class CloudProjectContainerregistry extends pulumi.CustomResource {
    /**
     * Get an existing CloudProjectContainerregistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudProjectContainerregistryState, opts?: pulumi.CustomResourceOptions): CloudProjectContainerregistry {
        return new CloudProjectContainerregistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/cloudProjectContainerregistry:CloudProjectContainerregistry';

    /**
     * Returns true if the given object is an instance of CloudProjectContainerregistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudProjectContainerregistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProjectContainerregistry.__pulumiType;
    }

    /**
     * Registry creation date
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Registry name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Plan ID of the registry.
     */
    public readonly planId!: pulumi.Output<string>;
    /**
     * Plan of the registry
     */
    public /*out*/ readonly plans!: pulumi.Output<outputs.CloudProjectContainerregistryPlan[]>;
    /**
     * Project ID of your registry
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * Region of the registry.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Current size of the registry (bytes)
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Registry status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Registry last update date
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Access url of the registry
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Version of your registry
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a CloudProjectContainerregistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudProjectContainerregistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudProjectContainerregistryArgs | CloudProjectContainerregistryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudProjectContainerregistryState | undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["planId"] = state ? state.planId : undefined;
            inputs["plans"] = state ? state.plans : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CloudProjectContainerregistryArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["planId"] = args ? args.planId : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["plans"] = undefined /*out*/;
            inputs["projectId"] = undefined /*out*/;
            inputs["size"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CloudProjectContainerregistry.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudProjectContainerregistry resources.
 */
export interface CloudProjectContainerregistryState {
    /**
     * Registry creation date
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Registry name
     */
    name?: pulumi.Input<string>;
    /**
     * Plan ID of the registry.
     */
    planId?: pulumi.Input<string>;
    /**
     * Plan of the registry
     */
    plans?: pulumi.Input<pulumi.Input<inputs.CloudProjectContainerregistryPlan>[]>;
    /**
     * Project ID of your registry
     */
    projectId?: pulumi.Input<string>;
    /**
     * Region of the registry.
     */
    region?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    /**
     * Current size of the registry (bytes)
     */
    size?: pulumi.Input<number>;
    /**
     * Registry status
     */
    status?: pulumi.Input<string>;
    /**
     * Registry last update date
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Access url of the registry
     */
    url?: pulumi.Input<string>;
    /**
     * Version of your registry
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudProjectContainerregistry resource.
 */
export interface CloudProjectContainerregistryArgs {
    /**
     * Registry name
     */
    name?: pulumi.Input<string>;
    /**
     * Plan ID of the registry.
     */
    planId?: pulumi.Input<string>;
    /**
     * Region of the registry.
     */
    region: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
}
