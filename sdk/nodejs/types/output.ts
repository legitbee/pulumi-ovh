// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface CloudProjectContainerregistryPlan {
    code: string;
    createdAt: string;
    features: outputs.CloudProjectContainerregistryPlanFeature[];
    id: string;
    name: string;
    registryLimits: outputs.CloudProjectContainerregistryPlanRegistryLimit[];
    updatedAt: string;
}

export interface CloudProjectContainerregistryPlanFeature {
    vulnerability: boolean;
}

export interface CloudProjectContainerregistryPlanRegistryLimit {
    imageStorage: number;
    parallelRequest: number;
}

export interface CloudProjectNetworkPrivateRegionsAttribute {
    openstackid: string;
    region: string;
    status: string;
}

export interface CloudProjectNetworkPrivateRegionsStatus {
    region: string;
    status: string;
}

export interface CloudProjectNetworkPrivateSubnetIpPool {
    dhcp: boolean;
    end: string;
    network: string;
    region: string;
    start: string;
}

export interface CloudProjectOrder {
    date: string;
    details: outputs.CloudProjectOrderDetail[];
    expirationDate: string;
    orderId: number;
}

export interface CloudProjectOrderDetail {
    description: string;
    domain: string;
    orderDetailId: number;
    quantity: string;
}

export interface CloudProjectPlan {
    catalogName?: string;
    configurations?: outputs.CloudProjectPlanConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface CloudProjectPlanConfiguration {
    label: string;
    value: string;
}

export interface CloudProjectPlanOption {
    catalogName?: string;
    configurations?: outputs.CloudProjectPlanOptionConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface CloudProjectPlanOptionConfiguration {
    label: string;
    value: string;
}

export interface CloudProjectUserRole {
    description: string;
    id: string;
    name: string;
    permissions: string[];
}

export interface DbaasLogsInputConfiguration {
    flowgger?: outputs.DbaasLogsInputConfigurationFlowgger;
    logstash?: outputs.DbaasLogsInputConfigurationLogstash;
}

export interface DbaasLogsInputConfigurationFlowgger {
    logFormat: string;
    logFraming: string;
}

export interface DbaasLogsInputConfigurationLogstash {
    filterSection?: string;
    inputSection: string;
    patternSection?: string;
}

export interface DedicatedServerInstallTaskDetails {
    /**
     * @deprecated field is not used anymore
     */
    changeLog?: string;
    customHostname?: string;
    diskGroupId?: number;
    installRtm?: boolean;
    installSqlServer?: boolean;
    language?: string;
    noRaid?: boolean;
    postInstallationScriptLink?: string;
    postInstallationScriptReturn?: string;
    resetHwRaid?: boolean;
    softRaidDevices?: number;
    sshKeyName?: string;
    useDistribKernel?: boolean;
    useSpla?: boolean;
}

export interface DomainZoneOrder {
    date: string;
    details: outputs.DomainZoneOrderDetail[];
    expirationDate: string;
    orderId: number;
}

export interface DomainZoneOrderDetail {
    description: string;
    domain: string;
    orderDetailId: number;
    quantity: string;
}

export interface DomainZonePlan {
    catalogName?: string;
    configurations?: outputs.DomainZonePlanConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface DomainZonePlanConfiguration {
    label: string;
    value: string;
}

export interface DomainZonePlanOption {
    catalogName?: string;
    configurations?: outputs.DomainZonePlanOptionConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface DomainZonePlanOptionConfiguration {
    label: string;
    value: string;
}

export interface GetCloudProjectCapabilitiesContainerregistryFilterFeature {
    vulnerability: boolean;
}

export interface GetCloudProjectCapabilitiesContainerregistryFilterRegistryLimit {
    imageStorage: number;
    parallelRequest: number;
}

export interface GetCloudProjectCapabilitiesContainerregistryResult {
    plans: outputs.GetCloudProjectCapabilitiesContainerregistryResultPlan[];
    regionName: string;
}

export interface GetCloudProjectCapabilitiesContainerregistryResultPlan {
    code: string;
    createdAt: string;
    features: outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanFeature[];
    id: string;
    name: string;
    registryLimits: outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimit[];
    updatedAt: string;
}

export interface GetCloudProjectCapabilitiesContainerregistryResultPlanFeature {
    vulnerability: boolean;
}

export interface GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimit {
    imageStorage: number;
    parallelRequest: number;
}

export interface GetCloudProjectContainerregistriesResult {
    createdAt: string;
    id: string;
    name: string;
    projectId: string;
    region: string;
    size: number;
    status: string;
    updatedAt: string;
    url: string;
    version: string;
}

export interface GetCloudProjectContainerregistryUsersResult {
    email: string;
    id: string;
    user: string;
}

export interface GetCloudProjectRegionService {
    name: string;
    status: string;
}

export interface GetDedicatedServerVni {
    enabled: boolean;
    mode: string;
    name: string;
    nics: string[];
    serverName: string;
    uuid: string;
    vrack: string;
}

export interface GetIpServiceRoutedTo {
    serviceName: string;
}

export interface GetIploadbalancingOrderableZone {
    name: string;
    planCode: string;
}

export interface GetMeInstallationTemplateCustomization {
    /**
     * @deprecated field is not used anymore
     */
    changeLog: string;
    customHostname: string;
    postInstallationScriptLink: string;
    postInstallationScriptReturn: string;
    /**
     * @deprecated field is not used anymore
     */
    rating: number;
    sshKeyName: string;
    useDistributionKernel: boolean;
}

export interface GetMeInstallationTemplatePartitionScheme {
    hardwareRaids: outputs.GetMeInstallationTemplatePartitionSchemeHardwareRaid[];
    name: string;
    partitions: outputs.GetMeInstallationTemplatePartitionSchemePartition[];
    priority: number;
}

export interface GetMeInstallationTemplatePartitionSchemeHardwareRaid {
    disks: string[];
    mode: string;
    name: string;
    step: number;
}

export interface GetMeInstallationTemplatePartitionSchemePartition {
    filesystem: string;
    mountpoint: string;
    order: number;
    raid: string;
    size: number;
    type: string;
    volumeName: string;
}

export interface GetOrderCartProductOptionsPlanPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductOptionsPlanPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductOptionsPlanPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface GetOrderCartProductOptionsPlanSelectedPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductOptionsPlanSelectedPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductOptionsPlanSelectedPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface GetOrderCartProductOptionsResult {
    exclusive: boolean;
    family: string;
    mandatory: boolean;
    planCode: string;
    prices: outputs.GetOrderCartProductOptionsResultPrice[];
    productName: string;
    productType: string;
}

export interface GetOrderCartProductOptionsResultPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductOptionsResultPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductOptionsResultPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface GetOrderCartProductPlanPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductPlanPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductPlanPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface GetOrderCartProductPlanSelectedPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductPlanSelectedPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductPlanSelectedPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface GetOrderCartProductResult {
    planCode: string;
    prices: outputs.GetOrderCartProductResultPrice[];
    productName: string;
    productType: string;
}

export interface GetOrderCartProductResultPrice {
    capacities: any[];
    description: string;
    duration: string;
    interval: number;
    maximumQuantity: number;
    maximumRepeat: number;
    minimumQuantity: number;
    minimumRepeat: number;
    priceInUcents: number;
    prices: outputs.GetOrderCartProductResultPricePrice[];
    pricingMode: string;
    pricingType: string;
}

export interface GetOrderCartProductResultPricePrice {
    currencyCode: string;
    text: string;
    value: number;
}

export interface IpServiceOrder {
    date: string;
    details: outputs.IpServiceOrderDetail[];
    expirationDate: string;
    orderId: number;
}

export interface IpServiceOrderDetail {
    description: string;
    domain: string;
    orderDetailId: number;
    quantity: string;
}

export interface IpServicePlan {
    catalogName?: string;
    configurations?: outputs.IpServicePlanConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface IpServicePlanConfiguration {
    label: string;
    value: string;
}

export interface IpServicePlanOption {
    catalogName?: string;
    configurations?: outputs.IpServicePlanOptionConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface IpServicePlanOptionConfiguration {
    label: string;
    value: string;
}

export interface IpServiceRoutedTo {
    serviceName: string;
}

export interface IploadbalancingHttpFarmProbe {
    forceSsl?: boolean;
    interval?: number;
    match: string;
    method: string;
    negate?: boolean;
    pattern: string;
    port: number;
    type: string;
    url: string;
}

export interface IploadbalancingHttpRouteAction {
    status?: number;
    target?: string;
    type: string;
}

export interface IploadbalancingHttpRouteRule {
    field: string;
    match: string;
    negate: boolean;
    pattern: string;
    ruleId: number;
    subField: string;
}

export interface IploadbalancingOrder {
    date: string;
    details: outputs.IploadbalancingOrderDetail[];
    expirationDate: string;
    orderId: number;
}

export interface IploadbalancingOrderDetail {
    description: string;
    domain: string;
    orderDetailId: number;
    quantity: string;
}

export interface IploadbalancingOrderableZone {
    name: string;
    planCode: string;
}

export interface IploadbalancingPlan {
    catalogName?: string;
    configurations?: outputs.IploadbalancingPlanConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface IploadbalancingPlanConfiguration {
    label: string;
    value: string;
}

export interface IploadbalancingPlanOption {
    catalogName?: string;
    configurations?: outputs.IploadbalancingPlanOptionConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface IploadbalancingPlanOptionConfiguration {
    label: string;
    value: string;
}

export interface IploadbalancingTcpFarmProbe {
    forceSsl?: boolean;
    interval?: number;
    match: string;
    method?: string;
    negate?: boolean;
    pattern?: string;
    port?: number;
    type: string;
    url?: string;
}

export interface IploadbalancingTcpRouteAction {
    target?: string;
    type: string;
}

export interface IploadbalancingTcpRouteRule {
    field: string;
    match: string;
    negate: boolean;
    pattern: string;
    ruleId: number;
    subField: string;
}

export interface MeInstallationTemplateCustomization {
    /**
     * @deprecated field is not used anymore
     */
    changeLog?: string;
    customHostname?: string;
    postInstallationScriptLink?: string;
    postInstallationScriptReturn?: string;
    /**
     * @deprecated field is not used anymore
     */
    rating?: number;
    sshKeyName?: string;
    useDistributionKernel?: boolean;
}

export interface VrackOrder {
    date: string;
    details: outputs.VrackOrderDetail[];
    expirationDate: string;
    orderId: number;
}

export interface VrackOrderDetail {
    description: string;
    domain: string;
    orderDetailId: number;
    quantity: string;
}

export interface VrackPlan {
    catalogName?: string;
    configurations?: outputs.VrackPlanConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface VrackPlanConfiguration {
    label: string;
    value: string;
}

export interface VrackPlanOption {
    catalogName?: string;
    configurations?: outputs.VrackPlanOptionConfiguration[];
    duration: string;
    planCode: string;
    pricingMode: string;
}

export interface VrackPlanOptionConfiguration {
    label: string;
    value: string;
}
