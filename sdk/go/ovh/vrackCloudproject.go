// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackCloudproject struct {
	pulumi.CustomResourceState

	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackCloudproject registers a new resource with the given unique name, arguments, and options.
func NewVrackCloudproject(ctx *pulumi.Context,
	name string, args *VrackCloudprojectArgs, opts ...pulumi.ResourceOption) (*VrackCloudproject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VrackCloudproject
	err := ctx.RegisterResource("ovh:index/vrackCloudproject:VrackCloudproject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackCloudproject gets an existing VrackCloudproject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackCloudproject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackCloudprojectState, opts ...pulumi.ResourceOption) (*VrackCloudproject, error) {
	var resource VrackCloudproject
	err := ctx.ReadResource("ovh:index/vrackCloudproject:VrackCloudproject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackCloudproject resources.
type vrackCloudprojectState struct {
	ProjectId *string `pulumi:"projectId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackCloudprojectState struct {
	ProjectId pulumi.StringPtrInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrInput
}

func (VrackCloudprojectState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudprojectState)(nil)).Elem()
}

type vrackCloudprojectArgs struct {
	ProjectId string `pulumi:"projectId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackCloudproject resource.
type VrackCloudprojectArgs struct {
	ProjectId pulumi.StringInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringInput
}

func (VrackCloudprojectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudprojectArgs)(nil)).Elem()
}

type VrackCloudprojectInput interface {
	pulumi.Input

	ToVrackCloudprojectOutput() VrackCloudprojectOutput
	ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput
}

func (*VrackCloudproject) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackCloudproject)(nil))
}

func (i *VrackCloudproject) ToVrackCloudprojectOutput() VrackCloudprojectOutput {
	return i.ToVrackCloudprojectOutputWithContext(context.Background())
}

func (i *VrackCloudproject) ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectOutput)
}

func (i *VrackCloudproject) ToVrackCloudprojectPtrOutput() VrackCloudprojectPtrOutput {
	return i.ToVrackCloudprojectPtrOutputWithContext(context.Background())
}

func (i *VrackCloudproject) ToVrackCloudprojectPtrOutputWithContext(ctx context.Context) VrackCloudprojectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectPtrOutput)
}

type VrackCloudprojectPtrInput interface {
	pulumi.Input

	ToVrackCloudprojectPtrOutput() VrackCloudprojectPtrOutput
	ToVrackCloudprojectPtrOutputWithContext(ctx context.Context) VrackCloudprojectPtrOutput
}

type vrackCloudprojectPtrType VrackCloudprojectArgs

func (*vrackCloudprojectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackCloudproject)(nil))
}

func (i *vrackCloudprojectPtrType) ToVrackCloudprojectPtrOutput() VrackCloudprojectPtrOutput {
	return i.ToVrackCloudprojectPtrOutputWithContext(context.Background())
}

func (i *vrackCloudprojectPtrType) ToVrackCloudprojectPtrOutputWithContext(ctx context.Context) VrackCloudprojectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectPtrOutput)
}

// VrackCloudprojectArrayInput is an input type that accepts VrackCloudprojectArray and VrackCloudprojectArrayOutput values.
// You can construct a concrete instance of `VrackCloudprojectArrayInput` via:
//
//          VrackCloudprojectArray{ VrackCloudprojectArgs{...} }
type VrackCloudprojectArrayInput interface {
	pulumi.Input

	ToVrackCloudprojectArrayOutput() VrackCloudprojectArrayOutput
	ToVrackCloudprojectArrayOutputWithContext(context.Context) VrackCloudprojectArrayOutput
}

type VrackCloudprojectArray []VrackCloudprojectInput

func (VrackCloudprojectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackCloudproject)(nil)).Elem()
}

func (i VrackCloudprojectArray) ToVrackCloudprojectArrayOutput() VrackCloudprojectArrayOutput {
	return i.ToVrackCloudprojectArrayOutputWithContext(context.Background())
}

func (i VrackCloudprojectArray) ToVrackCloudprojectArrayOutputWithContext(ctx context.Context) VrackCloudprojectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectArrayOutput)
}

// VrackCloudprojectMapInput is an input type that accepts VrackCloudprojectMap and VrackCloudprojectMapOutput values.
// You can construct a concrete instance of `VrackCloudprojectMapInput` via:
//
//          VrackCloudprojectMap{ "key": VrackCloudprojectArgs{...} }
type VrackCloudprojectMapInput interface {
	pulumi.Input

	ToVrackCloudprojectMapOutput() VrackCloudprojectMapOutput
	ToVrackCloudprojectMapOutputWithContext(context.Context) VrackCloudprojectMapOutput
}

type VrackCloudprojectMap map[string]VrackCloudprojectInput

func (VrackCloudprojectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackCloudproject)(nil)).Elem()
}

func (i VrackCloudprojectMap) ToVrackCloudprojectMapOutput() VrackCloudprojectMapOutput {
	return i.ToVrackCloudprojectMapOutputWithContext(context.Background())
}

func (i VrackCloudprojectMap) ToVrackCloudprojectMapOutputWithContext(ctx context.Context) VrackCloudprojectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackCloudprojectMapOutput)
}

type VrackCloudprojectOutput struct{ *pulumi.OutputState }

func (VrackCloudprojectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackCloudproject)(nil))
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectOutput() VrackCloudprojectOutput {
	return o
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectOutputWithContext(ctx context.Context) VrackCloudprojectOutput {
	return o
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectPtrOutput() VrackCloudprojectPtrOutput {
	return o.ToVrackCloudprojectPtrOutputWithContext(context.Background())
}

func (o VrackCloudprojectOutput) ToVrackCloudprojectPtrOutputWithContext(ctx context.Context) VrackCloudprojectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VrackCloudproject) *VrackCloudproject {
		return &v
	}).(VrackCloudprojectPtrOutput)
}

type VrackCloudprojectPtrOutput struct{ *pulumi.OutputState }

func (VrackCloudprojectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackCloudproject)(nil))
}

func (o VrackCloudprojectPtrOutput) ToVrackCloudprojectPtrOutput() VrackCloudprojectPtrOutput {
	return o
}

func (o VrackCloudprojectPtrOutput) ToVrackCloudprojectPtrOutputWithContext(ctx context.Context) VrackCloudprojectPtrOutput {
	return o
}

func (o VrackCloudprojectPtrOutput) Elem() VrackCloudprojectOutput {
	return o.ApplyT(func(v *VrackCloudproject) VrackCloudproject {
		if v != nil {
			return *v
		}
		var ret VrackCloudproject
		return ret
	}).(VrackCloudprojectOutput)
}

type VrackCloudprojectArrayOutput struct{ *pulumi.OutputState }

func (VrackCloudprojectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrackCloudproject)(nil))
}

func (o VrackCloudprojectArrayOutput) ToVrackCloudprojectArrayOutput() VrackCloudprojectArrayOutput {
	return o
}

func (o VrackCloudprojectArrayOutput) ToVrackCloudprojectArrayOutputWithContext(ctx context.Context) VrackCloudprojectArrayOutput {
	return o
}

func (o VrackCloudprojectArrayOutput) Index(i pulumi.IntInput) VrackCloudprojectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrackCloudproject {
		return vs[0].([]VrackCloudproject)[vs[1].(int)]
	}).(VrackCloudprojectOutput)
}

type VrackCloudprojectMapOutput struct{ *pulumi.OutputState }

func (VrackCloudprojectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VrackCloudproject)(nil))
}

func (o VrackCloudprojectMapOutput) ToVrackCloudprojectMapOutput() VrackCloudprojectMapOutput {
	return o
}

func (o VrackCloudprojectMapOutput) ToVrackCloudprojectMapOutputWithContext(ctx context.Context) VrackCloudprojectMapOutput {
	return o
}

func (o VrackCloudprojectMapOutput) MapIndex(k pulumi.StringInput) VrackCloudprojectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VrackCloudproject {
		return vs[0].(map[string]VrackCloudproject)[vs[1].(string)]
	}).(VrackCloudprojectOutput)
}

func init() {
	pulumi.RegisterOutputType(VrackCloudprojectOutput{})
	pulumi.RegisterOutputType(VrackCloudprojectPtrOutput{})
	pulumi.RegisterOutputType(VrackCloudprojectArrayOutput{})
	pulumi.RegisterOutputType(VrackCloudprojectMapOutput{})
}
