// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ovh_me_ssh_key struct {
	pulumi.CustomResourceState

	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolOutput `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of this public Ssh key
	KeyName pulumi.StringOutput `pulumi:"keyName"`
}

// NewOvh_me_ssh_key registers a new resource with the given unique name, arguments, and options.
func NewOvh_me_ssh_key(ctx *pulumi.Context,
	name string, args *Ovh_me_ssh_keyArgs, opts ...pulumi.ResourceOption) (*Ovh_me_ssh_key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	var resource Ovh_me_ssh_key
	err := ctx.RegisterResource("ovh:index/ovh_me_ssh_key:ovh_me_ssh_key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOvh_me_ssh_key gets an existing Ovh_me_ssh_key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOvh_me_ssh_key(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ovh_me_ssh_keyState, opts ...pulumi.ResourceOption) (*Ovh_me_ssh_key, error) {
	var resource Ovh_me_ssh_key
	err := ctx.ReadResource("ovh:index/ovh_me_ssh_key:ovh_me_ssh_key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ovh_me_ssh_key resources.
type ovh_me_ssh_keyState struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default *bool `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key *string `pulumi:"key"`
	// Name of this public Ssh key
	KeyName *string `pulumi:"keyName"`
}

type Ovh_me_ssh_keyState struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolPtrInput
	// ASCII encoded public Ssh key
	Key pulumi.StringPtrInput
	// Name of this public Ssh key
	KeyName pulumi.StringPtrInput
}

func (Ovh_me_ssh_keyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_me_ssh_keyState)(nil)).Elem()
}

type ovh_me_ssh_keyArgs struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default *bool `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key string `pulumi:"key"`
	// Name of this public Ssh key
	KeyName string `pulumi:"keyName"`
}

// The set of arguments for constructing a Ovh_me_ssh_key resource.
type Ovh_me_ssh_keyArgs struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolPtrInput
	// ASCII encoded public Ssh key
	Key pulumi.StringInput
	// Name of this public Ssh key
	KeyName pulumi.StringInput
}

func (Ovh_me_ssh_keyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_me_ssh_keyArgs)(nil)).Elem()
}

type Ovh_me_ssh_keyInput interface {
	pulumi.Input

	ToOvh_me_ssh_keyOutput() Ovh_me_ssh_keyOutput
	ToOvh_me_ssh_keyOutputWithContext(ctx context.Context) Ovh_me_ssh_keyOutput
}

func (*Ovh_me_ssh_key) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_me_ssh_key)(nil))
}

func (i *Ovh_me_ssh_key) ToOvh_me_ssh_keyOutput() Ovh_me_ssh_keyOutput {
	return i.ToOvh_me_ssh_keyOutputWithContext(context.Background())
}

func (i *Ovh_me_ssh_key) ToOvh_me_ssh_keyOutputWithContext(ctx context.Context) Ovh_me_ssh_keyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_ssh_keyOutput)
}

func (i *Ovh_me_ssh_key) ToOvh_me_ssh_keyPtrOutput() Ovh_me_ssh_keyPtrOutput {
	return i.ToOvh_me_ssh_keyPtrOutputWithContext(context.Background())
}

func (i *Ovh_me_ssh_key) ToOvh_me_ssh_keyPtrOutputWithContext(ctx context.Context) Ovh_me_ssh_keyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_ssh_keyPtrOutput)
}

type Ovh_me_ssh_keyPtrInput interface {
	pulumi.Input

	ToOvh_me_ssh_keyPtrOutput() Ovh_me_ssh_keyPtrOutput
	ToOvh_me_ssh_keyPtrOutputWithContext(ctx context.Context) Ovh_me_ssh_keyPtrOutput
}

type ovh_me_ssh_keyPtrType Ovh_me_ssh_keyArgs

func (*ovh_me_ssh_keyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_me_ssh_key)(nil))
}

func (i *ovh_me_ssh_keyPtrType) ToOvh_me_ssh_keyPtrOutput() Ovh_me_ssh_keyPtrOutput {
	return i.ToOvh_me_ssh_keyPtrOutputWithContext(context.Background())
}

func (i *ovh_me_ssh_keyPtrType) ToOvh_me_ssh_keyPtrOutputWithContext(ctx context.Context) Ovh_me_ssh_keyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_ssh_keyPtrOutput)
}

// Ovh_me_ssh_keyArrayInput is an input type that accepts Ovh_me_ssh_keyArray and Ovh_me_ssh_keyArrayOutput values.
// You can construct a concrete instance of `Ovh_me_ssh_keyArrayInput` via:
//
//          Ovh_me_ssh_keyArray{ Ovh_me_ssh_keyArgs{...} }
type Ovh_me_ssh_keyArrayInput interface {
	pulumi.Input

	ToOvh_me_ssh_keyArrayOutput() Ovh_me_ssh_keyArrayOutput
	ToOvh_me_ssh_keyArrayOutputWithContext(context.Context) Ovh_me_ssh_keyArrayOutput
}

type Ovh_me_ssh_keyArray []Ovh_me_ssh_keyInput

func (Ovh_me_ssh_keyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ovh_me_ssh_key)(nil)).Elem()
}

func (i Ovh_me_ssh_keyArray) ToOvh_me_ssh_keyArrayOutput() Ovh_me_ssh_keyArrayOutput {
	return i.ToOvh_me_ssh_keyArrayOutputWithContext(context.Background())
}

func (i Ovh_me_ssh_keyArray) ToOvh_me_ssh_keyArrayOutputWithContext(ctx context.Context) Ovh_me_ssh_keyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_ssh_keyArrayOutput)
}

// Ovh_me_ssh_keyMapInput is an input type that accepts Ovh_me_ssh_keyMap and Ovh_me_ssh_keyMapOutput values.
// You can construct a concrete instance of `Ovh_me_ssh_keyMapInput` via:
//
//          Ovh_me_ssh_keyMap{ "key": Ovh_me_ssh_keyArgs{...} }
type Ovh_me_ssh_keyMapInput interface {
	pulumi.Input

	ToOvh_me_ssh_keyMapOutput() Ovh_me_ssh_keyMapOutput
	ToOvh_me_ssh_keyMapOutputWithContext(context.Context) Ovh_me_ssh_keyMapOutput
}

type Ovh_me_ssh_keyMap map[string]Ovh_me_ssh_keyInput

func (Ovh_me_ssh_keyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ovh_me_ssh_key)(nil)).Elem()
}

func (i Ovh_me_ssh_keyMap) ToOvh_me_ssh_keyMapOutput() Ovh_me_ssh_keyMapOutput {
	return i.ToOvh_me_ssh_keyMapOutputWithContext(context.Background())
}

func (i Ovh_me_ssh_keyMap) ToOvh_me_ssh_keyMapOutputWithContext(ctx context.Context) Ovh_me_ssh_keyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_ssh_keyMapOutput)
}

type Ovh_me_ssh_keyOutput struct{ *pulumi.OutputState }

func (Ovh_me_ssh_keyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_me_ssh_key)(nil))
}

func (o Ovh_me_ssh_keyOutput) ToOvh_me_ssh_keyOutput() Ovh_me_ssh_keyOutput {
	return o
}

func (o Ovh_me_ssh_keyOutput) ToOvh_me_ssh_keyOutputWithContext(ctx context.Context) Ovh_me_ssh_keyOutput {
	return o
}

func (o Ovh_me_ssh_keyOutput) ToOvh_me_ssh_keyPtrOutput() Ovh_me_ssh_keyPtrOutput {
	return o.ToOvh_me_ssh_keyPtrOutputWithContext(context.Background())
}

func (o Ovh_me_ssh_keyOutput) ToOvh_me_ssh_keyPtrOutputWithContext(ctx context.Context) Ovh_me_ssh_keyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ovh_me_ssh_key) *Ovh_me_ssh_key {
		return &v
	}).(Ovh_me_ssh_keyPtrOutput)
}

type Ovh_me_ssh_keyPtrOutput struct{ *pulumi.OutputState }

func (Ovh_me_ssh_keyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_me_ssh_key)(nil))
}

func (o Ovh_me_ssh_keyPtrOutput) ToOvh_me_ssh_keyPtrOutput() Ovh_me_ssh_keyPtrOutput {
	return o
}

func (o Ovh_me_ssh_keyPtrOutput) ToOvh_me_ssh_keyPtrOutputWithContext(ctx context.Context) Ovh_me_ssh_keyPtrOutput {
	return o
}

func (o Ovh_me_ssh_keyPtrOutput) Elem() Ovh_me_ssh_keyOutput {
	return o.ApplyT(func(v *Ovh_me_ssh_key) Ovh_me_ssh_key {
		if v != nil {
			return *v
		}
		var ret Ovh_me_ssh_key
		return ret
	}).(Ovh_me_ssh_keyOutput)
}

type Ovh_me_ssh_keyArrayOutput struct{ *pulumi.OutputState }

func (Ovh_me_ssh_keyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ovh_me_ssh_key)(nil))
}

func (o Ovh_me_ssh_keyArrayOutput) ToOvh_me_ssh_keyArrayOutput() Ovh_me_ssh_keyArrayOutput {
	return o
}

func (o Ovh_me_ssh_keyArrayOutput) ToOvh_me_ssh_keyArrayOutputWithContext(ctx context.Context) Ovh_me_ssh_keyArrayOutput {
	return o
}

func (o Ovh_me_ssh_keyArrayOutput) Index(i pulumi.IntInput) Ovh_me_ssh_keyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ovh_me_ssh_key {
		return vs[0].([]Ovh_me_ssh_key)[vs[1].(int)]
	}).(Ovh_me_ssh_keyOutput)
}

type Ovh_me_ssh_keyMapOutput struct{ *pulumi.OutputState }

func (Ovh_me_ssh_keyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ovh_me_ssh_key)(nil))
}

func (o Ovh_me_ssh_keyMapOutput) ToOvh_me_ssh_keyMapOutput() Ovh_me_ssh_keyMapOutput {
	return o
}

func (o Ovh_me_ssh_keyMapOutput) ToOvh_me_ssh_keyMapOutputWithContext(ctx context.Context) Ovh_me_ssh_keyMapOutput {
	return o
}

func (o Ovh_me_ssh_keyMapOutput) MapIndex(k pulumi.StringInput) Ovh_me_ssh_keyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ovh_me_ssh_key {
		return vs[0].(map[string]Ovh_me_ssh_key)[vs[1].(string)]
	}).(Ovh_me_ssh_keyOutput)
}

func init() {
	pulumi.RegisterOutputType(Ovh_me_ssh_keyOutput{})
	pulumi.RegisterOutputType(Ovh_me_ssh_keyPtrOutput{})
	pulumi.RegisterOutputType(Ovh_me_ssh_keyArrayOutput{})
	pulumi.RegisterOutputType(Ovh_me_ssh_keyMapOutput{})
}
