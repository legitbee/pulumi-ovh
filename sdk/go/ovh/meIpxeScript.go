// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeIpxeScript struct {
	pulumi.CustomResourceState

	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a
	// fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of your script
	Name pulumi.StringOutput `pulumi:"name"`
	// Content of your IPXE script
	Script pulumi.StringOutput `pulumi:"script"`
}

// NewMeIpxeScript registers a new resource with the given unique name, arguments, and options.
func NewMeIpxeScript(ctx *pulumi.Context,
	name string, args *MeIpxeScriptArgs, opts ...pulumi.ResourceOption) (*MeIpxeScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	var resource MeIpxeScript
	err := ctx.RegisterResource("ovh:index/meIpxeScript:MeIpxeScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeIpxeScript gets an existing MeIpxeScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeIpxeScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeIpxeScriptState, opts ...pulumi.ResourceOption) (*MeIpxeScript, error) {
	var resource MeIpxeScript
	err := ctx.ReadResource("ovh:index/meIpxeScript:MeIpxeScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeIpxeScript resources.
type meIpxeScriptState struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a
	// fake description ('$name auto description') is passed at creation time.
	Description *string `pulumi:"description"`
	// Name of your script
	Name *string `pulumi:"name"`
	// Content of your IPXE script
	Script *string `pulumi:"script"`
}

type MeIpxeScriptState struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a
	// fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringPtrInput
	// Name of your script
	Name pulumi.StringPtrInput
	// Content of your IPXE script
	Script pulumi.StringPtrInput
}

func (MeIpxeScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*meIpxeScriptState)(nil)).Elem()
}

type meIpxeScriptArgs struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a
	// fake description ('$name auto description') is passed at creation time.
	Description *string `pulumi:"description"`
	// Name of your script
	Name *string `pulumi:"name"`
	// Content of your IPXE script
	Script string `pulumi:"script"`
}

// The set of arguments for constructing a MeIpxeScript resource.
type MeIpxeScriptArgs struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a
	// fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringPtrInput
	// Name of your script
	Name pulumi.StringPtrInput
	// Content of your IPXE script
	Script pulumi.StringInput
}

func (MeIpxeScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meIpxeScriptArgs)(nil)).Elem()
}

type MeIpxeScriptInput interface {
	pulumi.Input

	ToMeIpxeScriptOutput() MeIpxeScriptOutput
	ToMeIpxeScriptOutputWithContext(ctx context.Context) MeIpxeScriptOutput
}

func (*MeIpxeScript) ElementType() reflect.Type {
	return reflect.TypeOf((*MeIpxeScript)(nil))
}

func (i *MeIpxeScript) ToMeIpxeScriptOutput() MeIpxeScriptOutput {
	return i.ToMeIpxeScriptOutputWithContext(context.Background())
}

func (i *MeIpxeScript) ToMeIpxeScriptOutputWithContext(ctx context.Context) MeIpxeScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIpxeScriptOutput)
}

func (i *MeIpxeScript) ToMeIpxeScriptPtrOutput() MeIpxeScriptPtrOutput {
	return i.ToMeIpxeScriptPtrOutputWithContext(context.Background())
}

func (i *MeIpxeScript) ToMeIpxeScriptPtrOutputWithContext(ctx context.Context) MeIpxeScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIpxeScriptPtrOutput)
}

type MeIpxeScriptPtrInput interface {
	pulumi.Input

	ToMeIpxeScriptPtrOutput() MeIpxeScriptPtrOutput
	ToMeIpxeScriptPtrOutputWithContext(ctx context.Context) MeIpxeScriptPtrOutput
}

type meIpxeScriptPtrType MeIpxeScriptArgs

func (*meIpxeScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeIpxeScript)(nil))
}

func (i *meIpxeScriptPtrType) ToMeIpxeScriptPtrOutput() MeIpxeScriptPtrOutput {
	return i.ToMeIpxeScriptPtrOutputWithContext(context.Background())
}

func (i *meIpxeScriptPtrType) ToMeIpxeScriptPtrOutputWithContext(ctx context.Context) MeIpxeScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIpxeScriptPtrOutput)
}

// MeIpxeScriptArrayInput is an input type that accepts MeIpxeScriptArray and MeIpxeScriptArrayOutput values.
// You can construct a concrete instance of `MeIpxeScriptArrayInput` via:
//
//          MeIpxeScriptArray{ MeIpxeScriptArgs{...} }
type MeIpxeScriptArrayInput interface {
	pulumi.Input

	ToMeIpxeScriptArrayOutput() MeIpxeScriptArrayOutput
	ToMeIpxeScriptArrayOutputWithContext(context.Context) MeIpxeScriptArrayOutput
}

type MeIpxeScriptArray []MeIpxeScriptInput

func (MeIpxeScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeIpxeScript)(nil)).Elem()
}

func (i MeIpxeScriptArray) ToMeIpxeScriptArrayOutput() MeIpxeScriptArrayOutput {
	return i.ToMeIpxeScriptArrayOutputWithContext(context.Background())
}

func (i MeIpxeScriptArray) ToMeIpxeScriptArrayOutputWithContext(ctx context.Context) MeIpxeScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIpxeScriptArrayOutput)
}

// MeIpxeScriptMapInput is an input type that accepts MeIpxeScriptMap and MeIpxeScriptMapOutput values.
// You can construct a concrete instance of `MeIpxeScriptMapInput` via:
//
//          MeIpxeScriptMap{ "key": MeIpxeScriptArgs{...} }
type MeIpxeScriptMapInput interface {
	pulumi.Input

	ToMeIpxeScriptMapOutput() MeIpxeScriptMapOutput
	ToMeIpxeScriptMapOutputWithContext(context.Context) MeIpxeScriptMapOutput
}

type MeIpxeScriptMap map[string]MeIpxeScriptInput

func (MeIpxeScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeIpxeScript)(nil)).Elem()
}

func (i MeIpxeScriptMap) ToMeIpxeScriptMapOutput() MeIpxeScriptMapOutput {
	return i.ToMeIpxeScriptMapOutputWithContext(context.Background())
}

func (i MeIpxeScriptMap) ToMeIpxeScriptMapOutputWithContext(ctx context.Context) MeIpxeScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeIpxeScriptMapOutput)
}

type MeIpxeScriptOutput struct{ *pulumi.OutputState }

func (MeIpxeScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeIpxeScript)(nil))
}

func (o MeIpxeScriptOutput) ToMeIpxeScriptOutput() MeIpxeScriptOutput {
	return o
}

func (o MeIpxeScriptOutput) ToMeIpxeScriptOutputWithContext(ctx context.Context) MeIpxeScriptOutput {
	return o
}

func (o MeIpxeScriptOutput) ToMeIpxeScriptPtrOutput() MeIpxeScriptPtrOutput {
	return o.ToMeIpxeScriptPtrOutputWithContext(context.Background())
}

func (o MeIpxeScriptOutput) ToMeIpxeScriptPtrOutputWithContext(ctx context.Context) MeIpxeScriptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MeIpxeScript) *MeIpxeScript {
		return &v
	}).(MeIpxeScriptPtrOutput)
}

type MeIpxeScriptPtrOutput struct{ *pulumi.OutputState }

func (MeIpxeScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeIpxeScript)(nil))
}

func (o MeIpxeScriptPtrOutput) ToMeIpxeScriptPtrOutput() MeIpxeScriptPtrOutput {
	return o
}

func (o MeIpxeScriptPtrOutput) ToMeIpxeScriptPtrOutputWithContext(ctx context.Context) MeIpxeScriptPtrOutput {
	return o
}

func (o MeIpxeScriptPtrOutput) Elem() MeIpxeScriptOutput {
	return o.ApplyT(func(v *MeIpxeScript) MeIpxeScript {
		if v != nil {
			return *v
		}
		var ret MeIpxeScript
		return ret
	}).(MeIpxeScriptOutput)
}

type MeIpxeScriptArrayOutput struct{ *pulumi.OutputState }

func (MeIpxeScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeIpxeScript)(nil))
}

func (o MeIpxeScriptArrayOutput) ToMeIpxeScriptArrayOutput() MeIpxeScriptArrayOutput {
	return o
}

func (o MeIpxeScriptArrayOutput) ToMeIpxeScriptArrayOutputWithContext(ctx context.Context) MeIpxeScriptArrayOutput {
	return o
}

func (o MeIpxeScriptArrayOutput) Index(i pulumi.IntInput) MeIpxeScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MeIpxeScript {
		return vs[0].([]MeIpxeScript)[vs[1].(int)]
	}).(MeIpxeScriptOutput)
}

type MeIpxeScriptMapOutput struct{ *pulumi.OutputState }

func (MeIpxeScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MeIpxeScript)(nil))
}

func (o MeIpxeScriptMapOutput) ToMeIpxeScriptMapOutput() MeIpxeScriptMapOutput {
	return o
}

func (o MeIpxeScriptMapOutput) ToMeIpxeScriptMapOutputWithContext(ctx context.Context) MeIpxeScriptMapOutput {
	return o
}

func (o MeIpxeScriptMapOutput) MapIndex(k pulumi.StringInput) MeIpxeScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MeIpxeScript {
		return vs[0].(map[string]MeIpxeScript)[vs[1].(string)]
	}).(MeIpxeScriptOutput)
}

func init() {
	pulumi.RegisterOutputType(MeIpxeScriptOutput{})
	pulumi.RegisterOutputType(MeIpxeScriptPtrOutput{})
	pulumi.RegisterOutputType(MeIpxeScriptArrayOutput{})
	pulumi.RegisterOutputType(MeIpxeScriptMapOutput{})
}
