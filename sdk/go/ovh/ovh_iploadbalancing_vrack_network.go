// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ovh_iploadbalancing_vrack_network struct {
	pulumi.CustomResourceState

	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayOutput `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringOutput `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntOutput `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntOutput `pulumi:"vrackNetworkId"`
}

// NewOvh_iploadbalancing_vrack_network registers a new resource with the given unique name, arguments, and options.
func NewOvh_iploadbalancing_vrack_network(ctx *pulumi.Context,
	name string, args *Ovh_iploadbalancing_vrack_networkArgs, opts ...pulumi.ResourceOption) (*Ovh_iploadbalancing_vrack_network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatIp == nil {
		return nil, errors.New("invalid value for required argument 'NatIp'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	var resource Ovh_iploadbalancing_vrack_network
	err := ctx.RegisterResource("ovh:index/ovh_iploadbalancing_vrack_network:ovh_iploadbalancing_vrack_network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOvh_iploadbalancing_vrack_network gets an existing Ovh_iploadbalancing_vrack_network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOvh_iploadbalancing_vrack_network(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ovh_iploadbalancing_vrack_networkState, opts ...pulumi.ResourceOption) (*Ovh_iploadbalancing_vrack_network, error) {
	var resource Ovh_iploadbalancing_vrack_network
	err := ctx.ReadResource("ovh:index/ovh_iploadbalancing_vrack_network:ovh_iploadbalancing_vrack_network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ovh_iploadbalancing_vrack_network resources.
type ovh_iploadbalancing_vrack_networkState struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp *string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName *string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet *string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
}

type Ovh_iploadbalancing_vrack_networkState struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringPtrInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringPtrInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringPtrInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntPtrInput
}

func (Ovh_iploadbalancing_vrack_networkState) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_iploadbalancing_vrack_networkState)(nil)).Elem()
}

type ovh_iploadbalancing_vrack_networkArgs struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a Ovh_iploadbalancing_vrack_network resource.
type Ovh_iploadbalancing_vrack_networkArgs struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
}

func (Ovh_iploadbalancing_vrack_networkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_iploadbalancing_vrack_networkArgs)(nil)).Elem()
}

type Ovh_iploadbalancing_vrack_networkInput interface {
	pulumi.Input

	ToOvh_iploadbalancing_vrack_networkOutput() Ovh_iploadbalancing_vrack_networkOutput
	ToOvh_iploadbalancing_vrack_networkOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkOutput
}

func (*Ovh_iploadbalancing_vrack_network) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_iploadbalancing_vrack_network)(nil))
}

func (i *Ovh_iploadbalancing_vrack_network) ToOvh_iploadbalancing_vrack_networkOutput() Ovh_iploadbalancing_vrack_networkOutput {
	return i.ToOvh_iploadbalancing_vrack_networkOutputWithContext(context.Background())
}

func (i *Ovh_iploadbalancing_vrack_network) ToOvh_iploadbalancing_vrack_networkOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_iploadbalancing_vrack_networkOutput)
}

func (i *Ovh_iploadbalancing_vrack_network) ToOvh_iploadbalancing_vrack_networkPtrOutput() Ovh_iploadbalancing_vrack_networkPtrOutput {
	return i.ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(context.Background())
}

func (i *Ovh_iploadbalancing_vrack_network) ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_iploadbalancing_vrack_networkPtrOutput)
}

type Ovh_iploadbalancing_vrack_networkPtrInput interface {
	pulumi.Input

	ToOvh_iploadbalancing_vrack_networkPtrOutput() Ovh_iploadbalancing_vrack_networkPtrOutput
	ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkPtrOutput
}

type ovh_iploadbalancing_vrack_networkPtrType Ovh_iploadbalancing_vrack_networkArgs

func (*ovh_iploadbalancing_vrack_networkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_iploadbalancing_vrack_network)(nil))
}

func (i *ovh_iploadbalancing_vrack_networkPtrType) ToOvh_iploadbalancing_vrack_networkPtrOutput() Ovh_iploadbalancing_vrack_networkPtrOutput {
	return i.ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(context.Background())
}

func (i *ovh_iploadbalancing_vrack_networkPtrType) ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_iploadbalancing_vrack_networkPtrOutput)
}

// Ovh_iploadbalancing_vrack_networkArrayInput is an input type that accepts Ovh_iploadbalancing_vrack_networkArray and Ovh_iploadbalancing_vrack_networkArrayOutput values.
// You can construct a concrete instance of `Ovh_iploadbalancing_vrack_networkArrayInput` via:
//
//          Ovh_iploadbalancing_vrack_networkArray{ Ovh_iploadbalancing_vrack_networkArgs{...} }
type Ovh_iploadbalancing_vrack_networkArrayInput interface {
	pulumi.Input

	ToOvh_iploadbalancing_vrack_networkArrayOutput() Ovh_iploadbalancing_vrack_networkArrayOutput
	ToOvh_iploadbalancing_vrack_networkArrayOutputWithContext(context.Context) Ovh_iploadbalancing_vrack_networkArrayOutput
}

type Ovh_iploadbalancing_vrack_networkArray []Ovh_iploadbalancing_vrack_networkInput

func (Ovh_iploadbalancing_vrack_networkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ovh_iploadbalancing_vrack_network)(nil)).Elem()
}

func (i Ovh_iploadbalancing_vrack_networkArray) ToOvh_iploadbalancing_vrack_networkArrayOutput() Ovh_iploadbalancing_vrack_networkArrayOutput {
	return i.ToOvh_iploadbalancing_vrack_networkArrayOutputWithContext(context.Background())
}

func (i Ovh_iploadbalancing_vrack_networkArray) ToOvh_iploadbalancing_vrack_networkArrayOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_iploadbalancing_vrack_networkArrayOutput)
}

// Ovh_iploadbalancing_vrack_networkMapInput is an input type that accepts Ovh_iploadbalancing_vrack_networkMap and Ovh_iploadbalancing_vrack_networkMapOutput values.
// You can construct a concrete instance of `Ovh_iploadbalancing_vrack_networkMapInput` via:
//
//          Ovh_iploadbalancing_vrack_networkMap{ "key": Ovh_iploadbalancing_vrack_networkArgs{...} }
type Ovh_iploadbalancing_vrack_networkMapInput interface {
	pulumi.Input

	ToOvh_iploadbalancing_vrack_networkMapOutput() Ovh_iploadbalancing_vrack_networkMapOutput
	ToOvh_iploadbalancing_vrack_networkMapOutputWithContext(context.Context) Ovh_iploadbalancing_vrack_networkMapOutput
}

type Ovh_iploadbalancing_vrack_networkMap map[string]Ovh_iploadbalancing_vrack_networkInput

func (Ovh_iploadbalancing_vrack_networkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ovh_iploadbalancing_vrack_network)(nil)).Elem()
}

func (i Ovh_iploadbalancing_vrack_networkMap) ToOvh_iploadbalancing_vrack_networkMapOutput() Ovh_iploadbalancing_vrack_networkMapOutput {
	return i.ToOvh_iploadbalancing_vrack_networkMapOutputWithContext(context.Background())
}

func (i Ovh_iploadbalancing_vrack_networkMap) ToOvh_iploadbalancing_vrack_networkMapOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_iploadbalancing_vrack_networkMapOutput)
}

type Ovh_iploadbalancing_vrack_networkOutput struct{ *pulumi.OutputState }

func (Ovh_iploadbalancing_vrack_networkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_iploadbalancing_vrack_network)(nil))
}

func (o Ovh_iploadbalancing_vrack_networkOutput) ToOvh_iploadbalancing_vrack_networkOutput() Ovh_iploadbalancing_vrack_networkOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkOutput) ToOvh_iploadbalancing_vrack_networkOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkOutput) ToOvh_iploadbalancing_vrack_networkPtrOutput() Ovh_iploadbalancing_vrack_networkPtrOutput {
	return o.ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(context.Background())
}

func (o Ovh_iploadbalancing_vrack_networkOutput) ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ovh_iploadbalancing_vrack_network) *Ovh_iploadbalancing_vrack_network {
		return &v
	}).(Ovh_iploadbalancing_vrack_networkPtrOutput)
}

type Ovh_iploadbalancing_vrack_networkPtrOutput struct{ *pulumi.OutputState }

func (Ovh_iploadbalancing_vrack_networkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_iploadbalancing_vrack_network)(nil))
}

func (o Ovh_iploadbalancing_vrack_networkPtrOutput) ToOvh_iploadbalancing_vrack_networkPtrOutput() Ovh_iploadbalancing_vrack_networkPtrOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkPtrOutput) ToOvh_iploadbalancing_vrack_networkPtrOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkPtrOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkPtrOutput) Elem() Ovh_iploadbalancing_vrack_networkOutput {
	return o.ApplyT(func(v *Ovh_iploadbalancing_vrack_network) Ovh_iploadbalancing_vrack_network {
		if v != nil {
			return *v
		}
		var ret Ovh_iploadbalancing_vrack_network
		return ret
	}).(Ovh_iploadbalancing_vrack_networkOutput)
}

type Ovh_iploadbalancing_vrack_networkArrayOutput struct{ *pulumi.OutputState }

func (Ovh_iploadbalancing_vrack_networkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ovh_iploadbalancing_vrack_network)(nil))
}

func (o Ovh_iploadbalancing_vrack_networkArrayOutput) ToOvh_iploadbalancing_vrack_networkArrayOutput() Ovh_iploadbalancing_vrack_networkArrayOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkArrayOutput) ToOvh_iploadbalancing_vrack_networkArrayOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkArrayOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkArrayOutput) Index(i pulumi.IntInput) Ovh_iploadbalancing_vrack_networkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ovh_iploadbalancing_vrack_network {
		return vs[0].([]Ovh_iploadbalancing_vrack_network)[vs[1].(int)]
	}).(Ovh_iploadbalancing_vrack_networkOutput)
}

type Ovh_iploadbalancing_vrack_networkMapOutput struct{ *pulumi.OutputState }

func (Ovh_iploadbalancing_vrack_networkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ovh_iploadbalancing_vrack_network)(nil))
}

func (o Ovh_iploadbalancing_vrack_networkMapOutput) ToOvh_iploadbalancing_vrack_networkMapOutput() Ovh_iploadbalancing_vrack_networkMapOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkMapOutput) ToOvh_iploadbalancing_vrack_networkMapOutputWithContext(ctx context.Context) Ovh_iploadbalancing_vrack_networkMapOutput {
	return o
}

func (o Ovh_iploadbalancing_vrack_networkMapOutput) MapIndex(k pulumi.StringInput) Ovh_iploadbalancing_vrack_networkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ovh_iploadbalancing_vrack_network {
		return vs[0].(map[string]Ovh_iploadbalancing_vrack_network)[vs[1].(string)]
	}).(Ovh_iploadbalancing_vrack_networkOutput)
}

func init() {
	pulumi.RegisterOutputType(Ovh_iploadbalancing_vrack_networkOutput{})
	pulumi.RegisterOutputType(Ovh_iploadbalancing_vrack_networkPtrOutput{})
	pulumi.RegisterOutputType(Ovh_iploadbalancing_vrack_networkArrayOutput{})
	pulumi.RegisterOutputType(Ovh_iploadbalancing_vrack_networkMapOutput{})
}
