// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudProject struct {
	pulumi.CustomResourceState

	Access      pulumi.StringOutput `pulumi:"access"`
	Description pulumi.StringOutput `pulumi:"description"`
	// Details about an Order
	Orders CloudProjectOrderArrayOutput `pulumi:"orders"`
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringOutput `pulumi:"ovhSubsidiary"`
	// Ovh payment mode
	PaymentMean pulumi.StringOutput `pulumi:"paymentMean"`
	// Product Plan to order
	Plan CloudProjectPlanOutput `pulumi:"plan"`
	// Product Plan to order
	PlanOptions CloudProjectPlanOptionArrayOutput `pulumi:"planOptions"`
	ProjectId   pulumi.StringOutput               `pulumi:"projectId"`
	ProjectName pulumi.StringOutput               `pulumi:"projectName"`
	Status      pulumi.StringOutput               `pulumi:"status"`
}

// NewCloudProject registers a new resource with the given unique name, arguments, and options.
func NewCloudProject(ctx *pulumi.Context,
	name string, args *CloudProjectArgs, opts ...pulumi.ResourceOption) (*CloudProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OvhSubsidiary == nil {
		return nil, errors.New("invalid value for required argument 'OvhSubsidiary'")
	}
	if args.PaymentMean == nil {
		return nil, errors.New("invalid value for required argument 'PaymentMean'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	var resource CloudProject
	err := ctx.RegisterResource("ovh:index/cloudProject:CloudProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProject gets an existing CloudProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectState, opts ...pulumi.ResourceOption) (*CloudProject, error) {
	var resource CloudProject
	err := ctx.ReadResource("ovh:index/cloudProject:CloudProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProject resources.
type cloudProjectState struct {
	Access      *string `pulumi:"access"`
	Description *string `pulumi:"description"`
	// Details about an Order
	Orders []CloudProjectOrder `pulumi:"orders"`
	// Ovh Subsidiary
	OvhSubsidiary *string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode
	PaymentMean *string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan *CloudProjectPlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []CloudProjectPlanOption `pulumi:"planOptions"`
	ProjectId   *string                  `pulumi:"projectId"`
	ProjectName *string                  `pulumi:"projectName"`
	Status      *string                  `pulumi:"status"`
}

type CloudProjectState struct {
	Access      pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Details about an Order
	Orders CloudProjectOrderArrayInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringPtrInput
	// Ovh payment mode
	PaymentMean pulumi.StringPtrInput
	// Product Plan to order
	Plan CloudProjectPlanPtrInput
	// Product Plan to order
	PlanOptions CloudProjectPlanOptionArrayInput
	ProjectId   pulumi.StringPtrInput
	ProjectName pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
}

func (CloudProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectState)(nil)).Elem()
}

type cloudProjectArgs struct {
	Description *string `pulumi:"description"`
	// Ovh Subsidiary
	OvhSubsidiary string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode
	PaymentMean string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan CloudProjectPlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []CloudProjectPlanOption `pulumi:"planOptions"`
}

// The set of arguments for constructing a CloudProject resource.
type CloudProjectArgs struct {
	Description pulumi.StringPtrInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringInput
	// Ovh payment mode
	PaymentMean pulumi.StringInput
	// Product Plan to order
	Plan CloudProjectPlanInput
	// Product Plan to order
	PlanOptions CloudProjectPlanOptionArrayInput
}

func (CloudProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectArgs)(nil)).Elem()
}

type CloudProjectInput interface {
	pulumi.Input

	ToCloudProjectOutput() CloudProjectOutput
	ToCloudProjectOutputWithContext(ctx context.Context) CloudProjectOutput
}

func (*CloudProject) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProject)(nil))
}

func (i *CloudProject) ToCloudProjectOutput() CloudProjectOutput {
	return i.ToCloudProjectOutputWithContext(context.Background())
}

func (i *CloudProject) ToCloudProjectOutputWithContext(ctx context.Context) CloudProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectOutput)
}

func (i *CloudProject) ToCloudProjectPtrOutput() CloudProjectPtrOutput {
	return i.ToCloudProjectPtrOutputWithContext(context.Background())
}

func (i *CloudProject) ToCloudProjectPtrOutputWithContext(ctx context.Context) CloudProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectPtrOutput)
}

type CloudProjectPtrInput interface {
	pulumi.Input

	ToCloudProjectPtrOutput() CloudProjectPtrOutput
	ToCloudProjectPtrOutputWithContext(ctx context.Context) CloudProjectPtrOutput
}

type cloudProjectPtrType CloudProjectArgs

func (*cloudProjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProject)(nil))
}

func (i *cloudProjectPtrType) ToCloudProjectPtrOutput() CloudProjectPtrOutput {
	return i.ToCloudProjectPtrOutputWithContext(context.Background())
}

func (i *cloudProjectPtrType) ToCloudProjectPtrOutputWithContext(ctx context.Context) CloudProjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectPtrOutput)
}

// CloudProjectArrayInput is an input type that accepts CloudProjectArray and CloudProjectArrayOutput values.
// You can construct a concrete instance of `CloudProjectArrayInput` via:
//
//          CloudProjectArray{ CloudProjectArgs{...} }
type CloudProjectArrayInput interface {
	pulumi.Input

	ToCloudProjectArrayOutput() CloudProjectArrayOutput
	ToCloudProjectArrayOutputWithContext(context.Context) CloudProjectArrayOutput
}

type CloudProjectArray []CloudProjectInput

func (CloudProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProject)(nil)).Elem()
}

func (i CloudProjectArray) ToCloudProjectArrayOutput() CloudProjectArrayOutput {
	return i.ToCloudProjectArrayOutputWithContext(context.Background())
}

func (i CloudProjectArray) ToCloudProjectArrayOutputWithContext(ctx context.Context) CloudProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectArrayOutput)
}

// CloudProjectMapInput is an input type that accepts CloudProjectMap and CloudProjectMapOutput values.
// You can construct a concrete instance of `CloudProjectMapInput` via:
//
//          CloudProjectMap{ "key": CloudProjectArgs{...} }
type CloudProjectMapInput interface {
	pulumi.Input

	ToCloudProjectMapOutput() CloudProjectMapOutput
	ToCloudProjectMapOutputWithContext(context.Context) CloudProjectMapOutput
}

type CloudProjectMap map[string]CloudProjectInput

func (CloudProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProject)(nil)).Elem()
}

func (i CloudProjectMap) ToCloudProjectMapOutput() CloudProjectMapOutput {
	return i.ToCloudProjectMapOutputWithContext(context.Background())
}

func (i CloudProjectMap) ToCloudProjectMapOutputWithContext(ctx context.Context) CloudProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectMapOutput)
}

type CloudProjectOutput struct{ *pulumi.OutputState }

func (CloudProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProject)(nil))
}

func (o CloudProjectOutput) ToCloudProjectOutput() CloudProjectOutput {
	return o
}

func (o CloudProjectOutput) ToCloudProjectOutputWithContext(ctx context.Context) CloudProjectOutput {
	return o
}

func (o CloudProjectOutput) ToCloudProjectPtrOutput() CloudProjectPtrOutput {
	return o.ToCloudProjectPtrOutputWithContext(context.Background())
}

func (o CloudProjectOutput) ToCloudProjectPtrOutputWithContext(ctx context.Context) CloudProjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudProject) *CloudProject {
		return &v
	}).(CloudProjectPtrOutput)
}

type CloudProjectPtrOutput struct{ *pulumi.OutputState }

func (CloudProjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProject)(nil))
}

func (o CloudProjectPtrOutput) ToCloudProjectPtrOutput() CloudProjectPtrOutput {
	return o
}

func (o CloudProjectPtrOutput) ToCloudProjectPtrOutputWithContext(ctx context.Context) CloudProjectPtrOutput {
	return o
}

func (o CloudProjectPtrOutput) Elem() CloudProjectOutput {
	return o.ApplyT(func(v *CloudProject) CloudProject {
		if v != nil {
			return *v
		}
		var ret CloudProject
		return ret
	}).(CloudProjectOutput)
}

type CloudProjectArrayOutput struct{ *pulumi.OutputState }

func (CloudProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudProject)(nil))
}

func (o CloudProjectArrayOutput) ToCloudProjectArrayOutput() CloudProjectArrayOutput {
	return o
}

func (o CloudProjectArrayOutput) ToCloudProjectArrayOutputWithContext(ctx context.Context) CloudProjectArrayOutput {
	return o
}

func (o CloudProjectArrayOutput) Index(i pulumi.IntInput) CloudProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudProject {
		return vs[0].([]CloudProject)[vs[1].(int)]
	}).(CloudProjectOutput)
}

type CloudProjectMapOutput struct{ *pulumi.OutputState }

func (CloudProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CloudProject)(nil))
}

func (o CloudProjectMapOutput) ToCloudProjectMapOutput() CloudProjectMapOutput {
	return o
}

func (o CloudProjectMapOutput) ToCloudProjectMapOutputWithContext(ctx context.Context) CloudProjectMapOutput {
	return o
}

func (o CloudProjectMapOutput) MapIndex(k pulumi.StringInput) CloudProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CloudProject {
		return vs[0].(map[string]CloudProject)[vs[1].(string)]
	}).(CloudProjectOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudProjectOutput{})
	pulumi.RegisterOutputType(CloudProjectPtrOutput{})
	pulumi.RegisterOutputType(CloudProjectArrayOutput{})
	pulumi.RegisterOutputType(CloudProjectMapOutput{})
}
