// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeInstallationTemplatePartitionSchemeHardwareRaid struct {
	pulumi.CustomResourceState

	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayOutput `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Hardware RAID name
	Name pulumi.StringOutput `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName pulumi.StringOutput `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntOutput `pulumi:"step"`
	// Template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewMeInstallationTemplatePartitionSchemeHardwareRaid registers a new resource with the given unique name, arguments, and options.
func NewMeInstallationTemplatePartitionSchemeHardwareRaid(ctx *pulumi.Context,
	name string, args *MeInstallationTemplatePartitionSchemeHardwareRaidArgs, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRaid, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.SchemeName == nil {
		return nil, errors.New("invalid value for required argument 'SchemeName'")
	}
	if args.Step == nil {
		return nil, errors.New("invalid value for required argument 'Step'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource MeInstallationTemplatePartitionSchemeHardwareRaid
	err := ctx.RegisterResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeInstallationTemplatePartitionSchemeHardwareRaid gets an existing MeInstallationTemplatePartitionSchemeHardwareRaid resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeInstallationTemplatePartitionSchemeHardwareRaid(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeInstallationTemplatePartitionSchemeHardwareRaidState, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRaid, error) {
	var resource MeInstallationTemplatePartitionSchemeHardwareRaid
	err := ctx.ReadResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeInstallationTemplatePartitionSchemeHardwareRaid resources.
type meInstallationTemplatePartitionSchemeHardwareRaidState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode *string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName *string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step *int `pulumi:"step"`
	// Template name
	TemplateName *string `pulumi:"templateName"`
}

type MeInstallationTemplatePartitionSchemeHardwareRaidState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringPtrInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringPtrInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntPtrInput
	// Template name
	TemplateName pulumi.StringPtrInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRaidState) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRaidState)(nil)).Elem()
}

type meInstallationTemplatePartitionSchemeHardwareRaidArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step int `pulumi:"step"`
	// Template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a MeInstallationTemplatePartitionSchemeHardwareRaid resource.
type MeInstallationTemplatePartitionSchemeHardwareRaidArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntInput
	// Template name
	TemplateName pulumi.StringInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRaidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRaidArgs)(nil)).Elem()
}

type MeInstallationTemplatePartitionSchemeHardwareRaidInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput
}

func (*MeInstallationTemplatePartitionSchemeHardwareRaid) ElementType() reflect.Type {
	return reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(context.Background())
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidOutput)
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput() MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(context.Background())
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRaid) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidPtrInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput() MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput
}

type meInstallationTemplatePartitionSchemeHardwareRaidPtrType MeInstallationTemplatePartitionSchemeHardwareRaidArgs

func (*meInstallationTemplatePartitionSchemeHardwareRaidPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (i *meInstallationTemplatePartitionSchemeHardwareRaidPtrType) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput() MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(context.Background())
}

func (i *meInstallationTemplatePartitionSchemeHardwareRaidPtrType) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput)
}

// MeInstallationTemplatePartitionSchemeHardwareRaidArrayInput is an input type that accepts MeInstallationTemplatePartitionSchemeHardwareRaidArray and MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput values.
// You can construct a concrete instance of `MeInstallationTemplatePartitionSchemeHardwareRaidArrayInput` via:
//
//          MeInstallationTemplatePartitionSchemeHardwareRaidArray{ MeInstallationTemplatePartitionSchemeHardwareRaidArgs{...} }
type MeInstallationTemplatePartitionSchemeHardwareRaidArrayInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutputWithContext(context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput
}

type MeInstallationTemplatePartitionSchemeHardwareRaidArray []MeInstallationTemplatePartitionSchemeHardwareRaidInput

func (MeInstallationTemplatePartitionSchemeHardwareRaidArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeInstallationTemplatePartitionSchemeHardwareRaid)(nil)).Elem()
}

func (i MeInstallationTemplatePartitionSchemeHardwareRaidArray) ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutputWithContext(context.Background())
}

func (i MeInstallationTemplatePartitionSchemeHardwareRaidArray) ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput)
}

// MeInstallationTemplatePartitionSchemeHardwareRaidMapInput is an input type that accepts MeInstallationTemplatePartitionSchemeHardwareRaidMap and MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput values.
// You can construct a concrete instance of `MeInstallationTemplatePartitionSchemeHardwareRaidMapInput` via:
//
//          MeInstallationTemplatePartitionSchemeHardwareRaidMap{ "key": MeInstallationTemplatePartitionSchemeHardwareRaidArgs{...} }
type MeInstallationTemplatePartitionSchemeHardwareRaidMapInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutput() MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutputWithContext(context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput
}

type MeInstallationTemplatePartitionSchemeHardwareRaidMap map[string]MeInstallationTemplatePartitionSchemeHardwareRaidInput

func (MeInstallationTemplatePartitionSchemeHardwareRaidMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeInstallationTemplatePartitionSchemeHardwareRaid)(nil)).Elem()
}

func (i MeInstallationTemplatePartitionSchemeHardwareRaidMap) ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutput() MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutputWithContext(context.Background())
}

func (i MeInstallationTemplatePartitionSchemeHardwareRaidMap) ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutput() MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput() MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return o.ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(context.Background())
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MeInstallationTemplatePartitionSchemeHardwareRaid) *MeInstallationTemplatePartitionSchemeHardwareRaid {
		return &v
	}).(MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput() MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidPtrOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput) Elem() MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRaid) MeInstallationTemplatePartitionSchemeHardwareRaid {
		if v != nil {
			return *v
		}
		var ret MeInstallationTemplatePartitionSchemeHardwareRaid
		return ret
	}).(MeInstallationTemplatePartitionSchemeHardwareRaidOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidArrayOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput) Index(i pulumi.IntInput) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MeInstallationTemplatePartitionSchemeHardwareRaid {
		return vs[0].([]MeInstallationTemplatePartitionSchemeHardwareRaid)[vs[1].(int)]
	}).(MeInstallationTemplatePartitionSchemeHardwareRaidOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MeInstallationTemplatePartitionSchemeHardwareRaid)(nil))
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutput() MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput) ToMeInstallationTemplatePartitionSchemeHardwareRaidMapOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput) MapIndex(k pulumi.StringInput) MeInstallationTemplatePartitionSchemeHardwareRaidOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MeInstallationTemplatePartitionSchemeHardwareRaid {
		return vs[0].(map[string]MeInstallationTemplatePartitionSchemeHardwareRaid)[vs[1].(string)]
	}).(MeInstallationTemplatePartitionSchemeHardwareRaidOutput)
}

func init() {
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRaidOutput{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRaidPtrOutput{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRaidArrayOutput{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRaidMapOutput{})
}
