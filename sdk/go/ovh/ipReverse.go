// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpReverse struct {
	pulumi.CustomResourceState

	Ip        pulumi.StringOutput `pulumi:"ip"`
	IpReverse pulumi.StringOutput `pulumi:"ipReverse"`
	Reverse   pulumi.StringOutput `pulumi:"reverse"`
}

// NewIpReverse registers a new resource with the given unique name, arguments, and options.
func NewIpReverse(ctx *pulumi.Context,
	name string, args *IpReverseArgs, opts ...pulumi.ResourceOption) (*IpReverse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.IpReverse == nil {
		return nil, errors.New("invalid value for required argument 'IpReverse'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	var resource IpReverse
	err := ctx.RegisterResource("ovh:index/ipReverse:IpReverse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpReverse gets an existing IpReverse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpReverse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpReverseState, opts ...pulumi.ResourceOption) (*IpReverse, error) {
	var resource IpReverse
	err := ctx.ReadResource("ovh:index/ipReverse:IpReverse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpReverse resources.
type ipReverseState struct {
	Ip        *string `pulumi:"ip"`
	IpReverse *string `pulumi:"ipReverse"`
	Reverse   *string `pulumi:"reverse"`
}

type IpReverseState struct {
	Ip        pulumi.StringPtrInput
	IpReverse pulumi.StringPtrInput
	Reverse   pulumi.StringPtrInput
}

func (IpReverseState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseState)(nil)).Elem()
}

type ipReverseArgs struct {
	Ip        string `pulumi:"ip"`
	IpReverse string `pulumi:"ipReverse"`
	Reverse   string `pulumi:"reverse"`
}

// The set of arguments for constructing a IpReverse resource.
type IpReverseArgs struct {
	Ip        pulumi.StringInput
	IpReverse pulumi.StringInput
	Reverse   pulumi.StringInput
}

func (IpReverseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseArgs)(nil)).Elem()
}

type IpReverseInput interface {
	pulumi.Input

	ToIpReverseOutput() IpReverseOutput
	ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput
}

func (*IpReverse) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverse)(nil))
}

func (i *IpReverse) ToIpReverseOutput() IpReverseOutput {
	return i.ToIpReverseOutputWithContext(context.Background())
}

func (i *IpReverse) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseOutput)
}

func (i *IpReverse) ToIpReversePtrOutput() IpReversePtrOutput {
	return i.ToIpReversePtrOutputWithContext(context.Background())
}

func (i *IpReverse) ToIpReversePtrOutputWithContext(ctx context.Context) IpReversePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReversePtrOutput)
}

type IpReversePtrInput interface {
	pulumi.Input

	ToIpReversePtrOutput() IpReversePtrOutput
	ToIpReversePtrOutputWithContext(ctx context.Context) IpReversePtrOutput
}

type ipReversePtrType IpReverseArgs

func (*ipReversePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverse)(nil))
}

func (i *ipReversePtrType) ToIpReversePtrOutput() IpReversePtrOutput {
	return i.ToIpReversePtrOutputWithContext(context.Background())
}

func (i *ipReversePtrType) ToIpReversePtrOutputWithContext(ctx context.Context) IpReversePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReversePtrOutput)
}

// IpReverseArrayInput is an input type that accepts IpReverseArray and IpReverseArrayOutput values.
// You can construct a concrete instance of `IpReverseArrayInput` via:
//
//          IpReverseArray{ IpReverseArgs{...} }
type IpReverseArrayInput interface {
	pulumi.Input

	ToIpReverseArrayOutput() IpReverseArrayOutput
	ToIpReverseArrayOutputWithContext(context.Context) IpReverseArrayOutput
}

type IpReverseArray []IpReverseInput

func (IpReverseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpReverse)(nil)).Elem()
}

func (i IpReverseArray) ToIpReverseArrayOutput() IpReverseArrayOutput {
	return i.ToIpReverseArrayOutputWithContext(context.Background())
}

func (i IpReverseArray) ToIpReverseArrayOutputWithContext(ctx context.Context) IpReverseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseArrayOutput)
}

// IpReverseMapInput is an input type that accepts IpReverseMap and IpReverseMapOutput values.
// You can construct a concrete instance of `IpReverseMapInput` via:
//
//          IpReverseMap{ "key": IpReverseArgs{...} }
type IpReverseMapInput interface {
	pulumi.Input

	ToIpReverseMapOutput() IpReverseMapOutput
	ToIpReverseMapOutputWithContext(context.Context) IpReverseMapOutput
}

type IpReverseMap map[string]IpReverseInput

func (IpReverseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpReverse)(nil)).Elem()
}

func (i IpReverseMap) ToIpReverseMapOutput() IpReverseMapOutput {
	return i.ToIpReverseMapOutputWithContext(context.Background())
}

func (i IpReverseMap) ToIpReverseMapOutputWithContext(ctx context.Context) IpReverseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseMapOutput)
}

type IpReverseOutput struct{ *pulumi.OutputState }

func (IpReverseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverse)(nil))
}

func (o IpReverseOutput) ToIpReverseOutput() IpReverseOutput {
	return o
}

func (o IpReverseOutput) ToIpReverseOutputWithContext(ctx context.Context) IpReverseOutput {
	return o
}

func (o IpReverseOutput) ToIpReversePtrOutput() IpReversePtrOutput {
	return o.ToIpReversePtrOutputWithContext(context.Background())
}

func (o IpReverseOutput) ToIpReversePtrOutputWithContext(ctx context.Context) IpReversePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpReverse) *IpReverse {
		return &v
	}).(IpReversePtrOutput)
}

type IpReversePtrOutput struct{ *pulumi.OutputState }

func (IpReversePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverse)(nil))
}

func (o IpReversePtrOutput) ToIpReversePtrOutput() IpReversePtrOutput {
	return o
}

func (o IpReversePtrOutput) ToIpReversePtrOutputWithContext(ctx context.Context) IpReversePtrOutput {
	return o
}

func (o IpReversePtrOutput) Elem() IpReverseOutput {
	return o.ApplyT(func(v *IpReverse) IpReverse {
		if v != nil {
			return *v
		}
		var ret IpReverse
		return ret
	}).(IpReverseOutput)
}

type IpReverseArrayOutput struct{ *pulumi.OutputState }

func (IpReverseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpReverse)(nil))
}

func (o IpReverseArrayOutput) ToIpReverseArrayOutput() IpReverseArrayOutput {
	return o
}

func (o IpReverseArrayOutput) ToIpReverseArrayOutputWithContext(ctx context.Context) IpReverseArrayOutput {
	return o
}

func (o IpReverseArrayOutput) Index(i pulumi.IntInput) IpReverseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpReverse {
		return vs[0].([]IpReverse)[vs[1].(int)]
	}).(IpReverseOutput)
}

type IpReverseMapOutput struct{ *pulumi.OutputState }

func (IpReverseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IpReverse)(nil))
}

func (o IpReverseMapOutput) ToIpReverseMapOutput() IpReverseMapOutput {
	return o
}

func (o IpReverseMapOutput) ToIpReverseMapOutputWithContext(ctx context.Context) IpReverseMapOutput {
	return o
}

func (o IpReverseMapOutput) MapIndex(k pulumi.StringInput) IpReverseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IpReverse {
		return vs[0].(map[string]IpReverse)[vs[1].(string)]
	}).(IpReverseOutput)
}

func init() {
	pulumi.RegisterOutputType(IpReverseOutput{})
	pulumi.RegisterOutputType(IpReversePtrOutput{})
	pulumi.RegisterOutputType(IpReverseArrayOutput{})
	pulumi.RegisterOutputType(IpReverseMapOutput{})
}
