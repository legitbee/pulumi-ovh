// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ovh_me_installation_template struct {
	pulumi.CustomResourceState

	// List of all language available for this template
	AvailableLanguages pulumi.StringArrayOutput `pulumi:"availableLanguages"`
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringOutput `pulumi:"baseTemplateName"`
	// This distribution is new and, although tested and functional, may still display odd behaviour
	Beta pulumi.BoolOutput `pulumi:"beta"`
	// This template bit format (32 or 64)
	BitFormat pulumi.IntOutput `pulumi:"bitFormat"`
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      pulumi.StringOutput                                `pulumi:"category"`
	Customization Ovh_me_installation_templateCustomizationPtrOutput `pulumi:"customization"`
	// The default language of this template
	DefaultLanguage pulumi.StringOutput `pulumi:"defaultLanguage"`
	// is this distribution deprecated
	Deprecated pulumi.BoolOutput `pulumi:"deprecated"`
	// information about this template
	Description pulumi.StringOutput `pulumi:"description"`
	// the distribution this template is based on
	Distribution pulumi.StringOutput `pulumi:"distribution"`
	// this template family type (bsd,linux,solaris,windows)
	Family pulumi.StringOutput `pulumi:"family"`
	// Filesystems available (btrfs,ext3,ext4,ntfs,reiserfs,swap,ufs,xfs,zfs)
	Filesystems pulumi.StringArrayOutput `pulumi:"filesystems"`
	// This distribution supports hardware raid configuration through the OVH API
	HardRaidConfiguration pulumi.BoolOutput `pulumi:"hardRaidConfiguration"`
	// Date of last modification of the base image
	LastModification pulumi.StringOutput `pulumi:"lastModification"`
	// This distribution supports Logical Volumes (Linux LVM)
	LvmReady pulumi.BoolOutput `pulumi:"lvmReady"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolOutput `pulumi:"removeDefaultPartitionSchemes"`
	// This distribution supports installation using the distribution's native kernel instead of the recommended OVH kernel
	SupportsDistributionKernel pulumi.BoolOutput `pulumi:"supportsDistributionKernel"`
	// This distribution supports the GUID Partition Table (GPT), providing up to 128 partitions that can have more than 2TB
	SupportsGptLabel pulumi.BoolOutput `pulumi:"supportsGptLabel"`
	// This distribution supports RTM software
	SupportsRtm pulumi.BoolOutput `pulumi:"supportsRtm"`
	// This distribution supports the microsoft SQL server
	SupportsSqlServer pulumi.BoolOutput `pulumi:"supportsSqlServer"`
	// This distribution supports UEFI setup (no,only,yes)
	SupportsUefi pulumi.StringOutput `pulumi:"supportsUefi"`
	// This template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewOvh_me_installation_template registers a new resource with the given unique name, arguments, and options.
func NewOvh_me_installation_template(ctx *pulumi.Context,
	name string, args *Ovh_me_installation_templateArgs, opts ...pulumi.ResourceOption) (*Ovh_me_installation_template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'BaseTemplateName'")
	}
	if args.DefaultLanguage == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLanguage'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource Ovh_me_installation_template
	err := ctx.RegisterResource("ovh:index/ovh_me_installation_template:ovh_me_installation_template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOvh_me_installation_template gets an existing Ovh_me_installation_template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOvh_me_installation_template(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ovh_me_installation_templateState, opts ...pulumi.ResourceOption) (*Ovh_me_installation_template, error) {
	var resource Ovh_me_installation_template
	err := ctx.ReadResource("ovh:index/ovh_me_installation_template:ovh_me_installation_template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ovh_me_installation_template resources.
type ovh_me_installation_templateState struct {
	// List of all language available for this template
	AvailableLanguages []string `pulumi:"availableLanguages"`
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName *string `pulumi:"baseTemplateName"`
	// This distribution is new and, although tested and functional, may still display odd behaviour
	Beta *bool `pulumi:"beta"`
	// This template bit format (32 or 64)
	BitFormat *int `pulumi:"bitFormat"`
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      *string                                    `pulumi:"category"`
	Customization *Ovh_me_installation_templateCustomization `pulumi:"customization"`
	// The default language of this template
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// is this distribution deprecated
	Deprecated *bool `pulumi:"deprecated"`
	// information about this template
	Description *string `pulumi:"description"`
	// the distribution this template is based on
	Distribution *string `pulumi:"distribution"`
	// this template family type (bsd,linux,solaris,windows)
	Family *string `pulumi:"family"`
	// Filesystems available (btrfs,ext3,ext4,ntfs,reiserfs,swap,ufs,xfs,zfs)
	Filesystems []string `pulumi:"filesystems"`
	// This distribution supports hardware raid configuration through the OVH API
	HardRaidConfiguration *bool `pulumi:"hardRaidConfiguration"`
	// Date of last modification of the base image
	LastModification *string `pulumi:"lastModification"`
	// This distribution supports Logical Volumes (Linux LVM)
	LvmReady *bool `pulumi:"lvmReady"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes *bool `pulumi:"removeDefaultPartitionSchemes"`
	// This distribution supports installation using the distribution's native kernel instead of the recommended OVH kernel
	SupportsDistributionKernel *bool `pulumi:"supportsDistributionKernel"`
	// This distribution supports the GUID Partition Table (GPT), providing up to 128 partitions that can have more than 2TB
	SupportsGptLabel *bool `pulumi:"supportsGptLabel"`
	// This distribution supports RTM software
	SupportsRtm *bool `pulumi:"supportsRtm"`
	// This distribution supports the microsoft SQL server
	SupportsSqlServer *bool `pulumi:"supportsSqlServer"`
	// This distribution supports UEFI setup (no,only,yes)
	SupportsUefi *string `pulumi:"supportsUefi"`
	// This template name
	TemplateName *string `pulumi:"templateName"`
}

type Ovh_me_installation_templateState struct {
	// List of all language available for this template
	AvailableLanguages pulumi.StringArrayInput
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringPtrInput
	// This distribution is new and, although tested and functional, may still display odd behaviour
	Beta pulumi.BoolPtrInput
	// This template bit format (32 or 64)
	BitFormat pulumi.IntPtrInput
	// Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation)
	Category      pulumi.StringPtrInput
	Customization Ovh_me_installation_templateCustomizationPtrInput
	// The default language of this template
	DefaultLanguage pulumi.StringPtrInput
	// is this distribution deprecated
	Deprecated pulumi.BoolPtrInput
	// information about this template
	Description pulumi.StringPtrInput
	// the distribution this template is based on
	Distribution pulumi.StringPtrInput
	// this template family type (bsd,linux,solaris,windows)
	Family pulumi.StringPtrInput
	// Filesystems available (btrfs,ext3,ext4,ntfs,reiserfs,swap,ufs,xfs,zfs)
	Filesystems pulumi.StringArrayInput
	// This distribution supports hardware raid configuration through the OVH API
	HardRaidConfiguration pulumi.BoolPtrInput
	// Date of last modification of the base image
	LastModification pulumi.StringPtrInput
	// This distribution supports Logical Volumes (Linux LVM)
	LvmReady pulumi.BoolPtrInput
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolPtrInput
	// This distribution supports installation using the distribution's native kernel instead of the recommended OVH kernel
	SupportsDistributionKernel pulumi.BoolPtrInput
	// This distribution supports the GUID Partition Table (GPT), providing up to 128 partitions that can have more than 2TB
	SupportsGptLabel pulumi.BoolPtrInput
	// This distribution supports RTM software
	SupportsRtm pulumi.BoolPtrInput
	// This distribution supports the microsoft SQL server
	SupportsSqlServer pulumi.BoolPtrInput
	// This distribution supports UEFI setup (no,only,yes)
	SupportsUefi pulumi.StringPtrInput
	// This template name
	TemplateName pulumi.StringPtrInput
}

func (Ovh_me_installation_templateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_me_installation_templateState)(nil)).Elem()
}

type ovh_me_installation_templateArgs struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName string                                     `pulumi:"baseTemplateName"`
	Customization    *Ovh_me_installation_templateCustomization `pulumi:"customization"`
	// The default language of this template
	DefaultLanguage string `pulumi:"defaultLanguage"`
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes *bool `pulumi:"removeDefaultPartitionSchemes"`
	// This template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a Ovh_me_installation_template resource.
type Ovh_me_installation_templateArgs struct {
	// OVH template name yours will be based on, choose one among the list given by compatibleTemplates function
	BaseTemplateName pulumi.StringInput
	Customization    Ovh_me_installation_templateCustomizationPtrInput
	// The default language of this template
	DefaultLanguage pulumi.StringInput
	// Remove default partition schemes at creation
	RemoveDefaultPartitionSchemes pulumi.BoolPtrInput
	// This template name
	TemplateName pulumi.StringInput
}

func (Ovh_me_installation_templateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ovh_me_installation_templateArgs)(nil)).Elem()
}

type Ovh_me_installation_templateInput interface {
	pulumi.Input

	ToOvh_me_installation_templateOutput() Ovh_me_installation_templateOutput
	ToOvh_me_installation_templateOutputWithContext(ctx context.Context) Ovh_me_installation_templateOutput
}

func (*Ovh_me_installation_template) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_me_installation_template)(nil))
}

func (i *Ovh_me_installation_template) ToOvh_me_installation_templateOutput() Ovh_me_installation_templateOutput {
	return i.ToOvh_me_installation_templateOutputWithContext(context.Background())
}

func (i *Ovh_me_installation_template) ToOvh_me_installation_templateOutputWithContext(ctx context.Context) Ovh_me_installation_templateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_installation_templateOutput)
}

func (i *Ovh_me_installation_template) ToOvh_me_installation_templatePtrOutput() Ovh_me_installation_templatePtrOutput {
	return i.ToOvh_me_installation_templatePtrOutputWithContext(context.Background())
}

func (i *Ovh_me_installation_template) ToOvh_me_installation_templatePtrOutputWithContext(ctx context.Context) Ovh_me_installation_templatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_installation_templatePtrOutput)
}

type Ovh_me_installation_templatePtrInput interface {
	pulumi.Input

	ToOvh_me_installation_templatePtrOutput() Ovh_me_installation_templatePtrOutput
	ToOvh_me_installation_templatePtrOutputWithContext(ctx context.Context) Ovh_me_installation_templatePtrOutput
}

type ovh_me_installation_templatePtrType Ovh_me_installation_templateArgs

func (*ovh_me_installation_templatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_me_installation_template)(nil))
}

func (i *ovh_me_installation_templatePtrType) ToOvh_me_installation_templatePtrOutput() Ovh_me_installation_templatePtrOutput {
	return i.ToOvh_me_installation_templatePtrOutputWithContext(context.Background())
}

func (i *ovh_me_installation_templatePtrType) ToOvh_me_installation_templatePtrOutputWithContext(ctx context.Context) Ovh_me_installation_templatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_installation_templatePtrOutput)
}

// Ovh_me_installation_templateArrayInput is an input type that accepts Ovh_me_installation_templateArray and Ovh_me_installation_templateArrayOutput values.
// You can construct a concrete instance of `Ovh_me_installation_templateArrayInput` via:
//
//          Ovh_me_installation_templateArray{ Ovh_me_installation_templateArgs{...} }
type Ovh_me_installation_templateArrayInput interface {
	pulumi.Input

	ToOvh_me_installation_templateArrayOutput() Ovh_me_installation_templateArrayOutput
	ToOvh_me_installation_templateArrayOutputWithContext(context.Context) Ovh_me_installation_templateArrayOutput
}

type Ovh_me_installation_templateArray []Ovh_me_installation_templateInput

func (Ovh_me_installation_templateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ovh_me_installation_template)(nil)).Elem()
}

func (i Ovh_me_installation_templateArray) ToOvh_me_installation_templateArrayOutput() Ovh_me_installation_templateArrayOutput {
	return i.ToOvh_me_installation_templateArrayOutputWithContext(context.Background())
}

func (i Ovh_me_installation_templateArray) ToOvh_me_installation_templateArrayOutputWithContext(ctx context.Context) Ovh_me_installation_templateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_installation_templateArrayOutput)
}

// Ovh_me_installation_templateMapInput is an input type that accepts Ovh_me_installation_templateMap and Ovh_me_installation_templateMapOutput values.
// You can construct a concrete instance of `Ovh_me_installation_templateMapInput` via:
//
//          Ovh_me_installation_templateMap{ "key": Ovh_me_installation_templateArgs{...} }
type Ovh_me_installation_templateMapInput interface {
	pulumi.Input

	ToOvh_me_installation_templateMapOutput() Ovh_me_installation_templateMapOutput
	ToOvh_me_installation_templateMapOutputWithContext(context.Context) Ovh_me_installation_templateMapOutput
}

type Ovh_me_installation_templateMap map[string]Ovh_me_installation_templateInput

func (Ovh_me_installation_templateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ovh_me_installation_template)(nil)).Elem()
}

func (i Ovh_me_installation_templateMap) ToOvh_me_installation_templateMapOutput() Ovh_me_installation_templateMapOutput {
	return i.ToOvh_me_installation_templateMapOutputWithContext(context.Background())
}

func (i Ovh_me_installation_templateMap) ToOvh_me_installation_templateMapOutputWithContext(ctx context.Context) Ovh_me_installation_templateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ovh_me_installation_templateMapOutput)
}

type Ovh_me_installation_templateOutput struct{ *pulumi.OutputState }

func (Ovh_me_installation_templateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ovh_me_installation_template)(nil))
}

func (o Ovh_me_installation_templateOutput) ToOvh_me_installation_templateOutput() Ovh_me_installation_templateOutput {
	return o
}

func (o Ovh_me_installation_templateOutput) ToOvh_me_installation_templateOutputWithContext(ctx context.Context) Ovh_me_installation_templateOutput {
	return o
}

func (o Ovh_me_installation_templateOutput) ToOvh_me_installation_templatePtrOutput() Ovh_me_installation_templatePtrOutput {
	return o.ToOvh_me_installation_templatePtrOutputWithContext(context.Background())
}

func (o Ovh_me_installation_templateOutput) ToOvh_me_installation_templatePtrOutputWithContext(ctx context.Context) Ovh_me_installation_templatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ovh_me_installation_template) *Ovh_me_installation_template {
		return &v
	}).(Ovh_me_installation_templatePtrOutput)
}

type Ovh_me_installation_templatePtrOutput struct{ *pulumi.OutputState }

func (Ovh_me_installation_templatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ovh_me_installation_template)(nil))
}

func (o Ovh_me_installation_templatePtrOutput) ToOvh_me_installation_templatePtrOutput() Ovh_me_installation_templatePtrOutput {
	return o
}

func (o Ovh_me_installation_templatePtrOutput) ToOvh_me_installation_templatePtrOutputWithContext(ctx context.Context) Ovh_me_installation_templatePtrOutput {
	return o
}

func (o Ovh_me_installation_templatePtrOutput) Elem() Ovh_me_installation_templateOutput {
	return o.ApplyT(func(v *Ovh_me_installation_template) Ovh_me_installation_template {
		if v != nil {
			return *v
		}
		var ret Ovh_me_installation_template
		return ret
	}).(Ovh_me_installation_templateOutput)
}

type Ovh_me_installation_templateArrayOutput struct{ *pulumi.OutputState }

func (Ovh_me_installation_templateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ovh_me_installation_template)(nil))
}

func (o Ovh_me_installation_templateArrayOutput) ToOvh_me_installation_templateArrayOutput() Ovh_me_installation_templateArrayOutput {
	return o
}

func (o Ovh_me_installation_templateArrayOutput) ToOvh_me_installation_templateArrayOutputWithContext(ctx context.Context) Ovh_me_installation_templateArrayOutput {
	return o
}

func (o Ovh_me_installation_templateArrayOutput) Index(i pulumi.IntInput) Ovh_me_installation_templateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ovh_me_installation_template {
		return vs[0].([]Ovh_me_installation_template)[vs[1].(int)]
	}).(Ovh_me_installation_templateOutput)
}

type Ovh_me_installation_templateMapOutput struct{ *pulumi.OutputState }

func (Ovh_me_installation_templateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ovh_me_installation_template)(nil))
}

func (o Ovh_me_installation_templateMapOutput) ToOvh_me_installation_templateMapOutput() Ovh_me_installation_templateMapOutput {
	return o
}

func (o Ovh_me_installation_templateMapOutput) ToOvh_me_installation_templateMapOutputWithContext(ctx context.Context) Ovh_me_installation_templateMapOutput {
	return o
}

func (o Ovh_me_installation_templateMapOutput) MapIndex(k pulumi.StringInput) Ovh_me_installation_templateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ovh_me_installation_template {
		return vs[0].(map[string]Ovh_me_installation_template)[vs[1].(string)]
	}).(Ovh_me_installation_templateOutput)
}

func init() {
	pulumi.RegisterOutputType(Ovh_me_installation_templateOutput{})
	pulumi.RegisterOutputType(Ovh_me_installation_templatePtrOutput{})
	pulumi.RegisterOutputType(Ovh_me_installation_templateArrayOutput{})
	pulumi.RegisterOutputType(Ovh_me_installation_templateMapOutput{})
}
