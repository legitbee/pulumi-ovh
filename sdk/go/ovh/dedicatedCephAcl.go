// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedCephAcl struct {
	pulumi.CustomResourceState

	Family      pulumi.StringOutput `pulumi:"family"`
	Netmask     pulumi.StringOutput `pulumi:"netmask"`
	Network     pulumi.StringOutput `pulumi:"network"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewDedicatedCephAcl registers a new resource with the given unique name, arguments, and options.
func NewDedicatedCephAcl(ctx *pulumi.Context,
	name string, args *DedicatedCephAclArgs, opts ...pulumi.ResourceOption) (*DedicatedCephAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Netmask == nil {
		return nil, errors.New("invalid value for required argument 'Netmask'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource DedicatedCephAcl
	err := ctx.RegisterResource("ovh:index/dedicatedCephAcl:DedicatedCephAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedCephAcl gets an existing DedicatedCephAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedCephAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedCephAclState, opts ...pulumi.ResourceOption) (*DedicatedCephAcl, error) {
	var resource DedicatedCephAcl
	err := ctx.ReadResource("ovh:index/dedicatedCephAcl:DedicatedCephAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedCephAcl resources.
type dedicatedCephAclState struct {
	Family      *string `pulumi:"family"`
	Netmask     *string `pulumi:"netmask"`
	Network     *string `pulumi:"network"`
	ServiceName *string `pulumi:"serviceName"`
}

type DedicatedCephAclState struct {
	Family      pulumi.StringPtrInput
	Netmask     pulumi.StringPtrInput
	Network     pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
}

func (DedicatedCephAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedCephAclState)(nil)).Elem()
}

type dedicatedCephAclArgs struct {
	Netmask     string `pulumi:"netmask"`
	Network     string `pulumi:"network"`
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a DedicatedCephAcl resource.
type DedicatedCephAclArgs struct {
	Netmask     pulumi.StringInput
	Network     pulumi.StringInput
	ServiceName pulumi.StringInput
}

func (DedicatedCephAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedCephAclArgs)(nil)).Elem()
}

type DedicatedCephAclInput interface {
	pulumi.Input

	ToDedicatedCephAclOutput() DedicatedCephAclOutput
	ToDedicatedCephAclOutputWithContext(ctx context.Context) DedicatedCephAclOutput
}

func (*DedicatedCephAcl) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedCephAcl)(nil))
}

func (i *DedicatedCephAcl) ToDedicatedCephAclOutput() DedicatedCephAclOutput {
	return i.ToDedicatedCephAclOutputWithContext(context.Background())
}

func (i *DedicatedCephAcl) ToDedicatedCephAclOutputWithContext(ctx context.Context) DedicatedCephAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCephAclOutput)
}

func (i *DedicatedCephAcl) ToDedicatedCephAclPtrOutput() DedicatedCephAclPtrOutput {
	return i.ToDedicatedCephAclPtrOutputWithContext(context.Background())
}

func (i *DedicatedCephAcl) ToDedicatedCephAclPtrOutputWithContext(ctx context.Context) DedicatedCephAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCephAclPtrOutput)
}

type DedicatedCephAclPtrInput interface {
	pulumi.Input

	ToDedicatedCephAclPtrOutput() DedicatedCephAclPtrOutput
	ToDedicatedCephAclPtrOutputWithContext(ctx context.Context) DedicatedCephAclPtrOutput
}

type dedicatedCephAclPtrType DedicatedCephAclArgs

func (*dedicatedCephAclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCephAcl)(nil))
}

func (i *dedicatedCephAclPtrType) ToDedicatedCephAclPtrOutput() DedicatedCephAclPtrOutput {
	return i.ToDedicatedCephAclPtrOutputWithContext(context.Background())
}

func (i *dedicatedCephAclPtrType) ToDedicatedCephAclPtrOutputWithContext(ctx context.Context) DedicatedCephAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCephAclPtrOutput)
}

// DedicatedCephAclArrayInput is an input type that accepts DedicatedCephAclArray and DedicatedCephAclArrayOutput values.
// You can construct a concrete instance of `DedicatedCephAclArrayInput` via:
//
//          DedicatedCephAclArray{ DedicatedCephAclArgs{...} }
type DedicatedCephAclArrayInput interface {
	pulumi.Input

	ToDedicatedCephAclArrayOutput() DedicatedCephAclArrayOutput
	ToDedicatedCephAclArrayOutputWithContext(context.Context) DedicatedCephAclArrayOutput
}

type DedicatedCephAclArray []DedicatedCephAclInput

func (DedicatedCephAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedCephAcl)(nil)).Elem()
}

func (i DedicatedCephAclArray) ToDedicatedCephAclArrayOutput() DedicatedCephAclArrayOutput {
	return i.ToDedicatedCephAclArrayOutputWithContext(context.Background())
}

func (i DedicatedCephAclArray) ToDedicatedCephAclArrayOutputWithContext(ctx context.Context) DedicatedCephAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCephAclArrayOutput)
}

// DedicatedCephAclMapInput is an input type that accepts DedicatedCephAclMap and DedicatedCephAclMapOutput values.
// You can construct a concrete instance of `DedicatedCephAclMapInput` via:
//
//          DedicatedCephAclMap{ "key": DedicatedCephAclArgs{...} }
type DedicatedCephAclMapInput interface {
	pulumi.Input

	ToDedicatedCephAclMapOutput() DedicatedCephAclMapOutput
	ToDedicatedCephAclMapOutputWithContext(context.Context) DedicatedCephAclMapOutput
}

type DedicatedCephAclMap map[string]DedicatedCephAclInput

func (DedicatedCephAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedCephAcl)(nil)).Elem()
}

func (i DedicatedCephAclMap) ToDedicatedCephAclMapOutput() DedicatedCephAclMapOutput {
	return i.ToDedicatedCephAclMapOutputWithContext(context.Background())
}

func (i DedicatedCephAclMap) ToDedicatedCephAclMapOutputWithContext(ctx context.Context) DedicatedCephAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCephAclMapOutput)
}

type DedicatedCephAclOutput struct{ *pulumi.OutputState }

func (DedicatedCephAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedCephAcl)(nil))
}

func (o DedicatedCephAclOutput) ToDedicatedCephAclOutput() DedicatedCephAclOutput {
	return o
}

func (o DedicatedCephAclOutput) ToDedicatedCephAclOutputWithContext(ctx context.Context) DedicatedCephAclOutput {
	return o
}

func (o DedicatedCephAclOutput) ToDedicatedCephAclPtrOutput() DedicatedCephAclPtrOutput {
	return o.ToDedicatedCephAclPtrOutputWithContext(context.Background())
}

func (o DedicatedCephAclOutput) ToDedicatedCephAclPtrOutputWithContext(ctx context.Context) DedicatedCephAclPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DedicatedCephAcl) *DedicatedCephAcl {
		return &v
	}).(DedicatedCephAclPtrOutput)
}

type DedicatedCephAclPtrOutput struct{ *pulumi.OutputState }

func (DedicatedCephAclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCephAcl)(nil))
}

func (o DedicatedCephAclPtrOutput) ToDedicatedCephAclPtrOutput() DedicatedCephAclPtrOutput {
	return o
}

func (o DedicatedCephAclPtrOutput) ToDedicatedCephAclPtrOutputWithContext(ctx context.Context) DedicatedCephAclPtrOutput {
	return o
}

func (o DedicatedCephAclPtrOutput) Elem() DedicatedCephAclOutput {
	return o.ApplyT(func(v *DedicatedCephAcl) DedicatedCephAcl {
		if v != nil {
			return *v
		}
		var ret DedicatedCephAcl
		return ret
	}).(DedicatedCephAclOutput)
}

type DedicatedCephAclArrayOutput struct{ *pulumi.OutputState }

func (DedicatedCephAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedCephAcl)(nil))
}

func (o DedicatedCephAclArrayOutput) ToDedicatedCephAclArrayOutput() DedicatedCephAclArrayOutput {
	return o
}

func (o DedicatedCephAclArrayOutput) ToDedicatedCephAclArrayOutputWithContext(ctx context.Context) DedicatedCephAclArrayOutput {
	return o
}

func (o DedicatedCephAclArrayOutput) Index(i pulumi.IntInput) DedicatedCephAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedCephAcl {
		return vs[0].([]DedicatedCephAcl)[vs[1].(int)]
	}).(DedicatedCephAclOutput)
}

type DedicatedCephAclMapOutput struct{ *pulumi.OutputState }

func (DedicatedCephAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DedicatedCephAcl)(nil))
}

func (o DedicatedCephAclMapOutput) ToDedicatedCephAclMapOutput() DedicatedCephAclMapOutput {
	return o
}

func (o DedicatedCephAclMapOutput) ToDedicatedCephAclMapOutputWithContext(ctx context.Context) DedicatedCephAclMapOutput {
	return o
}

func (o DedicatedCephAclMapOutput) MapIndex(k pulumi.StringInput) DedicatedCephAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DedicatedCephAcl {
		return vs[0].(map[string]DedicatedCephAcl)[vs[1].(string)]
	}).(DedicatedCephAclOutput)
}

func init() {
	pulumi.RegisterOutputType(DedicatedCephAclOutput{})
	pulumi.RegisterOutputType(DedicatedCephAclPtrOutput{})
	pulumi.RegisterOutputType(DedicatedCephAclArrayOutput{})
	pulumi.RegisterOutputType(DedicatedCephAclMapOutput{})
}
