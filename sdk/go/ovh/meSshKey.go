// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MeSshKey struct {
	pulumi.CustomResourceState

	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolOutput `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of this public Ssh key
	KeyName pulumi.StringOutput `pulumi:"keyName"`
}

// NewMeSshKey registers a new resource with the given unique name, arguments, and options.
func NewMeSshKey(ctx *pulumi.Context,
	name string, args *MeSshKeyArgs, opts ...pulumi.ResourceOption) (*MeSshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	var resource MeSshKey
	err := ctx.RegisterResource("ovh:index/meSshKey:MeSshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeSshKey gets an existing MeSshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeSshKeyState, opts ...pulumi.ResourceOption) (*MeSshKey, error) {
	var resource MeSshKey
	err := ctx.ReadResource("ovh:index/meSshKey:MeSshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeSshKey resources.
type meSshKeyState struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default *bool `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key *string `pulumi:"key"`
	// Name of this public Ssh key
	KeyName *string `pulumi:"keyName"`
}

type MeSshKeyState struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolPtrInput
	// ASCII encoded public Ssh key
	Key pulumi.StringPtrInput
	// Name of this public Ssh key
	KeyName pulumi.StringPtrInput
}

func (MeSshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*meSshKeyState)(nil)).Elem()
}

type meSshKeyArgs struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default *bool `pulumi:"default"`
	// ASCII encoded public Ssh key
	Key string `pulumi:"key"`
	// Name of this public Ssh key
	KeyName string `pulumi:"keyName"`
}

// The set of arguments for constructing a MeSshKey resource.
type MeSshKeyArgs struct {
	// True when this public Ssh key is used for rescue mode and reinstallations
	Default pulumi.BoolPtrInput
	// ASCII encoded public Ssh key
	Key pulumi.StringInput
	// Name of this public Ssh key
	KeyName pulumi.StringInput
}

func (MeSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meSshKeyArgs)(nil)).Elem()
}

type MeSshKeyInput interface {
	pulumi.Input

	ToMeSshKeyOutput() MeSshKeyOutput
	ToMeSshKeyOutputWithContext(ctx context.Context) MeSshKeyOutput
}

func (*MeSshKey) ElementType() reflect.Type {
	return reflect.TypeOf((*MeSshKey)(nil))
}

func (i *MeSshKey) ToMeSshKeyOutput() MeSshKeyOutput {
	return i.ToMeSshKeyOutputWithContext(context.Background())
}

func (i *MeSshKey) ToMeSshKeyOutputWithContext(ctx context.Context) MeSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSshKeyOutput)
}

func (i *MeSshKey) ToMeSshKeyPtrOutput() MeSshKeyPtrOutput {
	return i.ToMeSshKeyPtrOutputWithContext(context.Background())
}

func (i *MeSshKey) ToMeSshKeyPtrOutputWithContext(ctx context.Context) MeSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSshKeyPtrOutput)
}

type MeSshKeyPtrInput interface {
	pulumi.Input

	ToMeSshKeyPtrOutput() MeSshKeyPtrOutput
	ToMeSshKeyPtrOutputWithContext(ctx context.Context) MeSshKeyPtrOutput
}

type meSshKeyPtrType MeSshKeyArgs

func (*meSshKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeSshKey)(nil))
}

func (i *meSshKeyPtrType) ToMeSshKeyPtrOutput() MeSshKeyPtrOutput {
	return i.ToMeSshKeyPtrOutputWithContext(context.Background())
}

func (i *meSshKeyPtrType) ToMeSshKeyPtrOutputWithContext(ctx context.Context) MeSshKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSshKeyPtrOutput)
}

// MeSshKeyArrayInput is an input type that accepts MeSshKeyArray and MeSshKeyArrayOutput values.
// You can construct a concrete instance of `MeSshKeyArrayInput` via:
//
//          MeSshKeyArray{ MeSshKeyArgs{...} }
type MeSshKeyArrayInput interface {
	pulumi.Input

	ToMeSshKeyArrayOutput() MeSshKeyArrayOutput
	ToMeSshKeyArrayOutputWithContext(context.Context) MeSshKeyArrayOutput
}

type MeSshKeyArray []MeSshKeyInput

func (MeSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeSshKey)(nil)).Elem()
}

func (i MeSshKeyArray) ToMeSshKeyArrayOutput() MeSshKeyArrayOutput {
	return i.ToMeSshKeyArrayOutputWithContext(context.Background())
}

func (i MeSshKeyArray) ToMeSshKeyArrayOutputWithContext(ctx context.Context) MeSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSshKeyArrayOutput)
}

// MeSshKeyMapInput is an input type that accepts MeSshKeyMap and MeSshKeyMapOutput values.
// You can construct a concrete instance of `MeSshKeyMapInput` via:
//
//          MeSshKeyMap{ "key": MeSshKeyArgs{...} }
type MeSshKeyMapInput interface {
	pulumi.Input

	ToMeSshKeyMapOutput() MeSshKeyMapOutput
	ToMeSshKeyMapOutputWithContext(context.Context) MeSshKeyMapOutput
}

type MeSshKeyMap map[string]MeSshKeyInput

func (MeSshKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeSshKey)(nil)).Elem()
}

func (i MeSshKeyMap) ToMeSshKeyMapOutput() MeSshKeyMapOutput {
	return i.ToMeSshKeyMapOutputWithContext(context.Background())
}

func (i MeSshKeyMap) ToMeSshKeyMapOutputWithContext(ctx context.Context) MeSshKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeSshKeyMapOutput)
}

type MeSshKeyOutput struct{ *pulumi.OutputState }

func (MeSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeSshKey)(nil))
}

func (o MeSshKeyOutput) ToMeSshKeyOutput() MeSshKeyOutput {
	return o
}

func (o MeSshKeyOutput) ToMeSshKeyOutputWithContext(ctx context.Context) MeSshKeyOutput {
	return o
}

func (o MeSshKeyOutput) ToMeSshKeyPtrOutput() MeSshKeyPtrOutput {
	return o.ToMeSshKeyPtrOutputWithContext(context.Background())
}

func (o MeSshKeyOutput) ToMeSshKeyPtrOutputWithContext(ctx context.Context) MeSshKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MeSshKey) *MeSshKey {
		return &v
	}).(MeSshKeyPtrOutput)
}

type MeSshKeyPtrOutput struct{ *pulumi.OutputState }

func (MeSshKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeSshKey)(nil))
}

func (o MeSshKeyPtrOutput) ToMeSshKeyPtrOutput() MeSshKeyPtrOutput {
	return o
}

func (o MeSshKeyPtrOutput) ToMeSshKeyPtrOutputWithContext(ctx context.Context) MeSshKeyPtrOutput {
	return o
}

func (o MeSshKeyPtrOutput) Elem() MeSshKeyOutput {
	return o.ApplyT(func(v *MeSshKey) MeSshKey {
		if v != nil {
			return *v
		}
		var ret MeSshKey
		return ret
	}).(MeSshKeyOutput)
}

type MeSshKeyArrayOutput struct{ *pulumi.OutputState }

func (MeSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeSshKey)(nil))
}

func (o MeSshKeyArrayOutput) ToMeSshKeyArrayOutput() MeSshKeyArrayOutput {
	return o
}

func (o MeSshKeyArrayOutput) ToMeSshKeyArrayOutputWithContext(ctx context.Context) MeSshKeyArrayOutput {
	return o
}

func (o MeSshKeyArrayOutput) Index(i pulumi.IntInput) MeSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MeSshKey {
		return vs[0].([]MeSshKey)[vs[1].(int)]
	}).(MeSshKeyOutput)
}

type MeSshKeyMapOutput struct{ *pulumi.OutputState }

func (MeSshKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MeSshKey)(nil))
}

func (o MeSshKeyMapOutput) ToMeSshKeyMapOutput() MeSshKeyMapOutput {
	return o
}

func (o MeSshKeyMapOutput) ToMeSshKeyMapOutputWithContext(ctx context.Context) MeSshKeyMapOutput {
	return o
}

func (o MeSshKeyMapOutput) MapIndex(k pulumi.StringInput) MeSshKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MeSshKey {
		return vs[0].(map[string]MeSshKey)[vs[1].(string)]
	}).(MeSshKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(MeSshKeyOutput{})
	pulumi.RegisterOutputType(MeSshKeyPtrOutput{})
	pulumi.RegisterOutputType(MeSshKeyArrayOutput{})
	pulumi.RegisterOutputType(MeSshKeyMapOutput{})
}
