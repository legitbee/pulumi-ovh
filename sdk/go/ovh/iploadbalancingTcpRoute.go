// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingTcpRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.IntOutput `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IploadbalancingTcpRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewIploadbalancingTcpRoute registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingTcpRoute(ctx *pulumi.Context,
	name string, args *IploadbalancingTcpRouteArgs, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IploadbalancingTcpRoute
	err := ctx.RegisterResource("ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingTcpRoute gets an existing IploadbalancingTcpRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingTcpRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingTcpRouteState, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRoute, error) {
	var resource IploadbalancingTcpRoute
	err := ctx.ReadResource("ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingTcpRoute resources.
type iploadbalancingTcpRouteState struct {
	// Action triggered when all rules match
	Action *IploadbalancingTcpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IploadbalancingTcpRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *int `pulumi:"weight"`
}

type IploadbalancingTcpRouteState struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// List of rules to match to trigger action
	Rules IploadbalancingTcpRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.IntPtrInput
}

func (IploadbalancingTcpRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteState)(nil)).Elem()
}

type iploadbalancingTcpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IploadbalancingTcpRoute resource.
type IploadbalancingTcpRouteArgs struct {
	// Action triggered when all rules match
	Action IploadbalancingTcpRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will
	// trigger an action
	Weight pulumi.IntPtrInput
}

func (IploadbalancingTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteArgs)(nil)).Elem()
}

type IploadbalancingTcpRouteInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput
	ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput
}

func (*IploadbalancingTcpRoute) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpRoute)(nil))
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput {
	return i.ToIploadbalancingTcpRouteOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteOutput)
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRoutePtrOutput() IploadbalancingTcpRoutePtrOutput {
	return i.ToIploadbalancingTcpRoutePtrOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpRoute) ToIploadbalancingTcpRoutePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRoutePtrOutput)
}

type IploadbalancingTcpRoutePtrInput interface {
	pulumi.Input

	ToIploadbalancingTcpRoutePtrOutput() IploadbalancingTcpRoutePtrOutput
	ToIploadbalancingTcpRoutePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRoutePtrOutput
}

type iploadbalancingTcpRoutePtrType IploadbalancingTcpRouteArgs

func (*iploadbalancingTcpRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRoute)(nil))
}

func (i *iploadbalancingTcpRoutePtrType) ToIploadbalancingTcpRoutePtrOutput() IploadbalancingTcpRoutePtrOutput {
	return i.ToIploadbalancingTcpRoutePtrOutputWithContext(context.Background())
}

func (i *iploadbalancingTcpRoutePtrType) ToIploadbalancingTcpRoutePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRoutePtrOutput)
}

// IploadbalancingTcpRouteArrayInput is an input type that accepts IploadbalancingTcpRouteArray and IploadbalancingTcpRouteArrayOutput values.
// You can construct a concrete instance of `IploadbalancingTcpRouteArrayInput` via:
//
//          IploadbalancingTcpRouteArray{ IploadbalancingTcpRouteArgs{...} }
type IploadbalancingTcpRouteArrayInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteArrayOutput() IploadbalancingTcpRouteArrayOutput
	ToIploadbalancingTcpRouteArrayOutputWithContext(context.Context) IploadbalancingTcpRouteArrayOutput
}

type IploadbalancingTcpRouteArray []IploadbalancingTcpRouteInput

func (IploadbalancingTcpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IploadbalancingTcpRoute)(nil)).Elem()
}

func (i IploadbalancingTcpRouteArray) ToIploadbalancingTcpRouteArrayOutput() IploadbalancingTcpRouteArrayOutput {
	return i.ToIploadbalancingTcpRouteArrayOutputWithContext(context.Background())
}

func (i IploadbalancingTcpRouteArray) ToIploadbalancingTcpRouteArrayOutputWithContext(ctx context.Context) IploadbalancingTcpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteArrayOutput)
}

// IploadbalancingTcpRouteMapInput is an input type that accepts IploadbalancingTcpRouteMap and IploadbalancingTcpRouteMapOutput values.
// You can construct a concrete instance of `IploadbalancingTcpRouteMapInput` via:
//
//          IploadbalancingTcpRouteMap{ "key": IploadbalancingTcpRouteArgs{...} }
type IploadbalancingTcpRouteMapInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteMapOutput() IploadbalancingTcpRouteMapOutput
	ToIploadbalancingTcpRouteMapOutputWithContext(context.Context) IploadbalancingTcpRouteMapOutput
}

type IploadbalancingTcpRouteMap map[string]IploadbalancingTcpRouteInput

func (IploadbalancingTcpRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IploadbalancingTcpRoute)(nil)).Elem()
}

func (i IploadbalancingTcpRouteMap) ToIploadbalancingTcpRouteMapOutput() IploadbalancingTcpRouteMapOutput {
	return i.ToIploadbalancingTcpRouteMapOutputWithContext(context.Background())
}

func (i IploadbalancingTcpRouteMap) ToIploadbalancingTcpRouteMapOutputWithContext(ctx context.Context) IploadbalancingTcpRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteMapOutput)
}

type IploadbalancingTcpRouteOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpRoute)(nil))
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRouteOutput() IploadbalancingTcpRouteOutput {
	return o
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRouteOutputWithContext(ctx context.Context) IploadbalancingTcpRouteOutput {
	return o
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRoutePtrOutput() IploadbalancingTcpRoutePtrOutput {
	return o.ToIploadbalancingTcpRoutePtrOutputWithContext(context.Background())
}

func (o IploadbalancingTcpRouteOutput) ToIploadbalancingTcpRoutePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IploadbalancingTcpRoute) *IploadbalancingTcpRoute {
		return &v
	}).(IploadbalancingTcpRoutePtrOutput)
}

type IploadbalancingTcpRoutePtrOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRoute)(nil))
}

func (o IploadbalancingTcpRoutePtrOutput) ToIploadbalancingTcpRoutePtrOutput() IploadbalancingTcpRoutePtrOutput {
	return o
}

func (o IploadbalancingTcpRoutePtrOutput) ToIploadbalancingTcpRoutePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRoutePtrOutput {
	return o
}

func (o IploadbalancingTcpRoutePtrOutput) Elem() IploadbalancingTcpRouteOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRoute) IploadbalancingTcpRoute {
		if v != nil {
			return *v
		}
		var ret IploadbalancingTcpRoute
		return ret
	}).(IploadbalancingTcpRouteOutput)
}

type IploadbalancingTcpRouteArrayOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IploadbalancingTcpRoute)(nil))
}

func (o IploadbalancingTcpRouteArrayOutput) ToIploadbalancingTcpRouteArrayOutput() IploadbalancingTcpRouteArrayOutput {
	return o
}

func (o IploadbalancingTcpRouteArrayOutput) ToIploadbalancingTcpRouteArrayOutputWithContext(ctx context.Context) IploadbalancingTcpRouteArrayOutput {
	return o
}

func (o IploadbalancingTcpRouteArrayOutput) Index(i pulumi.IntInput) IploadbalancingTcpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IploadbalancingTcpRoute {
		return vs[0].([]IploadbalancingTcpRoute)[vs[1].(int)]
	}).(IploadbalancingTcpRouteOutput)
}

type IploadbalancingTcpRouteMapOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IploadbalancingTcpRoute)(nil))
}

func (o IploadbalancingTcpRouteMapOutput) ToIploadbalancingTcpRouteMapOutput() IploadbalancingTcpRouteMapOutput {
	return o
}

func (o IploadbalancingTcpRouteMapOutput) ToIploadbalancingTcpRouteMapOutputWithContext(ctx context.Context) IploadbalancingTcpRouteMapOutput {
	return o
}

func (o IploadbalancingTcpRouteMapOutput) MapIndex(k pulumi.StringInput) IploadbalancingTcpRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IploadbalancingTcpRoute {
		return vs[0].(map[string]IploadbalancingTcpRoute)[vs[1].(string)]
	}).(IploadbalancingTcpRouteOutput)
}

func init() {
	pulumi.RegisterOutputType(IploadbalancingTcpRouteOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRoutePtrOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteArrayOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteMapOutput{})
}
