// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackDedicatedServer struct {
	pulumi.CustomResourceState

	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackDedicatedServer registers a new resource with the given unique name, arguments, and options.
func NewVrackDedicatedServer(ctx *pulumi.Context,
	name string, args *VrackDedicatedServerArgs, opts ...pulumi.ResourceOption) (*VrackDedicatedServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VrackDedicatedServer
	err := ctx.RegisterResource("ovh:index/vrackDedicatedServer:VrackDedicatedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackDedicatedServer gets an existing VrackDedicatedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackDedicatedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackDedicatedServerState, opts ...pulumi.ResourceOption) (*VrackDedicatedServer, error) {
	var resource VrackDedicatedServer
	err := ctx.ReadResource("ovh:index/vrackDedicatedServer:VrackDedicatedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackDedicatedServer resources.
type vrackDedicatedServerState struct {
	ServerId *string `pulumi:"serverId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `pulumi:"serviceName"`
}

type VrackDedicatedServerState struct {
	ServerId pulumi.StringPtrInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrInput
}

func (VrackDedicatedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerState)(nil)).Elem()
}

type vrackDedicatedServerArgs struct {
	ServerId string `pulumi:"serverId"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackDedicatedServer resource.
type VrackDedicatedServerArgs struct {
	ServerId pulumi.StringInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringInput
}

func (VrackDedicatedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerArgs)(nil)).Elem()
}

type VrackDedicatedServerInput interface {
	pulumi.Input

	ToVrackDedicatedServerOutput() VrackDedicatedServerOutput
	ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput
}

func (*VrackDedicatedServer) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackDedicatedServer)(nil))
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerOutput() VrackDedicatedServerOutput {
	return i.ToVrackDedicatedServerOutputWithContext(context.Background())
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerOutput)
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerPtrOutput() VrackDedicatedServerPtrOutput {
	return i.ToVrackDedicatedServerPtrOutputWithContext(context.Background())
}

func (i *VrackDedicatedServer) ToVrackDedicatedServerPtrOutputWithContext(ctx context.Context) VrackDedicatedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerPtrOutput)
}

type VrackDedicatedServerPtrInput interface {
	pulumi.Input

	ToVrackDedicatedServerPtrOutput() VrackDedicatedServerPtrOutput
	ToVrackDedicatedServerPtrOutputWithContext(ctx context.Context) VrackDedicatedServerPtrOutput
}

type vrackDedicatedServerPtrType VrackDedicatedServerArgs

func (*vrackDedicatedServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServer)(nil))
}

func (i *vrackDedicatedServerPtrType) ToVrackDedicatedServerPtrOutput() VrackDedicatedServerPtrOutput {
	return i.ToVrackDedicatedServerPtrOutputWithContext(context.Background())
}

func (i *vrackDedicatedServerPtrType) ToVrackDedicatedServerPtrOutputWithContext(ctx context.Context) VrackDedicatedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerPtrOutput)
}

// VrackDedicatedServerArrayInput is an input type that accepts VrackDedicatedServerArray and VrackDedicatedServerArrayOutput values.
// You can construct a concrete instance of `VrackDedicatedServerArrayInput` via:
//
//          VrackDedicatedServerArray{ VrackDedicatedServerArgs{...} }
type VrackDedicatedServerArrayInput interface {
	pulumi.Input

	ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput
	ToVrackDedicatedServerArrayOutputWithContext(context.Context) VrackDedicatedServerArrayOutput
}

type VrackDedicatedServerArray []VrackDedicatedServerInput

func (VrackDedicatedServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackDedicatedServer)(nil)).Elem()
}

func (i VrackDedicatedServerArray) ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput {
	return i.ToVrackDedicatedServerArrayOutputWithContext(context.Background())
}

func (i VrackDedicatedServerArray) ToVrackDedicatedServerArrayOutputWithContext(ctx context.Context) VrackDedicatedServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerArrayOutput)
}

// VrackDedicatedServerMapInput is an input type that accepts VrackDedicatedServerMap and VrackDedicatedServerMapOutput values.
// You can construct a concrete instance of `VrackDedicatedServerMapInput` via:
//
//          VrackDedicatedServerMap{ "key": VrackDedicatedServerArgs{...} }
type VrackDedicatedServerMapInput interface {
	pulumi.Input

	ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput
	ToVrackDedicatedServerMapOutputWithContext(context.Context) VrackDedicatedServerMapOutput
}

type VrackDedicatedServerMap map[string]VrackDedicatedServerInput

func (VrackDedicatedServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackDedicatedServer)(nil)).Elem()
}

func (i VrackDedicatedServerMap) ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput {
	return i.ToVrackDedicatedServerMapOutputWithContext(context.Background())
}

func (i VrackDedicatedServerMap) ToVrackDedicatedServerMapOutputWithContext(ctx context.Context) VrackDedicatedServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackDedicatedServerMapOutput)
}

type VrackDedicatedServerOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackDedicatedServer)(nil))
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerOutput() VrackDedicatedServerOutput {
	return o
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerOutputWithContext(ctx context.Context) VrackDedicatedServerOutput {
	return o
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerPtrOutput() VrackDedicatedServerPtrOutput {
	return o.ToVrackDedicatedServerPtrOutputWithContext(context.Background())
}

func (o VrackDedicatedServerOutput) ToVrackDedicatedServerPtrOutputWithContext(ctx context.Context) VrackDedicatedServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VrackDedicatedServer) *VrackDedicatedServer {
		return &v
	}).(VrackDedicatedServerPtrOutput)
}

type VrackDedicatedServerPtrOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackDedicatedServer)(nil))
}

func (o VrackDedicatedServerPtrOutput) ToVrackDedicatedServerPtrOutput() VrackDedicatedServerPtrOutput {
	return o
}

func (o VrackDedicatedServerPtrOutput) ToVrackDedicatedServerPtrOutputWithContext(ctx context.Context) VrackDedicatedServerPtrOutput {
	return o
}

func (o VrackDedicatedServerPtrOutput) Elem() VrackDedicatedServerOutput {
	return o.ApplyT(func(v *VrackDedicatedServer) VrackDedicatedServer {
		if v != nil {
			return *v
		}
		var ret VrackDedicatedServer
		return ret
	}).(VrackDedicatedServerOutput)
}

type VrackDedicatedServerArrayOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrackDedicatedServer)(nil))
}

func (o VrackDedicatedServerArrayOutput) ToVrackDedicatedServerArrayOutput() VrackDedicatedServerArrayOutput {
	return o
}

func (o VrackDedicatedServerArrayOutput) ToVrackDedicatedServerArrayOutputWithContext(ctx context.Context) VrackDedicatedServerArrayOutput {
	return o
}

func (o VrackDedicatedServerArrayOutput) Index(i pulumi.IntInput) VrackDedicatedServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrackDedicatedServer {
		return vs[0].([]VrackDedicatedServer)[vs[1].(int)]
	}).(VrackDedicatedServerOutput)
}

type VrackDedicatedServerMapOutput struct{ *pulumi.OutputState }

func (VrackDedicatedServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VrackDedicatedServer)(nil))
}

func (o VrackDedicatedServerMapOutput) ToVrackDedicatedServerMapOutput() VrackDedicatedServerMapOutput {
	return o
}

func (o VrackDedicatedServerMapOutput) ToVrackDedicatedServerMapOutputWithContext(ctx context.Context) VrackDedicatedServerMapOutput {
	return o
}

func (o VrackDedicatedServerMapOutput) MapIndex(k pulumi.StringInput) VrackDedicatedServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VrackDedicatedServer {
		return vs[0].(map[string]VrackDedicatedServer)[vs[1].(string)]
	}).(VrackDedicatedServerOutput)
}

func init() {
	pulumi.RegisterOutputType(VrackDedicatedServerOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerPtrOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerArrayOutput{})
	pulumi.RegisterOutputType(VrackDedicatedServerMapOutput{})
}
