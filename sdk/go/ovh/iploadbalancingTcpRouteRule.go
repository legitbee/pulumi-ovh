// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingTcpRouteRule struct {
	pulumi.CustomResourceState

	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	Field       pulumi.StringOutput    `pulumi:"field"`
	Match       pulumi.StringOutput    `pulumi:"match"`
	Negate      pulumi.BoolOutput      `pulumi:"negate"`
	Pattern     pulumi.StringPtrOutput `pulumi:"pattern"`
	RouteId     pulumi.StringOutput    `pulumi:"routeId"`
	ServiceName pulumi.StringOutput    `pulumi:"serviceName"`
	SubField    pulumi.StringPtrOutput `pulumi:"subField"`
}

// NewIploadbalancingTcpRouteRule registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingTcpRouteRule(ctx *pulumi.Context,
	name string, args *IploadbalancingTcpRouteRuleArgs, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRouteRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IploadbalancingTcpRouteRule
	err := ctx.RegisterResource("ovh:index/iploadbalancingTcpRouteRule:IploadbalancingTcpRouteRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingTcpRouteRule gets an existing IploadbalancingTcpRouteRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingTcpRouteRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingTcpRouteRuleState, opts ...pulumi.ResourceOption) (*IploadbalancingTcpRouteRule, error) {
	var resource IploadbalancingTcpRouteRule
	err := ctx.ReadResource("ovh:index/iploadbalancingTcpRouteRule:IploadbalancingTcpRouteRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingTcpRouteRule resources.
type iploadbalancingTcpRouteRuleState struct {
	DisplayName *string `pulumi:"displayName"`
	Field       *string `pulumi:"field"`
	Match       *string `pulumi:"match"`
	Negate      *bool   `pulumi:"negate"`
	Pattern     *string `pulumi:"pattern"`
	RouteId     *string `pulumi:"routeId"`
	ServiceName *string `pulumi:"serviceName"`
	SubField    *string `pulumi:"subField"`
}

type IploadbalancingTcpRouteRuleState struct {
	DisplayName pulumi.StringPtrInput
	Field       pulumi.StringPtrInput
	Match       pulumi.StringPtrInput
	Negate      pulumi.BoolPtrInput
	Pattern     pulumi.StringPtrInput
	RouteId     pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	SubField    pulumi.StringPtrInput
}

func (IploadbalancingTcpRouteRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteRuleState)(nil)).Elem()
}

type iploadbalancingTcpRouteRuleArgs struct {
	DisplayName *string `pulumi:"displayName"`
	Field       string  `pulumi:"field"`
	Match       string  `pulumi:"match"`
	Negate      *bool   `pulumi:"negate"`
	Pattern     *string `pulumi:"pattern"`
	RouteId     string  `pulumi:"routeId"`
	ServiceName string  `pulumi:"serviceName"`
	SubField    *string `pulumi:"subField"`
}

// The set of arguments for constructing a IploadbalancingTcpRouteRule resource.
type IploadbalancingTcpRouteRuleArgs struct {
	DisplayName pulumi.StringPtrInput
	Field       pulumi.StringInput
	Match       pulumi.StringInput
	Negate      pulumi.BoolPtrInput
	Pattern     pulumi.StringPtrInput
	RouteId     pulumi.StringInput
	ServiceName pulumi.StringInput
	SubField    pulumi.StringPtrInput
}

func (IploadbalancingTcpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpRouteRuleArgs)(nil)).Elem()
}

type IploadbalancingTcpRouteRuleInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteRuleOutput() IploadbalancingTcpRouteRuleOutput
	ToIploadbalancingTcpRouteRuleOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleOutput
}

func (*IploadbalancingTcpRouteRule) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpRouteRule)(nil))
}

func (i *IploadbalancingTcpRouteRule) ToIploadbalancingTcpRouteRuleOutput() IploadbalancingTcpRouteRuleOutput {
	return i.ToIploadbalancingTcpRouteRuleOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpRouteRule) ToIploadbalancingTcpRouteRuleOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteRuleOutput)
}

func (i *IploadbalancingTcpRouteRule) ToIploadbalancingTcpRouteRulePtrOutput() IploadbalancingTcpRouteRulePtrOutput {
	return i.ToIploadbalancingTcpRouteRulePtrOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpRouteRule) ToIploadbalancingTcpRouteRulePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteRulePtrOutput)
}

type IploadbalancingTcpRouteRulePtrInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteRulePtrOutput() IploadbalancingTcpRouteRulePtrOutput
	ToIploadbalancingTcpRouteRulePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRulePtrOutput
}

type iploadbalancingTcpRouteRulePtrType IploadbalancingTcpRouteRuleArgs

func (*iploadbalancingTcpRouteRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRouteRule)(nil))
}

func (i *iploadbalancingTcpRouteRulePtrType) ToIploadbalancingTcpRouteRulePtrOutput() IploadbalancingTcpRouteRulePtrOutput {
	return i.ToIploadbalancingTcpRouteRulePtrOutputWithContext(context.Background())
}

func (i *iploadbalancingTcpRouteRulePtrType) ToIploadbalancingTcpRouteRulePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteRulePtrOutput)
}

// IploadbalancingTcpRouteRuleArrayInput is an input type that accepts IploadbalancingTcpRouteRuleArray and IploadbalancingTcpRouteRuleArrayOutput values.
// You can construct a concrete instance of `IploadbalancingTcpRouteRuleArrayInput` via:
//
//          IploadbalancingTcpRouteRuleArray{ IploadbalancingTcpRouteRuleArgs{...} }
type IploadbalancingTcpRouteRuleArrayInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteRuleArrayOutput() IploadbalancingTcpRouteRuleArrayOutput
	ToIploadbalancingTcpRouteRuleArrayOutputWithContext(context.Context) IploadbalancingTcpRouteRuleArrayOutput
}

type IploadbalancingTcpRouteRuleArray []IploadbalancingTcpRouteRuleInput

func (IploadbalancingTcpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IploadbalancingTcpRouteRule)(nil)).Elem()
}

func (i IploadbalancingTcpRouteRuleArray) ToIploadbalancingTcpRouteRuleArrayOutput() IploadbalancingTcpRouteRuleArrayOutput {
	return i.ToIploadbalancingTcpRouteRuleArrayOutputWithContext(context.Background())
}

func (i IploadbalancingTcpRouteRuleArray) ToIploadbalancingTcpRouteRuleArrayOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteRuleArrayOutput)
}

// IploadbalancingTcpRouteRuleMapInput is an input type that accepts IploadbalancingTcpRouteRuleMap and IploadbalancingTcpRouteRuleMapOutput values.
// You can construct a concrete instance of `IploadbalancingTcpRouteRuleMapInput` via:
//
//          IploadbalancingTcpRouteRuleMap{ "key": IploadbalancingTcpRouteRuleArgs{...} }
type IploadbalancingTcpRouteRuleMapInput interface {
	pulumi.Input

	ToIploadbalancingTcpRouteRuleMapOutput() IploadbalancingTcpRouteRuleMapOutput
	ToIploadbalancingTcpRouteRuleMapOutputWithContext(context.Context) IploadbalancingTcpRouteRuleMapOutput
}

type IploadbalancingTcpRouteRuleMap map[string]IploadbalancingTcpRouteRuleInput

func (IploadbalancingTcpRouteRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IploadbalancingTcpRouteRule)(nil)).Elem()
}

func (i IploadbalancingTcpRouteRuleMap) ToIploadbalancingTcpRouteRuleMapOutput() IploadbalancingTcpRouteRuleMapOutput {
	return i.ToIploadbalancingTcpRouteRuleMapOutputWithContext(context.Background())
}

func (i IploadbalancingTcpRouteRuleMap) ToIploadbalancingTcpRouteRuleMapOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpRouteRuleMapOutput)
}

type IploadbalancingTcpRouteRuleOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpRouteRule)(nil))
}

func (o IploadbalancingTcpRouteRuleOutput) ToIploadbalancingTcpRouteRuleOutput() IploadbalancingTcpRouteRuleOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleOutput) ToIploadbalancingTcpRouteRuleOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleOutput) ToIploadbalancingTcpRouteRulePtrOutput() IploadbalancingTcpRouteRulePtrOutput {
	return o.ToIploadbalancingTcpRouteRulePtrOutputWithContext(context.Background())
}

func (o IploadbalancingTcpRouteRuleOutput) ToIploadbalancingTcpRouteRulePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IploadbalancingTcpRouteRule) *IploadbalancingTcpRouteRule {
		return &v
	}).(IploadbalancingTcpRouteRulePtrOutput)
}

type IploadbalancingTcpRouteRulePtrOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpRouteRule)(nil))
}

func (o IploadbalancingTcpRouteRulePtrOutput) ToIploadbalancingTcpRouteRulePtrOutput() IploadbalancingTcpRouteRulePtrOutput {
	return o
}

func (o IploadbalancingTcpRouteRulePtrOutput) ToIploadbalancingTcpRouteRulePtrOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRulePtrOutput {
	return o
}

func (o IploadbalancingTcpRouteRulePtrOutput) Elem() IploadbalancingTcpRouteRuleOutput {
	return o.ApplyT(func(v *IploadbalancingTcpRouteRule) IploadbalancingTcpRouteRule {
		if v != nil {
			return *v
		}
		var ret IploadbalancingTcpRouteRule
		return ret
	}).(IploadbalancingTcpRouteRuleOutput)
}

type IploadbalancingTcpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IploadbalancingTcpRouteRule)(nil))
}

func (o IploadbalancingTcpRouteRuleArrayOutput) ToIploadbalancingTcpRouteRuleArrayOutput() IploadbalancingTcpRouteRuleArrayOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleArrayOutput) ToIploadbalancingTcpRouteRuleArrayOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleArrayOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleArrayOutput) Index(i pulumi.IntInput) IploadbalancingTcpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IploadbalancingTcpRouteRule {
		return vs[0].([]IploadbalancingTcpRouteRule)[vs[1].(int)]
	}).(IploadbalancingTcpRouteRuleOutput)
}

type IploadbalancingTcpRouteRuleMapOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpRouteRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IploadbalancingTcpRouteRule)(nil))
}

func (o IploadbalancingTcpRouteRuleMapOutput) ToIploadbalancingTcpRouteRuleMapOutput() IploadbalancingTcpRouteRuleMapOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleMapOutput) ToIploadbalancingTcpRouteRuleMapOutputWithContext(ctx context.Context) IploadbalancingTcpRouteRuleMapOutput {
	return o
}

func (o IploadbalancingTcpRouteRuleMapOutput) MapIndex(k pulumi.StringInput) IploadbalancingTcpRouteRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IploadbalancingTcpRouteRule {
		return vs[0].(map[string]IploadbalancingTcpRouteRule)[vs[1].(string)]
	}).(IploadbalancingTcpRouteRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(IploadbalancingTcpRouteRuleOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteRulePtrOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpRouteRuleMapOutput{})
}
