// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpReverseResource struct {
	pulumi.CustomResourceState

	Ip        pulumi.StringOutput `pulumi:"ip"`
	IpReverse pulumi.StringOutput `pulumi:"ipReverse"`
	Reverse   pulumi.StringOutput `pulumi:"reverse"`
}

// NewIpReverseResource registers a new resource with the given unique name, arguments, and options.
func NewIpReverseResource(ctx *pulumi.Context,
	name string, args *IpReverseResourceArgs, opts ...pulumi.ResourceOption) (*IpReverseResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.IpReverse == nil {
		return nil, errors.New("invalid value for required argument 'IpReverse'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	var resource IpReverseResource
	err := ctx.RegisterResource("ovh:index/ipReverseResource:IpReverseResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpReverseResource gets an existing IpReverseResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpReverseResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpReverseResourceState, opts ...pulumi.ResourceOption) (*IpReverseResource, error) {
	var resource IpReverseResource
	err := ctx.ReadResource("ovh:index/ipReverseResource:IpReverseResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpReverseResource resources.
type ipReverseResourceState struct {
	Ip        *string `pulumi:"ip"`
	IpReverse *string `pulumi:"ipReverse"`
	Reverse   *string `pulumi:"reverse"`
}

type IpReverseResourceState struct {
	Ip        pulumi.StringPtrInput
	IpReverse pulumi.StringPtrInput
	Reverse   pulumi.StringPtrInput
}

func (IpReverseResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseResourceState)(nil)).Elem()
}

type ipReverseResourceArgs struct {
	Ip        string `pulumi:"ip"`
	IpReverse string `pulumi:"ipReverse"`
	Reverse   string `pulumi:"reverse"`
}

// The set of arguments for constructing a IpReverseResource resource.
type IpReverseResourceArgs struct {
	Ip        pulumi.StringInput
	IpReverse pulumi.StringInput
	Reverse   pulumi.StringInput
}

func (IpReverseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipReverseResourceArgs)(nil)).Elem()
}

type IpReverseResourceInput interface {
	pulumi.Input

	ToIpReverseResourceOutput() IpReverseResourceOutput
	ToIpReverseResourceOutputWithContext(ctx context.Context) IpReverseResourceOutput
}

func (*IpReverseResource) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverseResource)(nil))
}

func (i *IpReverseResource) ToIpReverseResourceOutput() IpReverseResourceOutput {
	return i.ToIpReverseResourceOutputWithContext(context.Background())
}

func (i *IpReverseResource) ToIpReverseResourceOutputWithContext(ctx context.Context) IpReverseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseResourceOutput)
}

func (i *IpReverseResource) ToIpReverseResourcePtrOutput() IpReverseResourcePtrOutput {
	return i.ToIpReverseResourcePtrOutputWithContext(context.Background())
}

func (i *IpReverseResource) ToIpReverseResourcePtrOutputWithContext(ctx context.Context) IpReverseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseResourcePtrOutput)
}

type IpReverseResourcePtrInput interface {
	pulumi.Input

	ToIpReverseResourcePtrOutput() IpReverseResourcePtrOutput
	ToIpReverseResourcePtrOutputWithContext(ctx context.Context) IpReverseResourcePtrOutput
}

type ipReverseResourcePtrType IpReverseResourceArgs

func (*ipReverseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverseResource)(nil))
}

func (i *ipReverseResourcePtrType) ToIpReverseResourcePtrOutput() IpReverseResourcePtrOutput {
	return i.ToIpReverseResourcePtrOutputWithContext(context.Background())
}

func (i *ipReverseResourcePtrType) ToIpReverseResourcePtrOutputWithContext(ctx context.Context) IpReverseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseResourcePtrOutput)
}

// IpReverseResourceArrayInput is an input type that accepts IpReverseResourceArray and IpReverseResourceArrayOutput values.
// You can construct a concrete instance of `IpReverseResourceArrayInput` via:
//
//          IpReverseResourceArray{ IpReverseResourceArgs{...} }
type IpReverseResourceArrayInput interface {
	pulumi.Input

	ToIpReverseResourceArrayOutput() IpReverseResourceArrayOutput
	ToIpReverseResourceArrayOutputWithContext(context.Context) IpReverseResourceArrayOutput
}

type IpReverseResourceArray []IpReverseResourceInput

func (IpReverseResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpReverseResource)(nil)).Elem()
}

func (i IpReverseResourceArray) ToIpReverseResourceArrayOutput() IpReverseResourceArrayOutput {
	return i.ToIpReverseResourceArrayOutputWithContext(context.Background())
}

func (i IpReverseResourceArray) ToIpReverseResourceArrayOutputWithContext(ctx context.Context) IpReverseResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseResourceArrayOutput)
}

// IpReverseResourceMapInput is an input type that accepts IpReverseResourceMap and IpReverseResourceMapOutput values.
// You can construct a concrete instance of `IpReverseResourceMapInput` via:
//
//          IpReverseResourceMap{ "key": IpReverseResourceArgs{...} }
type IpReverseResourceMapInput interface {
	pulumi.Input

	ToIpReverseResourceMapOutput() IpReverseResourceMapOutput
	ToIpReverseResourceMapOutputWithContext(context.Context) IpReverseResourceMapOutput
}

type IpReverseResourceMap map[string]IpReverseResourceInput

func (IpReverseResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpReverseResource)(nil)).Elem()
}

func (i IpReverseResourceMap) ToIpReverseResourceMapOutput() IpReverseResourceMapOutput {
	return i.ToIpReverseResourceMapOutputWithContext(context.Background())
}

func (i IpReverseResourceMap) ToIpReverseResourceMapOutputWithContext(ctx context.Context) IpReverseResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpReverseResourceMapOutput)
}

type IpReverseResourceOutput struct{ *pulumi.OutputState }

func (IpReverseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpReverseResource)(nil))
}

func (o IpReverseResourceOutput) ToIpReverseResourceOutput() IpReverseResourceOutput {
	return o
}

func (o IpReverseResourceOutput) ToIpReverseResourceOutputWithContext(ctx context.Context) IpReverseResourceOutput {
	return o
}

func (o IpReverseResourceOutput) ToIpReverseResourcePtrOutput() IpReverseResourcePtrOutput {
	return o.ToIpReverseResourcePtrOutputWithContext(context.Background())
}

func (o IpReverseResourceOutput) ToIpReverseResourcePtrOutputWithContext(ctx context.Context) IpReverseResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpReverseResource) *IpReverseResource {
		return &v
	}).(IpReverseResourcePtrOutput)
}

type IpReverseResourcePtrOutput struct{ *pulumi.OutputState }

func (IpReverseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpReverseResource)(nil))
}

func (o IpReverseResourcePtrOutput) ToIpReverseResourcePtrOutput() IpReverseResourcePtrOutput {
	return o
}

func (o IpReverseResourcePtrOutput) ToIpReverseResourcePtrOutputWithContext(ctx context.Context) IpReverseResourcePtrOutput {
	return o
}

func (o IpReverseResourcePtrOutput) Elem() IpReverseResourceOutput {
	return o.ApplyT(func(v *IpReverseResource) IpReverseResource {
		if v != nil {
			return *v
		}
		var ret IpReverseResource
		return ret
	}).(IpReverseResourceOutput)
}

type IpReverseResourceArrayOutput struct{ *pulumi.OutputState }

func (IpReverseResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpReverseResource)(nil))
}

func (o IpReverseResourceArrayOutput) ToIpReverseResourceArrayOutput() IpReverseResourceArrayOutput {
	return o
}

func (o IpReverseResourceArrayOutput) ToIpReverseResourceArrayOutputWithContext(ctx context.Context) IpReverseResourceArrayOutput {
	return o
}

func (o IpReverseResourceArrayOutput) Index(i pulumi.IntInput) IpReverseResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpReverseResource {
		return vs[0].([]IpReverseResource)[vs[1].(int)]
	}).(IpReverseResourceOutput)
}

type IpReverseResourceMapOutput struct{ *pulumi.OutputState }

func (IpReverseResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IpReverseResource)(nil))
}

func (o IpReverseResourceMapOutput) ToIpReverseResourceMapOutput() IpReverseResourceMapOutput {
	return o
}

func (o IpReverseResourceMapOutput) ToIpReverseResourceMapOutputWithContext(ctx context.Context) IpReverseResourceMapOutput {
	return o
}

func (o IpReverseResourceMapOutput) MapIndex(k pulumi.StringInput) IpReverseResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IpReverseResource {
		return vs[0].(map[string]IpReverseResource)[vs[1].(string)]
	}).(IpReverseResourceOutput)
}

func init() {
	pulumi.RegisterOutputType(IpReverseResourceOutput{})
	pulumi.RegisterOutputType(IpReverseResourcePtrOutput{})
	pulumi.RegisterOutputType(IpReverseResourceArrayOutput{})
	pulumi.RegisterOutputType(IpReverseResourceMapOutput{})
}
