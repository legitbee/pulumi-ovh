// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackIploadbalancing struct {
	pulumi.CustomResourceState

	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringOutput `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackIploadbalancing registers a new resource with the given unique name, arguments, and options.
func NewVrackIploadbalancing(ctx *pulumi.Context,
	name string, args *VrackIploadbalancingArgs, opts ...pulumi.ResourceOption) (*VrackIploadbalancing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpLoadbalancing == nil {
		return nil, errors.New("invalid value for required argument 'IpLoadbalancing'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VrackIploadbalancing
	err := ctx.RegisterResource("ovh:index/vrackIploadbalancing:VrackIploadbalancing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackIploadbalancing gets an existing VrackIploadbalancing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackIploadbalancing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackIploadbalancingState, opts ...pulumi.ResourceOption) (*VrackIploadbalancing, error) {
	var resource VrackIploadbalancing
	err := ctx.ReadResource("ovh:index/vrackIploadbalancing:VrackIploadbalancing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackIploadbalancing resources.
type vrackIploadbalancingState struct {
	// Your ipLoadbalancing
	IpLoadbalancing *string `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type VrackIploadbalancingState struct {
	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (VrackIploadbalancingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIploadbalancingState)(nil)).Elem()
}

type vrackIploadbalancingArgs struct {
	// Your ipLoadbalancing
	IpLoadbalancing string `pulumi:"ipLoadbalancing"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackIploadbalancing resource.
type VrackIploadbalancingArgs struct {
	// Your ipLoadbalancing
	IpLoadbalancing pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VrackIploadbalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIploadbalancingArgs)(nil)).Elem()
}

type VrackIploadbalancingInput interface {
	pulumi.Input

	ToVrackIploadbalancingOutput() VrackIploadbalancingOutput
	ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput
}

func (*VrackIploadbalancing) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackIploadbalancing)(nil))
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingOutput() VrackIploadbalancingOutput {
	return i.ToVrackIploadbalancingOutputWithContext(context.Background())
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingOutput)
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingPtrOutput() VrackIploadbalancingPtrOutput {
	return i.ToVrackIploadbalancingPtrOutputWithContext(context.Background())
}

func (i *VrackIploadbalancing) ToVrackIploadbalancingPtrOutputWithContext(ctx context.Context) VrackIploadbalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingPtrOutput)
}

type VrackIploadbalancingPtrInput interface {
	pulumi.Input

	ToVrackIploadbalancingPtrOutput() VrackIploadbalancingPtrOutput
	ToVrackIploadbalancingPtrOutputWithContext(ctx context.Context) VrackIploadbalancingPtrOutput
}

type vrackIploadbalancingPtrType VrackIploadbalancingArgs

func (*vrackIploadbalancingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIploadbalancing)(nil))
}

func (i *vrackIploadbalancingPtrType) ToVrackIploadbalancingPtrOutput() VrackIploadbalancingPtrOutput {
	return i.ToVrackIploadbalancingPtrOutputWithContext(context.Background())
}

func (i *vrackIploadbalancingPtrType) ToVrackIploadbalancingPtrOutputWithContext(ctx context.Context) VrackIploadbalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingPtrOutput)
}

// VrackIploadbalancingArrayInput is an input type that accepts VrackIploadbalancingArray and VrackIploadbalancingArrayOutput values.
// You can construct a concrete instance of `VrackIploadbalancingArrayInput` via:
//
//          VrackIploadbalancingArray{ VrackIploadbalancingArgs{...} }
type VrackIploadbalancingArrayInput interface {
	pulumi.Input

	ToVrackIploadbalancingArrayOutput() VrackIploadbalancingArrayOutput
	ToVrackIploadbalancingArrayOutputWithContext(context.Context) VrackIploadbalancingArrayOutput
}

type VrackIploadbalancingArray []VrackIploadbalancingInput

func (VrackIploadbalancingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackIploadbalancing)(nil)).Elem()
}

func (i VrackIploadbalancingArray) ToVrackIploadbalancingArrayOutput() VrackIploadbalancingArrayOutput {
	return i.ToVrackIploadbalancingArrayOutputWithContext(context.Background())
}

func (i VrackIploadbalancingArray) ToVrackIploadbalancingArrayOutputWithContext(ctx context.Context) VrackIploadbalancingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingArrayOutput)
}

// VrackIploadbalancingMapInput is an input type that accepts VrackIploadbalancingMap and VrackIploadbalancingMapOutput values.
// You can construct a concrete instance of `VrackIploadbalancingMapInput` via:
//
//          VrackIploadbalancingMap{ "key": VrackIploadbalancingArgs{...} }
type VrackIploadbalancingMapInput interface {
	pulumi.Input

	ToVrackIploadbalancingMapOutput() VrackIploadbalancingMapOutput
	ToVrackIploadbalancingMapOutputWithContext(context.Context) VrackIploadbalancingMapOutput
}

type VrackIploadbalancingMap map[string]VrackIploadbalancingInput

func (VrackIploadbalancingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackIploadbalancing)(nil)).Elem()
}

func (i VrackIploadbalancingMap) ToVrackIploadbalancingMapOutput() VrackIploadbalancingMapOutput {
	return i.ToVrackIploadbalancingMapOutputWithContext(context.Background())
}

func (i VrackIploadbalancingMap) ToVrackIploadbalancingMapOutputWithContext(ctx context.Context) VrackIploadbalancingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIploadbalancingMapOutput)
}

type VrackIploadbalancingOutput struct{ *pulumi.OutputState }

func (VrackIploadbalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackIploadbalancing)(nil))
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingOutput() VrackIploadbalancingOutput {
	return o
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingOutputWithContext(ctx context.Context) VrackIploadbalancingOutput {
	return o
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingPtrOutput() VrackIploadbalancingPtrOutput {
	return o.ToVrackIploadbalancingPtrOutputWithContext(context.Background())
}

func (o VrackIploadbalancingOutput) ToVrackIploadbalancingPtrOutputWithContext(ctx context.Context) VrackIploadbalancingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VrackIploadbalancing) *VrackIploadbalancing {
		return &v
	}).(VrackIploadbalancingPtrOutput)
}

type VrackIploadbalancingPtrOutput struct{ *pulumi.OutputState }

func (VrackIploadbalancingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIploadbalancing)(nil))
}

func (o VrackIploadbalancingPtrOutput) ToVrackIploadbalancingPtrOutput() VrackIploadbalancingPtrOutput {
	return o
}

func (o VrackIploadbalancingPtrOutput) ToVrackIploadbalancingPtrOutputWithContext(ctx context.Context) VrackIploadbalancingPtrOutput {
	return o
}

func (o VrackIploadbalancingPtrOutput) Elem() VrackIploadbalancingOutput {
	return o.ApplyT(func(v *VrackIploadbalancing) VrackIploadbalancing {
		if v != nil {
			return *v
		}
		var ret VrackIploadbalancing
		return ret
	}).(VrackIploadbalancingOutput)
}

type VrackIploadbalancingArrayOutput struct{ *pulumi.OutputState }

func (VrackIploadbalancingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrackIploadbalancing)(nil))
}

func (o VrackIploadbalancingArrayOutput) ToVrackIploadbalancingArrayOutput() VrackIploadbalancingArrayOutput {
	return o
}

func (o VrackIploadbalancingArrayOutput) ToVrackIploadbalancingArrayOutputWithContext(ctx context.Context) VrackIploadbalancingArrayOutput {
	return o
}

func (o VrackIploadbalancingArrayOutput) Index(i pulumi.IntInput) VrackIploadbalancingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrackIploadbalancing {
		return vs[0].([]VrackIploadbalancing)[vs[1].(int)]
	}).(VrackIploadbalancingOutput)
}

type VrackIploadbalancingMapOutput struct{ *pulumi.OutputState }

func (VrackIploadbalancingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VrackIploadbalancing)(nil))
}

func (o VrackIploadbalancingMapOutput) ToVrackIploadbalancingMapOutput() VrackIploadbalancingMapOutput {
	return o
}

func (o VrackIploadbalancingMapOutput) ToVrackIploadbalancingMapOutputWithContext(ctx context.Context) VrackIploadbalancingMapOutput {
	return o
}

func (o VrackIploadbalancingMapOutput) MapIndex(k pulumi.StringInput) VrackIploadbalancingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VrackIploadbalancing {
		return vs[0].(map[string]VrackIploadbalancing)[vs[1].(string)]
	}).(VrackIploadbalancingOutput)
}

func init() {
	pulumi.RegisterOutputType(VrackIploadbalancingOutput{})
	pulumi.RegisterOutputType(VrackIploadbalancingPtrOutput{})
	pulumi.RegisterOutputType(VrackIploadbalancingArrayOutput{})
	pulumi.RegisterOutputType(VrackIploadbalancingMapOutput{})
}
