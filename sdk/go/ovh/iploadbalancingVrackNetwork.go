// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingVrackNetwork struct {
	pulumi.CustomResourceState

	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayOutput `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringOutput `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntOutput `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntOutput `pulumi:"vrackNetworkId"`
}

// NewIploadbalancingVrackNetwork registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingVrackNetwork(ctx *pulumi.Context,
	name string, args *IploadbalancingVrackNetworkArgs, opts ...pulumi.ResourceOption) (*IploadbalancingVrackNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatIp == nil {
		return nil, errors.New("invalid value for required argument 'NatIp'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	var resource IploadbalancingVrackNetwork
	err := ctx.RegisterResource("ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingVrackNetwork gets an existing IploadbalancingVrackNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingVrackNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingVrackNetworkState, opts ...pulumi.ResourceOption) (*IploadbalancingVrackNetwork, error) {
	var resource IploadbalancingVrackNetwork
	err := ctx.ReadResource("ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingVrackNetwork resources.
type iploadbalancingVrackNetworkState struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp *string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName *string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet *string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
}

type IploadbalancingVrackNetworkState struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringPtrInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringPtrInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringPtrInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
	// Internal Load Balancer identifier of the vRack private network
	VrackNetworkId pulumi.IntPtrInput
}

func (IploadbalancingVrackNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVrackNetworkState)(nil)).Elem()
}

type iploadbalancingVrackNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName *string `pulumi:"displayName"`
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds []int `pulumi:"farmIds"`
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp string `pulumi:"natIp"`
	// The internal name of your IPloadbalancer
	ServiceName string `pulumi:"serviceName"`
	// IP block of the private network in the vRack
	Subnet string `pulumi:"subnet"`
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a IploadbalancingVrackNetwork resource.
type IploadbalancingVrackNetworkArgs struct {
	// Human readable name for your vrack network
	DisplayName pulumi.StringPtrInput
	// This attribute is there for documentation purpose only and isnt passed to the OVH API as it may conflicts with http/tcp
	// farms `vrack_network_id` attribute
	FarmIds pulumi.IntArrayInput
	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must
	// be in the private network and reserved for the Load Balancer
	NatIp pulumi.StringInput
	// The internal name of your IPloadbalancer
	ServiceName pulumi.StringInput
	// IP block of the private network in the vRack
	Subnet pulumi.StringInput
	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan pulumi.IntPtrInput
}

func (IploadbalancingVrackNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingVrackNetworkArgs)(nil)).Elem()
}

type IploadbalancingVrackNetworkInput interface {
	pulumi.Input

	ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput
	ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput
}

func (*IploadbalancingVrackNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingVrackNetwork)(nil))
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput {
	return i.ToIploadbalancingVrackNetworkOutputWithContext(context.Background())
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkOutput)
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkPtrOutput() IploadbalancingVrackNetworkPtrOutput {
	return i.ToIploadbalancingVrackNetworkPtrOutputWithContext(context.Background())
}

func (i *IploadbalancingVrackNetwork) ToIploadbalancingVrackNetworkPtrOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkPtrOutput)
}

type IploadbalancingVrackNetworkPtrInput interface {
	pulumi.Input

	ToIploadbalancingVrackNetworkPtrOutput() IploadbalancingVrackNetworkPtrOutput
	ToIploadbalancingVrackNetworkPtrOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkPtrOutput
}

type iploadbalancingVrackNetworkPtrType IploadbalancingVrackNetworkArgs

func (*iploadbalancingVrackNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingVrackNetwork)(nil))
}

func (i *iploadbalancingVrackNetworkPtrType) ToIploadbalancingVrackNetworkPtrOutput() IploadbalancingVrackNetworkPtrOutput {
	return i.ToIploadbalancingVrackNetworkPtrOutputWithContext(context.Background())
}

func (i *iploadbalancingVrackNetworkPtrType) ToIploadbalancingVrackNetworkPtrOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkPtrOutput)
}

// IploadbalancingVrackNetworkArrayInput is an input type that accepts IploadbalancingVrackNetworkArray and IploadbalancingVrackNetworkArrayOutput values.
// You can construct a concrete instance of `IploadbalancingVrackNetworkArrayInput` via:
//
//          IploadbalancingVrackNetworkArray{ IploadbalancingVrackNetworkArgs{...} }
type IploadbalancingVrackNetworkArrayInput interface {
	pulumi.Input

	ToIploadbalancingVrackNetworkArrayOutput() IploadbalancingVrackNetworkArrayOutput
	ToIploadbalancingVrackNetworkArrayOutputWithContext(context.Context) IploadbalancingVrackNetworkArrayOutput
}

type IploadbalancingVrackNetworkArray []IploadbalancingVrackNetworkInput

func (IploadbalancingVrackNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IploadbalancingVrackNetwork)(nil)).Elem()
}

func (i IploadbalancingVrackNetworkArray) ToIploadbalancingVrackNetworkArrayOutput() IploadbalancingVrackNetworkArrayOutput {
	return i.ToIploadbalancingVrackNetworkArrayOutputWithContext(context.Background())
}

func (i IploadbalancingVrackNetworkArray) ToIploadbalancingVrackNetworkArrayOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkArrayOutput)
}

// IploadbalancingVrackNetworkMapInput is an input type that accepts IploadbalancingVrackNetworkMap and IploadbalancingVrackNetworkMapOutput values.
// You can construct a concrete instance of `IploadbalancingVrackNetworkMapInput` via:
//
//          IploadbalancingVrackNetworkMap{ "key": IploadbalancingVrackNetworkArgs{...} }
type IploadbalancingVrackNetworkMapInput interface {
	pulumi.Input

	ToIploadbalancingVrackNetworkMapOutput() IploadbalancingVrackNetworkMapOutput
	ToIploadbalancingVrackNetworkMapOutputWithContext(context.Context) IploadbalancingVrackNetworkMapOutput
}

type IploadbalancingVrackNetworkMap map[string]IploadbalancingVrackNetworkInput

func (IploadbalancingVrackNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IploadbalancingVrackNetwork)(nil)).Elem()
}

func (i IploadbalancingVrackNetworkMap) ToIploadbalancingVrackNetworkMapOutput() IploadbalancingVrackNetworkMapOutput {
	return i.ToIploadbalancingVrackNetworkMapOutputWithContext(context.Background())
}

func (i IploadbalancingVrackNetworkMap) ToIploadbalancingVrackNetworkMapOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingVrackNetworkMapOutput)
}

type IploadbalancingVrackNetworkOutput struct{ *pulumi.OutputState }

func (IploadbalancingVrackNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingVrackNetwork)(nil))
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkOutput() IploadbalancingVrackNetworkOutput {
	return o
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkOutput {
	return o
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkPtrOutput() IploadbalancingVrackNetworkPtrOutput {
	return o.ToIploadbalancingVrackNetworkPtrOutputWithContext(context.Background())
}

func (o IploadbalancingVrackNetworkOutput) ToIploadbalancingVrackNetworkPtrOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IploadbalancingVrackNetwork) *IploadbalancingVrackNetwork {
		return &v
	}).(IploadbalancingVrackNetworkPtrOutput)
}

type IploadbalancingVrackNetworkPtrOutput struct{ *pulumi.OutputState }

func (IploadbalancingVrackNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingVrackNetwork)(nil))
}

func (o IploadbalancingVrackNetworkPtrOutput) ToIploadbalancingVrackNetworkPtrOutput() IploadbalancingVrackNetworkPtrOutput {
	return o
}

func (o IploadbalancingVrackNetworkPtrOutput) ToIploadbalancingVrackNetworkPtrOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkPtrOutput {
	return o
}

func (o IploadbalancingVrackNetworkPtrOutput) Elem() IploadbalancingVrackNetworkOutput {
	return o.ApplyT(func(v *IploadbalancingVrackNetwork) IploadbalancingVrackNetwork {
		if v != nil {
			return *v
		}
		var ret IploadbalancingVrackNetwork
		return ret
	}).(IploadbalancingVrackNetworkOutput)
}

type IploadbalancingVrackNetworkArrayOutput struct{ *pulumi.OutputState }

func (IploadbalancingVrackNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IploadbalancingVrackNetwork)(nil))
}

func (o IploadbalancingVrackNetworkArrayOutput) ToIploadbalancingVrackNetworkArrayOutput() IploadbalancingVrackNetworkArrayOutput {
	return o
}

func (o IploadbalancingVrackNetworkArrayOutput) ToIploadbalancingVrackNetworkArrayOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkArrayOutput {
	return o
}

func (o IploadbalancingVrackNetworkArrayOutput) Index(i pulumi.IntInput) IploadbalancingVrackNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IploadbalancingVrackNetwork {
		return vs[0].([]IploadbalancingVrackNetwork)[vs[1].(int)]
	}).(IploadbalancingVrackNetworkOutput)
}

type IploadbalancingVrackNetworkMapOutput struct{ *pulumi.OutputState }

func (IploadbalancingVrackNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IploadbalancingVrackNetwork)(nil))
}

func (o IploadbalancingVrackNetworkMapOutput) ToIploadbalancingVrackNetworkMapOutput() IploadbalancingVrackNetworkMapOutput {
	return o
}

func (o IploadbalancingVrackNetworkMapOutput) ToIploadbalancingVrackNetworkMapOutputWithContext(ctx context.Context) IploadbalancingVrackNetworkMapOutput {
	return o
}

func (o IploadbalancingVrackNetworkMapOutput) MapIndex(k pulumi.StringInput) IploadbalancingVrackNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IploadbalancingVrackNetwork {
		return vs[0].(map[string]IploadbalancingVrackNetwork)[vs[1].(string)]
	}).(IploadbalancingVrackNetworkOutput)
}

func init() {
	pulumi.RegisterOutputType(IploadbalancingVrackNetworkOutput{})
	pulumi.RegisterOutputType(IploadbalancingVrackNetworkPtrOutput{})
	pulumi.RegisterOutputType(IploadbalancingVrackNetworkArrayOutput{})
	pulumi.RegisterOutputType(IploadbalancingVrackNetworkMapOutput{})
}
