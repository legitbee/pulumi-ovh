// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VrackIp struct {
	pulumi.CustomResourceState

	// Your IP block.
	Block pulumi.StringOutput `pulumi:"block"`
	// Your gateway
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Your IP block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVrackIp registers a new resource with the given unique name, arguments, and options.
func NewVrackIp(ctx *pulumi.Context,
	name string, args *VrackIpArgs, opts ...pulumi.ResourceOption) (*VrackIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VrackIp
	err := ctx.RegisterResource("ovh:index/vrackIp:VrackIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackIp gets an existing VrackIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackIpState, opts ...pulumi.ResourceOption) (*VrackIp, error) {
	var resource VrackIp
	err := ctx.ReadResource("ovh:index/vrackIp:VrackIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackIp resources.
type vrackIpState struct {
	// Your IP block.
	Block *string `pulumi:"block"`
	// Your gateway
	Gateway *string `pulumi:"gateway"`
	// Your IP block
	Ip *string `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone *string `pulumi:"zone"`
}

type VrackIpState struct {
	// Your IP block.
	Block pulumi.StringPtrInput
	// Your gateway
	Gateway pulumi.StringPtrInput
	// Your IP block
	Ip pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// Where you want your block announced on the network
	Zone pulumi.StringPtrInput
}

func (VrackIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpState)(nil)).Elem()
}

type vrackIpArgs struct {
	// Your IP block.
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackIp resource.
type VrackIpArgs struct {
	// Your IP block.
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VrackIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpArgs)(nil)).Elem()
}

type VrackIpInput interface {
	pulumi.Input

	ToVrackIpOutput() VrackIpOutput
	ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput
}

func (*VrackIp) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackIp)(nil))
}

func (i *VrackIp) ToVrackIpOutput() VrackIpOutput {
	return i.ToVrackIpOutputWithContext(context.Background())
}

func (i *VrackIp) ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpOutput)
}

func (i *VrackIp) ToVrackIpPtrOutput() VrackIpPtrOutput {
	return i.ToVrackIpPtrOutputWithContext(context.Background())
}

func (i *VrackIp) ToVrackIpPtrOutputWithContext(ctx context.Context) VrackIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpPtrOutput)
}

type VrackIpPtrInput interface {
	pulumi.Input

	ToVrackIpPtrOutput() VrackIpPtrOutput
	ToVrackIpPtrOutputWithContext(ctx context.Context) VrackIpPtrOutput
}

type vrackIpPtrType VrackIpArgs

func (*vrackIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIp)(nil))
}

func (i *vrackIpPtrType) ToVrackIpPtrOutput() VrackIpPtrOutput {
	return i.ToVrackIpPtrOutputWithContext(context.Background())
}

func (i *vrackIpPtrType) ToVrackIpPtrOutputWithContext(ctx context.Context) VrackIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpPtrOutput)
}

// VrackIpArrayInput is an input type that accepts VrackIpArray and VrackIpArrayOutput values.
// You can construct a concrete instance of `VrackIpArrayInput` via:
//
//          VrackIpArray{ VrackIpArgs{...} }
type VrackIpArrayInput interface {
	pulumi.Input

	ToVrackIpArrayOutput() VrackIpArrayOutput
	ToVrackIpArrayOutputWithContext(context.Context) VrackIpArrayOutput
}

type VrackIpArray []VrackIpInput

func (VrackIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackIp)(nil)).Elem()
}

func (i VrackIpArray) ToVrackIpArrayOutput() VrackIpArrayOutput {
	return i.ToVrackIpArrayOutputWithContext(context.Background())
}

func (i VrackIpArray) ToVrackIpArrayOutputWithContext(ctx context.Context) VrackIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpArrayOutput)
}

// VrackIpMapInput is an input type that accepts VrackIpMap and VrackIpMapOutput values.
// You can construct a concrete instance of `VrackIpMapInput` via:
//
//          VrackIpMap{ "key": VrackIpArgs{...} }
type VrackIpMapInput interface {
	pulumi.Input

	ToVrackIpMapOutput() VrackIpMapOutput
	ToVrackIpMapOutputWithContext(context.Context) VrackIpMapOutput
}

type VrackIpMap map[string]VrackIpInput

func (VrackIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackIp)(nil)).Elem()
}

func (i VrackIpMap) ToVrackIpMapOutput() VrackIpMapOutput {
	return i.ToVrackIpMapOutputWithContext(context.Background())
}

func (i VrackIpMap) ToVrackIpMapOutputWithContext(ctx context.Context) VrackIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpMapOutput)
}

type VrackIpOutput struct{ *pulumi.OutputState }

func (VrackIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrackIp)(nil))
}

func (o VrackIpOutput) ToVrackIpOutput() VrackIpOutput {
	return o
}

func (o VrackIpOutput) ToVrackIpOutputWithContext(ctx context.Context) VrackIpOutput {
	return o
}

func (o VrackIpOutput) ToVrackIpPtrOutput() VrackIpPtrOutput {
	return o.ToVrackIpPtrOutputWithContext(context.Background())
}

func (o VrackIpOutput) ToVrackIpPtrOutputWithContext(ctx context.Context) VrackIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VrackIp) *VrackIp {
		return &v
	}).(VrackIpPtrOutput)
}

type VrackIpPtrOutput struct{ *pulumi.OutputState }

func (VrackIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIp)(nil))
}

func (o VrackIpPtrOutput) ToVrackIpPtrOutput() VrackIpPtrOutput {
	return o
}

func (o VrackIpPtrOutput) ToVrackIpPtrOutputWithContext(ctx context.Context) VrackIpPtrOutput {
	return o
}

func (o VrackIpPtrOutput) Elem() VrackIpOutput {
	return o.ApplyT(func(v *VrackIp) VrackIp {
		if v != nil {
			return *v
		}
		var ret VrackIp
		return ret
	}).(VrackIpOutput)
}

type VrackIpArrayOutput struct{ *pulumi.OutputState }

func (VrackIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrackIp)(nil))
}

func (o VrackIpArrayOutput) ToVrackIpArrayOutput() VrackIpArrayOutput {
	return o
}

func (o VrackIpArrayOutput) ToVrackIpArrayOutputWithContext(ctx context.Context) VrackIpArrayOutput {
	return o
}

func (o VrackIpArrayOutput) Index(i pulumi.IntInput) VrackIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrackIp {
		return vs[0].([]VrackIp)[vs[1].(int)]
	}).(VrackIpOutput)
}

type VrackIpMapOutput struct{ *pulumi.OutputState }

func (VrackIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VrackIp)(nil))
}

func (o VrackIpMapOutput) ToVrackIpMapOutput() VrackIpMapOutput {
	return o
}

func (o VrackIpMapOutput) ToVrackIpMapOutputWithContext(ctx context.Context) VrackIpMapOutput {
	return o
}

func (o VrackIpMapOutput) MapIndex(k pulumi.StringInput) VrackIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VrackIp {
		return vs[0].(map[string]VrackIp)[vs[1].(string)]
	}).(VrackIpOutput)
}

func init() {
	pulumi.RegisterOutputType(VrackIpOutput{})
	pulumi.RegisterOutputType(VrackIpPtrOutput{})
	pulumi.RegisterOutputType(VrackIpArrayOutput{})
	pulumi.RegisterOutputType(VrackIpMapOutput{})
}
