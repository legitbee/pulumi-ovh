// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IploadbalancingTcpFarmServer struct {
	pulumi.CustomResourceState

	Address              pulumi.StringOutput    `pulumi:"address"`
	Backup               pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain                pulumi.StringPtrOutput `pulumi:"chain"`
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	FarmId               pulumi.IntOutput       `pulumi:"farmId"`
	Port                 pulumi.IntPtrOutput    `pulumi:"port"`
	Probe                pulumi.BoolPtrOutput   `pulumi:"probe"`
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	ServiceName          pulumi.StringOutput    `pulumi:"serviceName"`
	Ssl                  pulumi.BoolPtrOutput   `pulumi:"ssl"`
	Status               pulumi.StringOutput    `pulumi:"status"`
	Weight               pulumi.IntPtrOutput    `pulumi:"weight"`
}

// NewIploadbalancingTcpFarmServer registers a new resource with the given unique name, arguments, and options.
func NewIploadbalancingTcpFarmServer(ctx *pulumi.Context,
	name string, args *IploadbalancingTcpFarmServerArgs, opts ...pulumi.ResourceOption) (*IploadbalancingTcpFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource IploadbalancingTcpFarmServer
	err := ctx.RegisterResource("ovh:index/iploadbalancingTcpFarmServer:IploadbalancingTcpFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIploadbalancingTcpFarmServer gets an existing IploadbalancingTcpFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIploadbalancingTcpFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IploadbalancingTcpFarmServerState, opts ...pulumi.ResourceOption) (*IploadbalancingTcpFarmServer, error) {
	var resource IploadbalancingTcpFarmServer
	err := ctx.ReadResource("ovh:index/iploadbalancingTcpFarmServer:IploadbalancingTcpFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IploadbalancingTcpFarmServer resources.
type iploadbalancingTcpFarmServerState struct {
	Address              *string `pulumi:"address"`
	Backup               *bool   `pulumi:"backup"`
	Chain                *string `pulumi:"chain"`
	DisplayName          *string `pulumi:"displayName"`
	FarmId               *int    `pulumi:"farmId"`
	Port                 *int    `pulumi:"port"`
	Probe                *bool   `pulumi:"probe"`
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	ServiceName          *string `pulumi:"serviceName"`
	Ssl                  *bool   `pulumi:"ssl"`
	Status               *string `pulumi:"status"`
	Weight               *int    `pulumi:"weight"`
}

type IploadbalancingTcpFarmServerState struct {
	Address              pulumi.StringPtrInput
	Backup               pulumi.BoolPtrInput
	Chain                pulumi.StringPtrInput
	DisplayName          pulumi.StringPtrInput
	FarmId               pulumi.IntPtrInput
	Port                 pulumi.IntPtrInput
	Probe                pulumi.BoolPtrInput
	ProxyProtocolVersion pulumi.StringPtrInput
	ServiceName          pulumi.StringPtrInput
	Ssl                  pulumi.BoolPtrInput
	Status               pulumi.StringPtrInput
	Weight               pulumi.IntPtrInput
}

func (IploadbalancingTcpFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpFarmServerState)(nil)).Elem()
}

type iploadbalancingTcpFarmServerArgs struct {
	Address              string  `pulumi:"address"`
	Backup               *bool   `pulumi:"backup"`
	Chain                *string `pulumi:"chain"`
	DisplayName          *string `pulumi:"displayName"`
	FarmId               int     `pulumi:"farmId"`
	Port                 *int    `pulumi:"port"`
	Probe                *bool   `pulumi:"probe"`
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	ServiceName          string  `pulumi:"serviceName"`
	Ssl                  *bool   `pulumi:"ssl"`
	Status               string  `pulumi:"status"`
	Weight               *int    `pulumi:"weight"`
}

// The set of arguments for constructing a IploadbalancingTcpFarmServer resource.
type IploadbalancingTcpFarmServerArgs struct {
	Address              pulumi.StringInput
	Backup               pulumi.BoolPtrInput
	Chain                pulumi.StringPtrInput
	DisplayName          pulumi.StringPtrInput
	FarmId               pulumi.IntInput
	Port                 pulumi.IntPtrInput
	Probe                pulumi.BoolPtrInput
	ProxyProtocolVersion pulumi.StringPtrInput
	ServiceName          pulumi.StringInput
	Ssl                  pulumi.BoolPtrInput
	Status               pulumi.StringInput
	Weight               pulumi.IntPtrInput
}

func (IploadbalancingTcpFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadbalancingTcpFarmServerArgs)(nil)).Elem()
}

type IploadbalancingTcpFarmServerInput interface {
	pulumi.Input

	ToIploadbalancingTcpFarmServerOutput() IploadbalancingTcpFarmServerOutput
	ToIploadbalancingTcpFarmServerOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerOutput
}

func (*IploadbalancingTcpFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpFarmServer)(nil))
}

func (i *IploadbalancingTcpFarmServer) ToIploadbalancingTcpFarmServerOutput() IploadbalancingTcpFarmServerOutput {
	return i.ToIploadbalancingTcpFarmServerOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpFarmServer) ToIploadbalancingTcpFarmServerOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmServerOutput)
}

func (i *IploadbalancingTcpFarmServer) ToIploadbalancingTcpFarmServerPtrOutput() IploadbalancingTcpFarmServerPtrOutput {
	return i.ToIploadbalancingTcpFarmServerPtrOutputWithContext(context.Background())
}

func (i *IploadbalancingTcpFarmServer) ToIploadbalancingTcpFarmServerPtrOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmServerPtrOutput)
}

type IploadbalancingTcpFarmServerPtrInput interface {
	pulumi.Input

	ToIploadbalancingTcpFarmServerPtrOutput() IploadbalancingTcpFarmServerPtrOutput
	ToIploadbalancingTcpFarmServerPtrOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerPtrOutput
}

type iploadbalancingTcpFarmServerPtrType IploadbalancingTcpFarmServerArgs

func (*iploadbalancingTcpFarmServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpFarmServer)(nil))
}

func (i *iploadbalancingTcpFarmServerPtrType) ToIploadbalancingTcpFarmServerPtrOutput() IploadbalancingTcpFarmServerPtrOutput {
	return i.ToIploadbalancingTcpFarmServerPtrOutputWithContext(context.Background())
}

func (i *iploadbalancingTcpFarmServerPtrType) ToIploadbalancingTcpFarmServerPtrOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmServerPtrOutput)
}

// IploadbalancingTcpFarmServerArrayInput is an input type that accepts IploadbalancingTcpFarmServerArray and IploadbalancingTcpFarmServerArrayOutput values.
// You can construct a concrete instance of `IploadbalancingTcpFarmServerArrayInput` via:
//
//          IploadbalancingTcpFarmServerArray{ IploadbalancingTcpFarmServerArgs{...} }
type IploadbalancingTcpFarmServerArrayInput interface {
	pulumi.Input

	ToIploadbalancingTcpFarmServerArrayOutput() IploadbalancingTcpFarmServerArrayOutput
	ToIploadbalancingTcpFarmServerArrayOutputWithContext(context.Context) IploadbalancingTcpFarmServerArrayOutput
}

type IploadbalancingTcpFarmServerArray []IploadbalancingTcpFarmServerInput

func (IploadbalancingTcpFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IploadbalancingTcpFarmServer)(nil)).Elem()
}

func (i IploadbalancingTcpFarmServerArray) ToIploadbalancingTcpFarmServerArrayOutput() IploadbalancingTcpFarmServerArrayOutput {
	return i.ToIploadbalancingTcpFarmServerArrayOutputWithContext(context.Background())
}

func (i IploadbalancingTcpFarmServerArray) ToIploadbalancingTcpFarmServerArrayOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmServerArrayOutput)
}

// IploadbalancingTcpFarmServerMapInput is an input type that accepts IploadbalancingTcpFarmServerMap and IploadbalancingTcpFarmServerMapOutput values.
// You can construct a concrete instance of `IploadbalancingTcpFarmServerMapInput` via:
//
//          IploadbalancingTcpFarmServerMap{ "key": IploadbalancingTcpFarmServerArgs{...} }
type IploadbalancingTcpFarmServerMapInput interface {
	pulumi.Input

	ToIploadbalancingTcpFarmServerMapOutput() IploadbalancingTcpFarmServerMapOutput
	ToIploadbalancingTcpFarmServerMapOutputWithContext(context.Context) IploadbalancingTcpFarmServerMapOutput
}

type IploadbalancingTcpFarmServerMap map[string]IploadbalancingTcpFarmServerInput

func (IploadbalancingTcpFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IploadbalancingTcpFarmServer)(nil)).Elem()
}

func (i IploadbalancingTcpFarmServerMap) ToIploadbalancingTcpFarmServerMapOutput() IploadbalancingTcpFarmServerMapOutput {
	return i.ToIploadbalancingTcpFarmServerMapOutputWithContext(context.Background())
}

func (i IploadbalancingTcpFarmServerMap) ToIploadbalancingTcpFarmServerMapOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IploadbalancingTcpFarmServerMapOutput)
}

type IploadbalancingTcpFarmServerOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IploadbalancingTcpFarmServer)(nil))
}

func (o IploadbalancingTcpFarmServerOutput) ToIploadbalancingTcpFarmServerOutput() IploadbalancingTcpFarmServerOutput {
	return o
}

func (o IploadbalancingTcpFarmServerOutput) ToIploadbalancingTcpFarmServerOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerOutput {
	return o
}

func (o IploadbalancingTcpFarmServerOutput) ToIploadbalancingTcpFarmServerPtrOutput() IploadbalancingTcpFarmServerPtrOutput {
	return o.ToIploadbalancingTcpFarmServerPtrOutputWithContext(context.Background())
}

func (o IploadbalancingTcpFarmServerOutput) ToIploadbalancingTcpFarmServerPtrOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IploadbalancingTcpFarmServer) *IploadbalancingTcpFarmServer {
		return &v
	}).(IploadbalancingTcpFarmServerPtrOutput)
}

type IploadbalancingTcpFarmServerPtrOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpFarmServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IploadbalancingTcpFarmServer)(nil))
}

func (o IploadbalancingTcpFarmServerPtrOutput) ToIploadbalancingTcpFarmServerPtrOutput() IploadbalancingTcpFarmServerPtrOutput {
	return o
}

func (o IploadbalancingTcpFarmServerPtrOutput) ToIploadbalancingTcpFarmServerPtrOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerPtrOutput {
	return o
}

func (o IploadbalancingTcpFarmServerPtrOutput) Elem() IploadbalancingTcpFarmServerOutput {
	return o.ApplyT(func(v *IploadbalancingTcpFarmServer) IploadbalancingTcpFarmServer {
		if v != nil {
			return *v
		}
		var ret IploadbalancingTcpFarmServer
		return ret
	}).(IploadbalancingTcpFarmServerOutput)
}

type IploadbalancingTcpFarmServerArrayOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IploadbalancingTcpFarmServer)(nil))
}

func (o IploadbalancingTcpFarmServerArrayOutput) ToIploadbalancingTcpFarmServerArrayOutput() IploadbalancingTcpFarmServerArrayOutput {
	return o
}

func (o IploadbalancingTcpFarmServerArrayOutput) ToIploadbalancingTcpFarmServerArrayOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerArrayOutput {
	return o
}

func (o IploadbalancingTcpFarmServerArrayOutput) Index(i pulumi.IntInput) IploadbalancingTcpFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IploadbalancingTcpFarmServer {
		return vs[0].([]IploadbalancingTcpFarmServer)[vs[1].(int)]
	}).(IploadbalancingTcpFarmServerOutput)
}

type IploadbalancingTcpFarmServerMapOutput struct{ *pulumi.OutputState }

func (IploadbalancingTcpFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IploadbalancingTcpFarmServer)(nil))
}

func (o IploadbalancingTcpFarmServerMapOutput) ToIploadbalancingTcpFarmServerMapOutput() IploadbalancingTcpFarmServerMapOutput {
	return o
}

func (o IploadbalancingTcpFarmServerMapOutput) ToIploadbalancingTcpFarmServerMapOutputWithContext(ctx context.Context) IploadbalancingTcpFarmServerMapOutput {
	return o
}

func (o IploadbalancingTcpFarmServerMapOutput) MapIndex(k pulumi.StringInput) IploadbalancingTcpFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IploadbalancingTcpFarmServer {
		return vs[0].(map[string]IploadbalancingTcpFarmServer)[vs[1].(string)]
	}).(IploadbalancingTcpFarmServerOutput)
}

func init() {
	pulumi.RegisterOutputType(IploadbalancingTcpFarmServerOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpFarmServerPtrOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpFarmServerArrayOutput{})
	pulumi.RegisterOutputType(IploadbalancingTcpFarmServerMapOutput{})
}
