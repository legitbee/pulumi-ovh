// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DedicatedServerRebootTask struct {
	pulumi.CustomResourceState

	// Details of this task
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Completion date
	DoneDate pulumi.StringOutput `pulumi:"doneDate"`
	// Function name
	Function pulumi.StringOutput `pulumi:"function"`
	// Change this value to recreate a reboot task.
	Keepers pulumi.StringArrayOutput `pulumi:"keepers"`
	// Last update
	LastUpdate pulumi.StringOutput `pulumi:"lastUpdate"`
	// The internal name of your dedicated server.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Task Creation date
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Task status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDedicatedServerRebootTask registers a new resource with the given unique name, arguments, and options.
func NewDedicatedServerRebootTask(ctx *pulumi.Context,
	name string, args *DedicatedServerRebootTaskArgs, opts ...pulumi.ResourceOption) (*DedicatedServerRebootTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keepers == nil {
		return nil, errors.New("invalid value for required argument 'Keepers'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource DedicatedServerRebootTask
	err := ctx.RegisterResource("ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedServerRebootTask gets an existing DedicatedServerRebootTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedServerRebootTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedServerRebootTaskState, opts ...pulumi.ResourceOption) (*DedicatedServerRebootTask, error) {
	var resource DedicatedServerRebootTask
	err := ctx.ReadResource("ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedServerRebootTask resources.
type dedicatedServerRebootTaskState struct {
	// Details of this task
	Comment *string `pulumi:"comment"`
	// Completion date
	DoneDate *string `pulumi:"doneDate"`
	// Function name
	Function *string `pulumi:"function"`
	// Change this value to recreate a reboot task.
	Keepers []string `pulumi:"keepers"`
	// Last update
	LastUpdate *string `pulumi:"lastUpdate"`
	// The internal name of your dedicated server.
	ServiceName *string `pulumi:"serviceName"`
	// Task Creation date
	StartDate *string `pulumi:"startDate"`
	// Task status
	Status *string `pulumi:"status"`
}

type DedicatedServerRebootTaskState struct {
	// Details of this task
	Comment pulumi.StringPtrInput
	// Completion date
	DoneDate pulumi.StringPtrInput
	// Function name
	Function pulumi.StringPtrInput
	// Change this value to recreate a reboot task.
	Keepers pulumi.StringArrayInput
	// Last update
	LastUpdate pulumi.StringPtrInput
	// The internal name of your dedicated server.
	ServiceName pulumi.StringPtrInput
	// Task Creation date
	StartDate pulumi.StringPtrInput
	// Task status
	Status pulumi.StringPtrInput
}

func (DedicatedServerRebootTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerRebootTaskState)(nil)).Elem()
}

type dedicatedServerRebootTaskArgs struct {
	// Change this value to recreate a reboot task.
	Keepers []string `pulumi:"keepers"`
	// The internal name of your dedicated server.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a DedicatedServerRebootTask resource.
type DedicatedServerRebootTaskArgs struct {
	// Change this value to recreate a reboot task.
	Keepers pulumi.StringArrayInput
	// The internal name of your dedicated server.
	ServiceName pulumi.StringInput
}

func (DedicatedServerRebootTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedServerRebootTaskArgs)(nil)).Elem()
}

type DedicatedServerRebootTaskInput interface {
	pulumi.Input

	ToDedicatedServerRebootTaskOutput() DedicatedServerRebootTaskOutput
	ToDedicatedServerRebootTaskOutputWithContext(ctx context.Context) DedicatedServerRebootTaskOutput
}

func (*DedicatedServerRebootTask) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedServerRebootTask)(nil))
}

func (i *DedicatedServerRebootTask) ToDedicatedServerRebootTaskOutput() DedicatedServerRebootTaskOutput {
	return i.ToDedicatedServerRebootTaskOutputWithContext(context.Background())
}

func (i *DedicatedServerRebootTask) ToDedicatedServerRebootTaskOutputWithContext(ctx context.Context) DedicatedServerRebootTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerRebootTaskOutput)
}

func (i *DedicatedServerRebootTask) ToDedicatedServerRebootTaskPtrOutput() DedicatedServerRebootTaskPtrOutput {
	return i.ToDedicatedServerRebootTaskPtrOutputWithContext(context.Background())
}

func (i *DedicatedServerRebootTask) ToDedicatedServerRebootTaskPtrOutputWithContext(ctx context.Context) DedicatedServerRebootTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerRebootTaskPtrOutput)
}

type DedicatedServerRebootTaskPtrInput interface {
	pulumi.Input

	ToDedicatedServerRebootTaskPtrOutput() DedicatedServerRebootTaskPtrOutput
	ToDedicatedServerRebootTaskPtrOutputWithContext(ctx context.Context) DedicatedServerRebootTaskPtrOutput
}

type dedicatedServerRebootTaskPtrType DedicatedServerRebootTaskArgs

func (*dedicatedServerRebootTaskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerRebootTask)(nil))
}

func (i *dedicatedServerRebootTaskPtrType) ToDedicatedServerRebootTaskPtrOutput() DedicatedServerRebootTaskPtrOutput {
	return i.ToDedicatedServerRebootTaskPtrOutputWithContext(context.Background())
}

func (i *dedicatedServerRebootTaskPtrType) ToDedicatedServerRebootTaskPtrOutputWithContext(ctx context.Context) DedicatedServerRebootTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerRebootTaskPtrOutput)
}

// DedicatedServerRebootTaskArrayInput is an input type that accepts DedicatedServerRebootTaskArray and DedicatedServerRebootTaskArrayOutput values.
// You can construct a concrete instance of `DedicatedServerRebootTaskArrayInput` via:
//
//          DedicatedServerRebootTaskArray{ DedicatedServerRebootTaskArgs{...} }
type DedicatedServerRebootTaskArrayInput interface {
	pulumi.Input

	ToDedicatedServerRebootTaskArrayOutput() DedicatedServerRebootTaskArrayOutput
	ToDedicatedServerRebootTaskArrayOutputWithContext(context.Context) DedicatedServerRebootTaskArrayOutput
}

type DedicatedServerRebootTaskArray []DedicatedServerRebootTaskInput

func (DedicatedServerRebootTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedServerRebootTask)(nil)).Elem()
}

func (i DedicatedServerRebootTaskArray) ToDedicatedServerRebootTaskArrayOutput() DedicatedServerRebootTaskArrayOutput {
	return i.ToDedicatedServerRebootTaskArrayOutputWithContext(context.Background())
}

func (i DedicatedServerRebootTaskArray) ToDedicatedServerRebootTaskArrayOutputWithContext(ctx context.Context) DedicatedServerRebootTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerRebootTaskArrayOutput)
}

// DedicatedServerRebootTaskMapInput is an input type that accepts DedicatedServerRebootTaskMap and DedicatedServerRebootTaskMapOutput values.
// You can construct a concrete instance of `DedicatedServerRebootTaskMapInput` via:
//
//          DedicatedServerRebootTaskMap{ "key": DedicatedServerRebootTaskArgs{...} }
type DedicatedServerRebootTaskMapInput interface {
	pulumi.Input

	ToDedicatedServerRebootTaskMapOutput() DedicatedServerRebootTaskMapOutput
	ToDedicatedServerRebootTaskMapOutputWithContext(context.Context) DedicatedServerRebootTaskMapOutput
}

type DedicatedServerRebootTaskMap map[string]DedicatedServerRebootTaskInput

func (DedicatedServerRebootTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedServerRebootTask)(nil)).Elem()
}

func (i DedicatedServerRebootTaskMap) ToDedicatedServerRebootTaskMapOutput() DedicatedServerRebootTaskMapOutput {
	return i.ToDedicatedServerRebootTaskMapOutputWithContext(context.Background())
}

func (i DedicatedServerRebootTaskMap) ToDedicatedServerRebootTaskMapOutputWithContext(ctx context.Context) DedicatedServerRebootTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedServerRebootTaskMapOutput)
}

type DedicatedServerRebootTaskOutput struct{ *pulumi.OutputState }

func (DedicatedServerRebootTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedServerRebootTask)(nil))
}

func (o DedicatedServerRebootTaskOutput) ToDedicatedServerRebootTaskOutput() DedicatedServerRebootTaskOutput {
	return o
}

func (o DedicatedServerRebootTaskOutput) ToDedicatedServerRebootTaskOutputWithContext(ctx context.Context) DedicatedServerRebootTaskOutput {
	return o
}

func (o DedicatedServerRebootTaskOutput) ToDedicatedServerRebootTaskPtrOutput() DedicatedServerRebootTaskPtrOutput {
	return o.ToDedicatedServerRebootTaskPtrOutputWithContext(context.Background())
}

func (o DedicatedServerRebootTaskOutput) ToDedicatedServerRebootTaskPtrOutputWithContext(ctx context.Context) DedicatedServerRebootTaskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DedicatedServerRebootTask) *DedicatedServerRebootTask {
		return &v
	}).(DedicatedServerRebootTaskPtrOutput)
}

type DedicatedServerRebootTaskPtrOutput struct{ *pulumi.OutputState }

func (DedicatedServerRebootTaskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedServerRebootTask)(nil))
}

func (o DedicatedServerRebootTaskPtrOutput) ToDedicatedServerRebootTaskPtrOutput() DedicatedServerRebootTaskPtrOutput {
	return o
}

func (o DedicatedServerRebootTaskPtrOutput) ToDedicatedServerRebootTaskPtrOutputWithContext(ctx context.Context) DedicatedServerRebootTaskPtrOutput {
	return o
}

func (o DedicatedServerRebootTaskPtrOutput) Elem() DedicatedServerRebootTaskOutput {
	return o.ApplyT(func(v *DedicatedServerRebootTask) DedicatedServerRebootTask {
		if v != nil {
			return *v
		}
		var ret DedicatedServerRebootTask
		return ret
	}).(DedicatedServerRebootTaskOutput)
}

type DedicatedServerRebootTaskArrayOutput struct{ *pulumi.OutputState }

func (DedicatedServerRebootTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedServerRebootTask)(nil))
}

func (o DedicatedServerRebootTaskArrayOutput) ToDedicatedServerRebootTaskArrayOutput() DedicatedServerRebootTaskArrayOutput {
	return o
}

func (o DedicatedServerRebootTaskArrayOutput) ToDedicatedServerRebootTaskArrayOutputWithContext(ctx context.Context) DedicatedServerRebootTaskArrayOutput {
	return o
}

func (o DedicatedServerRebootTaskArrayOutput) Index(i pulumi.IntInput) DedicatedServerRebootTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedServerRebootTask {
		return vs[0].([]DedicatedServerRebootTask)[vs[1].(int)]
	}).(DedicatedServerRebootTaskOutput)
}

type DedicatedServerRebootTaskMapOutput struct{ *pulumi.OutputState }

func (DedicatedServerRebootTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DedicatedServerRebootTask)(nil))
}

func (o DedicatedServerRebootTaskMapOutput) ToDedicatedServerRebootTaskMapOutput() DedicatedServerRebootTaskMapOutput {
	return o
}

func (o DedicatedServerRebootTaskMapOutput) ToDedicatedServerRebootTaskMapOutputWithContext(ctx context.Context) DedicatedServerRebootTaskMapOutput {
	return o
}

func (o DedicatedServerRebootTaskMapOutput) MapIndex(k pulumi.StringInput) DedicatedServerRebootTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DedicatedServerRebootTask {
		return vs[0].(map[string]DedicatedServerRebootTask)[vs[1].(string)]
	}).(DedicatedServerRebootTaskOutput)
}

func init() {
	pulumi.RegisterOutputType(DedicatedServerRebootTaskOutput{})
	pulumi.RegisterOutputType(DedicatedServerRebootTaskPtrOutput{})
	pulumi.RegisterOutputType(DedicatedServerRebootTaskArrayOutput{})
	pulumi.RegisterOutputType(DedicatedServerRebootTaskMapOutput{})
}
