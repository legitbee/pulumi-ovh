// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "ovh:index/cloudProject:CloudProject":
		r = &CloudProject{}
	case "ovh:index/cloudProjectContainerregistry:CloudProjectContainerregistry":
		r = &CloudProjectContainerregistry{}
	case "ovh:index/cloudProjectContainerregistryUser:CloudProjectContainerregistryUser":
		r = &CloudProjectContainerregistryUser{}
	case "ovh:index/cloudProjectKube:CloudProjectKube":
		r = &CloudProjectKube{}
	case "ovh:index/cloudProjectKubeNodepool:CloudProjectKubeNodepool":
		r = &CloudProjectKubeNodepool{}
	case "ovh:index/cloudProjectNetworkPrivate:CloudProjectNetworkPrivate":
		r = &CloudProjectNetworkPrivate{}
	case "ovh:index/cloudProjectNetworkPrivateSubnet:CloudProjectNetworkPrivateSubnet":
		r = &CloudProjectNetworkPrivateSubnet{}
	case "ovh:index/cloudProjectUser:CloudProjectUser":
		r = &CloudProjectUser{}
	case "ovh:index/dbaasLogsInput:DbaasLogsInput":
		r = &DbaasLogsInput{}
	case "ovh:index/dbaasLogsOutputGraylogStream:DbaasLogsOutputGraylogStream":
		r = &DbaasLogsOutputGraylogStream{}
	case "ovh:index/dedicatedCephAcl:DedicatedCephAcl":
		r = &DedicatedCephAcl{}
	case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
		r = &DedicatedServerInstallTask{}
	case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
		r = &DedicatedServerRebootTask{}
	case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
		r = &DedicatedServerUpdate{}
	case "ovh:index/domainZone:DomainZone":
		r = &DomainZone{}
	case "ovh:index/domainZoneRecord:DomainZoneRecord":
		r = &DomainZoneRecord{}
	case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
		r = &DomainZoneRedirection{}
	case "ovh:index/ipReverseResource:IpReverseResource":
		r = &IpReverseResource{}
	case "ovh:index/ipService:IpService":
		r = &IpService{}
	case "ovh:index/iploadbalancing:Iploadbalancing":
		r = &Iploadbalancing{}
	case "ovh:index/iploadbalancingHttpFarm:IploadbalancingHttpFarm":
		r = &IploadbalancingHttpFarm{}
	case "ovh:index/iploadbalancingHttpFarmServer:IploadbalancingHttpFarmServer":
		r = &IploadbalancingHttpFarmServer{}
	case "ovh:index/iploadbalancingHttpFrontend:IploadbalancingHttpFrontend":
		r = &IploadbalancingHttpFrontend{}
	case "ovh:index/iploadbalancingHttpRoute:IploadbalancingHttpRoute":
		r = &IploadbalancingHttpRoute{}
	case "ovh:index/iploadbalancingHttpRouteRule:IploadbalancingHttpRouteRule":
		r = &IploadbalancingHttpRouteRule{}
	case "ovh:index/iploadbalancingRefresh:IploadbalancingRefresh":
		r = &IploadbalancingRefresh{}
	case "ovh:index/iploadbalancingTcpFarm:IploadbalancingTcpFarm":
		r = &IploadbalancingTcpFarm{}
	case "ovh:index/iploadbalancingTcpFarmServer:IploadbalancingTcpFarmServer":
		r = &IploadbalancingTcpFarmServer{}
	case "ovh:index/iploadbalancingTcpFrontend:IploadbalancingTcpFrontend":
		r = &IploadbalancingTcpFrontend{}
	case "ovh:index/iploadbalancingTcpRoute:IploadbalancingTcpRoute":
		r = &IploadbalancingTcpRoute{}
	case "ovh:index/iploadbalancingTcpRouteRule:IploadbalancingTcpRouteRule":
		r = &IploadbalancingTcpRouteRule{}
	case "ovh:index/iploadbalancingVrackNetwork:IploadbalancingVrackNetwork":
		r = &IploadbalancingVrackNetwork{}
	case "ovh:index/meIdentityUser:MeIdentityUser":
		r = &MeIdentityUser{}
	case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
		r = &MeInstallationTemplate{}
	case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
		r = &MeInstallationTemplatePartitionScheme{}
	case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRaid:MeInstallationTemplatePartitionSchemeHardwareRaid":
		r = &MeInstallationTemplatePartitionSchemeHardwareRaid{}
	case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
		r = &MeInstallationTemplatePartitionSchemePartition{}
	case "ovh:index/meIpxeScript:MeIpxeScript":
		r = &MeIpxeScript{}
	case "ovh:index/meSshKey:MeSshKey":
		r = &MeSshKey{}
	case "ovh:index/vrack:Vrack":
		r = &Vrack{}
	case "ovh:index/vrackCloudproject:VrackCloudproject":
		r = &VrackCloudproject{}
	case "ovh:index/vrackDedicatedServer:VrackDedicatedServer":
		r = &VrackDedicatedServer{}
	case "ovh:index/vrackDedicatedServerInterface:VrackDedicatedServerInterface":
		r = &VrackDedicatedServerInterface{}
	case "ovh:index/vrackIp:VrackIp":
		r = &VrackIp{}
	case "ovh:index/vrackIploadbalancing:VrackIploadbalancing":
		r = &VrackIploadbalancing{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:ovh" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectContainerregistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectContainerregistryUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectKube",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectKubeNodepool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectNetworkPrivate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectNetworkPrivateSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dbaasLogsInput",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dbaasLogsOutputGraylogStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedCephAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerInstallTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerRebootTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerUpdate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRedirection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/ipReverseResource",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/ipService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancing",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingHttpFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingHttpFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingHttpFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingHttpRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingHttpRouteRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingRefresh",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingTcpFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingTcpFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingTcpFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingTcpRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingTcpRouteRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iploadbalancingVrackNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meIdentityUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionScheme",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemeHardwareRaid",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemePartition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meIpxeScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meSshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrackCloudproject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrackDedicatedServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrackDedicatedServerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrackIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vrackIploadbalancing",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"ovh",
		&pkg{version},
	)
}
