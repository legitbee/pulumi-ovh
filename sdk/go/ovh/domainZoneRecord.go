// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainZoneRecord struct {
	pulumi.CustomResourceState

	Fieldtype pulumi.StringOutput    `pulumi:"fieldtype"`
	Subdomain pulumi.StringPtrOutput `pulumi:"subdomain"`
	Target    pulumi.StringOutput    `pulumi:"target"`
	Ttl       pulumi.IntPtrOutput    `pulumi:"ttl"`
	Zone      pulumi.StringOutput    `pulumi:"zone"`
}

// NewDomainZoneRecord registers a new resource with the given unique name, arguments, and options.
func NewDomainZoneRecord(ctx *pulumi.Context,
	name string, args *DomainZoneRecordArgs, opts ...pulumi.ResourceOption) (*DomainZoneRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fieldtype == nil {
		return nil, errors.New("invalid value for required argument 'Fieldtype'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource DomainZoneRecord
	err := ctx.RegisterResource("ovh:index/domainZoneRecord:DomainZoneRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainZoneRecord gets an existing DomainZoneRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainZoneRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainZoneRecordState, opts ...pulumi.ResourceOption) (*DomainZoneRecord, error) {
	var resource DomainZoneRecord
	err := ctx.ReadResource("ovh:index/domainZoneRecord:DomainZoneRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainZoneRecord resources.
type domainZoneRecordState struct {
	Fieldtype *string `pulumi:"fieldtype"`
	Subdomain *string `pulumi:"subdomain"`
	Target    *string `pulumi:"target"`
	Ttl       *int    `pulumi:"ttl"`
	Zone      *string `pulumi:"zone"`
}

type DomainZoneRecordState struct {
	Fieldtype pulumi.StringPtrInput
	Subdomain pulumi.StringPtrInput
	Target    pulumi.StringPtrInput
	Ttl       pulumi.IntPtrInput
	Zone      pulumi.StringPtrInput
}

func (DomainZoneRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneRecordState)(nil)).Elem()
}

type domainZoneRecordArgs struct {
	Fieldtype string  `pulumi:"fieldtype"`
	Subdomain *string `pulumi:"subdomain"`
	Target    string  `pulumi:"target"`
	Ttl       *int    `pulumi:"ttl"`
	Zone      string  `pulumi:"zone"`
}

// The set of arguments for constructing a DomainZoneRecord resource.
type DomainZoneRecordArgs struct {
	Fieldtype pulumi.StringInput
	Subdomain pulumi.StringPtrInput
	Target    pulumi.StringInput
	Ttl       pulumi.IntPtrInput
	Zone      pulumi.StringInput
}

func (DomainZoneRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainZoneRecordArgs)(nil)).Elem()
}

type DomainZoneRecordInput interface {
	pulumi.Input

	ToDomainZoneRecordOutput() DomainZoneRecordOutput
	ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput
}

func (*DomainZoneRecord) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainZoneRecord)(nil))
}

func (i *DomainZoneRecord) ToDomainZoneRecordOutput() DomainZoneRecordOutput {
	return i.ToDomainZoneRecordOutputWithContext(context.Background())
}

func (i *DomainZoneRecord) ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordOutput)
}

func (i *DomainZoneRecord) ToDomainZoneRecordPtrOutput() DomainZoneRecordPtrOutput {
	return i.ToDomainZoneRecordPtrOutputWithContext(context.Background())
}

func (i *DomainZoneRecord) ToDomainZoneRecordPtrOutputWithContext(ctx context.Context) DomainZoneRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordPtrOutput)
}

type DomainZoneRecordPtrInput interface {
	pulumi.Input

	ToDomainZoneRecordPtrOutput() DomainZoneRecordPtrOutput
	ToDomainZoneRecordPtrOutputWithContext(ctx context.Context) DomainZoneRecordPtrOutput
}

type domainZoneRecordPtrType DomainZoneRecordArgs

func (*domainZoneRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneRecord)(nil))
}

func (i *domainZoneRecordPtrType) ToDomainZoneRecordPtrOutput() DomainZoneRecordPtrOutput {
	return i.ToDomainZoneRecordPtrOutputWithContext(context.Background())
}

func (i *domainZoneRecordPtrType) ToDomainZoneRecordPtrOutputWithContext(ctx context.Context) DomainZoneRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordPtrOutput)
}

// DomainZoneRecordArrayInput is an input type that accepts DomainZoneRecordArray and DomainZoneRecordArrayOutput values.
// You can construct a concrete instance of `DomainZoneRecordArrayInput` via:
//
//          DomainZoneRecordArray{ DomainZoneRecordArgs{...} }
type DomainZoneRecordArrayInput interface {
	pulumi.Input

	ToDomainZoneRecordArrayOutput() DomainZoneRecordArrayOutput
	ToDomainZoneRecordArrayOutputWithContext(context.Context) DomainZoneRecordArrayOutput
}

type DomainZoneRecordArray []DomainZoneRecordInput

func (DomainZoneRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainZoneRecord)(nil)).Elem()
}

func (i DomainZoneRecordArray) ToDomainZoneRecordArrayOutput() DomainZoneRecordArrayOutput {
	return i.ToDomainZoneRecordArrayOutputWithContext(context.Background())
}

func (i DomainZoneRecordArray) ToDomainZoneRecordArrayOutputWithContext(ctx context.Context) DomainZoneRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordArrayOutput)
}

// DomainZoneRecordMapInput is an input type that accepts DomainZoneRecordMap and DomainZoneRecordMapOutput values.
// You can construct a concrete instance of `DomainZoneRecordMapInput` via:
//
//          DomainZoneRecordMap{ "key": DomainZoneRecordArgs{...} }
type DomainZoneRecordMapInput interface {
	pulumi.Input

	ToDomainZoneRecordMapOutput() DomainZoneRecordMapOutput
	ToDomainZoneRecordMapOutputWithContext(context.Context) DomainZoneRecordMapOutput
}

type DomainZoneRecordMap map[string]DomainZoneRecordInput

func (DomainZoneRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainZoneRecord)(nil)).Elem()
}

func (i DomainZoneRecordMap) ToDomainZoneRecordMapOutput() DomainZoneRecordMapOutput {
	return i.ToDomainZoneRecordMapOutputWithContext(context.Background())
}

func (i DomainZoneRecordMap) ToDomainZoneRecordMapOutputWithContext(ctx context.Context) DomainZoneRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainZoneRecordMapOutput)
}

type DomainZoneRecordOutput struct{ *pulumi.OutputState }

func (DomainZoneRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainZoneRecord)(nil))
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordOutput() DomainZoneRecordOutput {
	return o
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordOutputWithContext(ctx context.Context) DomainZoneRecordOutput {
	return o
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordPtrOutput() DomainZoneRecordPtrOutput {
	return o.ToDomainZoneRecordPtrOutputWithContext(context.Background())
}

func (o DomainZoneRecordOutput) ToDomainZoneRecordPtrOutputWithContext(ctx context.Context) DomainZoneRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainZoneRecord) *DomainZoneRecord {
		return &v
	}).(DomainZoneRecordPtrOutput)
}

type DomainZoneRecordPtrOutput struct{ *pulumi.OutputState }

func (DomainZoneRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainZoneRecord)(nil))
}

func (o DomainZoneRecordPtrOutput) ToDomainZoneRecordPtrOutput() DomainZoneRecordPtrOutput {
	return o
}

func (o DomainZoneRecordPtrOutput) ToDomainZoneRecordPtrOutputWithContext(ctx context.Context) DomainZoneRecordPtrOutput {
	return o
}

func (o DomainZoneRecordPtrOutput) Elem() DomainZoneRecordOutput {
	return o.ApplyT(func(v *DomainZoneRecord) DomainZoneRecord {
		if v != nil {
			return *v
		}
		var ret DomainZoneRecord
		return ret
	}).(DomainZoneRecordOutput)
}

type DomainZoneRecordArrayOutput struct{ *pulumi.OutputState }

func (DomainZoneRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainZoneRecord)(nil))
}

func (o DomainZoneRecordArrayOutput) ToDomainZoneRecordArrayOutput() DomainZoneRecordArrayOutput {
	return o
}

func (o DomainZoneRecordArrayOutput) ToDomainZoneRecordArrayOutputWithContext(ctx context.Context) DomainZoneRecordArrayOutput {
	return o
}

func (o DomainZoneRecordArrayOutput) Index(i pulumi.IntInput) DomainZoneRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainZoneRecord {
		return vs[0].([]DomainZoneRecord)[vs[1].(int)]
	}).(DomainZoneRecordOutput)
}

type DomainZoneRecordMapOutput struct{ *pulumi.OutputState }

func (DomainZoneRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DomainZoneRecord)(nil))
}

func (o DomainZoneRecordMapOutput) ToDomainZoneRecordMapOutput() DomainZoneRecordMapOutput {
	return o
}

func (o DomainZoneRecordMapOutput) ToDomainZoneRecordMapOutputWithContext(ctx context.Context) DomainZoneRecordMapOutput {
	return o
}

func (o DomainZoneRecordMapOutput) MapIndex(k pulumi.StringInput) DomainZoneRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DomainZoneRecord {
		return vs[0].(map[string]DomainZoneRecord)[vs[1].(string)]
	}).(DomainZoneRecordOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainZoneRecordOutput{})
	pulumi.RegisterOutputType(DomainZoneRecordPtrOutput{})
	pulumi.RegisterOutputType(DomainZoneRecordArrayOutput{})
	pulumi.RegisterOutputType(DomainZoneRecordMapOutput{})
}
