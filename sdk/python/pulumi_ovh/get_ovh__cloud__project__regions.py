# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOvh_Cloud_Project_RegionsResult',
    'AwaitableGetOvh_Cloud_Project_RegionsResult',
    'get_ovh__cloud__project__regions',
    'get_ovh__cloud__project__regions_output',
]

@pulumi.output_type
class GetOvh_Cloud_Project_RegionsResult:
    """
    A collection of values returned by getOvh_Cloud_Project_Regions.
    """
    def __init__(__self__, has_services_ups=None, id=None, names=None, service_name=None):
        if has_services_ups and not isinstance(has_services_ups, list):
            raise TypeError("Expected argument 'has_services_ups' to be a list")
        pulumi.set(__self__, "has_services_ups", has_services_ups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hasServicesUps")
    def has_services_ups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "has_services_ups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


class AwaitableGetOvh_Cloud_Project_RegionsResult(GetOvh_Cloud_Project_RegionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOvh_Cloud_Project_RegionsResult(
            has_services_ups=self.has_services_ups,
            id=self.id,
            names=self.names,
            service_name=self.service_name)


def get_ovh__cloud__project__regions(has_services_ups: Optional[Sequence[str]] = None,
                                     service_name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOvh_Cloud_Project_RegionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hasServicesUps'] = has_services_ups
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ovh:index/getOvh_Cloud_Project_Regions:getOvh_Cloud_Project_Regions', __args__, opts=opts, typ=GetOvh_Cloud_Project_RegionsResult).value

    return AwaitableGetOvh_Cloud_Project_RegionsResult(
        has_services_ups=__ret__.has_services_ups,
        id=__ret__.id,
        names=__ret__.names,
        service_name=__ret__.service_name)


@_utilities.lift_output_func(get_ovh__cloud__project__regions)
def get_ovh__cloud__project__regions_output(has_services_ups: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                            service_name: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOvh_Cloud_Project_RegionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
