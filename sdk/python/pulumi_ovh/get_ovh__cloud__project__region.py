# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetOvh_Cloud_Project_RegionResult',
    'AwaitableGetOvh_Cloud_Project_RegionResult',
    'get_ovh__cloud__project__region',
    'get_ovh__cloud__project__region_output',
]

@pulumi.output_type
class GetOvh_Cloud_Project_RegionResult:
    """
    A collection of values returned by getOvh_Cloud_Project_Region.
    """
    def __init__(__self__, continent_code=None, datacenter_location=None, id=None, name=None, service_name=None, services=None):
        if continent_code and not isinstance(continent_code, str):
            raise TypeError("Expected argument 'continent_code' to be a str")
        pulumi.set(__self__, "continent_code", continent_code)
        if datacenter_location and not isinstance(datacenter_location, str):
            raise TypeError("Expected argument 'datacenter_location' to be a str")
        pulumi.set(__self__, "datacenter_location", datacenter_location)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter(name="continentCode")
    def continent_code(self) -> str:
        return pulumi.get(self, "continent_code")

    @property
    @pulumi.getter(name="datacenterLocation")
    def datacenter_location(self) -> str:
        return pulumi.get(self, "datacenter_location")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetOvh_Cloud_Project_RegionServiceResult']:
        return pulumi.get(self, "services")


class AwaitableGetOvh_Cloud_Project_RegionResult(GetOvh_Cloud_Project_RegionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOvh_Cloud_Project_RegionResult(
            continent_code=self.continent_code,
            datacenter_location=self.datacenter_location,
            id=self.id,
            name=self.name,
            service_name=self.service_name,
            services=self.services)


def get_ovh__cloud__project__region(name: Optional[str] = None,
                                    service_name: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOvh_Cloud_Project_RegionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['serviceName'] = service_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ovh:index/getOvh_Cloud_Project_Region:getOvh_Cloud_Project_Region', __args__, opts=opts, typ=GetOvh_Cloud_Project_RegionResult).value

    return AwaitableGetOvh_Cloud_Project_RegionResult(
        continent_code=__ret__.continent_code,
        datacenter_location=__ret__.datacenter_location,
        id=__ret__.id,
        name=__ret__.name,
        service_name=__ret__.service_name,
        services=__ret__.services)


@_utilities.lift_output_func(get_ovh__cloud__project__region)
def get_ovh__cloud__project__region_output(name: Optional[pulumi.Input[str]] = None,
                                           service_name: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOvh_Cloud_Project_RegionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
