# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'CloudProjectContainerregistryPlan',
    'CloudProjectContainerregistryPlanFeature',
    'CloudProjectContainerregistryPlanRegistryLimit',
    'CloudProjectNetworkPrivateRegionsAttribute',
    'CloudProjectNetworkPrivateRegionsStatus',
    'CloudProjectNetworkPrivateSubnetIpPool',
    'CloudProjectOrder',
    'CloudProjectOrderDetail',
    'CloudProjectPlan',
    'CloudProjectPlanConfiguration',
    'CloudProjectPlanOption',
    'CloudProjectPlanOptionConfiguration',
    'CloudProjectUserRole',
    'DbaasLogsInputConfiguration',
    'DbaasLogsInputConfigurationFlowgger',
    'DbaasLogsInputConfigurationLogstash',
    'DedicatedServerInstallTaskDetails',
    'DomainZoneOrder',
    'DomainZoneOrderDetail',
    'DomainZonePlan',
    'DomainZonePlanConfiguration',
    'DomainZonePlanOption',
    'DomainZonePlanOptionConfiguration',
    'IpServiceOrder',
    'IpServiceOrderDetail',
    'IpServicePlan',
    'IpServicePlanConfiguration',
    'IpServicePlanOption',
    'IpServicePlanOptionConfiguration',
    'IpServiceRoutedTo',
    'IploadbalancingHttpFarmProbe',
    'IploadbalancingHttpRouteAction',
    'IploadbalancingHttpRouteRule',
    'IploadbalancingOrder',
    'IploadbalancingOrderDetail',
    'IploadbalancingOrderableZone',
    'IploadbalancingPlan',
    'IploadbalancingPlanConfiguration',
    'IploadbalancingPlanOption',
    'IploadbalancingPlanOptionConfiguration',
    'IploadbalancingTcpFarmProbe',
    'IploadbalancingTcpRouteAction',
    'IploadbalancingTcpRouteRule',
    'MeInstallationTemplateCustomization',
    'VrackOrder',
    'VrackOrderDetail',
    'VrackPlan',
    'VrackPlanConfiguration',
    'VrackPlanOption',
    'VrackPlanOptionConfiguration',
    'GetCloudProjectCapabilitiesContainerregistryFilterFeatureResult',
    'GetCloudProjectCapabilitiesContainerregistryFilterRegistryLimitResult',
    'GetCloudProjectCapabilitiesContainerregistryResultResult',
    'GetCloudProjectCapabilitiesContainerregistryResultPlanResult',
    'GetCloudProjectCapabilitiesContainerregistryResultPlanFeatureResult',
    'GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimitResult',
    'GetCloudProjectContainerregistriesResultResult',
    'GetCloudProjectContainerregistryUsersResultResult',
    'GetCloudProjectRegionServiceResult',
    'GetDedicatedServerVniResult',
    'GetIpServiceRoutedToResult',
    'GetIploadbalancingOrderableZoneResult',
    'GetMeInstallationTemplateCustomizationResult',
    'GetMeInstallationTemplatePartitionSchemeResult',
    'GetMeInstallationTemplatePartitionSchemeHardwareRaidResult',
    'GetMeInstallationTemplatePartitionSchemePartitionResult',
    'GetOrderCartProductOptionsPlanPriceResult',
    'GetOrderCartProductOptionsPlanPricePriceResult',
    'GetOrderCartProductOptionsPlanSelectedPriceResult',
    'GetOrderCartProductOptionsPlanSelectedPricePriceResult',
    'GetOrderCartProductOptionsResultResult',
    'GetOrderCartProductOptionsResultPriceResult',
    'GetOrderCartProductOptionsResultPricePriceResult',
    'GetOrderCartProductPlanPriceResult',
    'GetOrderCartProductPlanPricePriceResult',
    'GetOrderCartProductPlanSelectedPriceResult',
    'GetOrderCartProductPlanSelectedPricePriceResult',
    'GetOrderCartProductResultResult',
    'GetOrderCartProductResultPriceResult',
    'GetOrderCartProductResultPricePriceResult',
]

@pulumi.output_type
class CloudProjectContainerregistryPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "registryLimits":
            suggest = "registry_limits"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectContainerregistryPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectContainerregistryPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectContainerregistryPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 created_at: Optional[str] = None,
                 features: Optional[Sequence['outputs.CloudProjectContainerregistryPlanFeature']] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 registry_limits: Optional[Sequence['outputs.CloudProjectContainerregistryPlanRegistryLimit']] = None,
                 updated_at: Optional[str] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if registry_limits is not None:
            pulumi.set(__self__, "registry_limits", registry_limits)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence['outputs.CloudProjectContainerregistryPlanFeature']]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registryLimits")
    def registry_limits(self) -> Optional[Sequence['outputs.CloudProjectContainerregistryPlanRegistryLimit']]:
        return pulumi.get(self, "registry_limits")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class CloudProjectContainerregistryPlanFeature(dict):
    def __init__(__self__, *,
                 vulnerability: Optional[bool] = None):
        if vulnerability is not None:
            pulumi.set(__self__, "vulnerability", vulnerability)

    @property
    @pulumi.getter
    def vulnerability(self) -> Optional[bool]:
        return pulumi.get(self, "vulnerability")


@pulumi.output_type
class CloudProjectContainerregistryPlanRegistryLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageStorage":
            suggest = "image_storage"
        elif key == "parallelRequest":
            suggest = "parallel_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectContainerregistryPlanRegistryLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectContainerregistryPlanRegistryLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectContainerregistryPlanRegistryLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_storage: Optional[int] = None,
                 parallel_request: Optional[int] = None):
        if image_storage is not None:
            pulumi.set(__self__, "image_storage", image_storage)
        if parallel_request is not None:
            pulumi.set(__self__, "parallel_request", parallel_request)

    @property
    @pulumi.getter(name="imageStorage")
    def image_storage(self) -> Optional[int]:
        return pulumi.get(self, "image_storage")

    @property
    @pulumi.getter(name="parallelRequest")
    def parallel_request(self) -> Optional[int]:
        return pulumi.get(self, "parallel_request")


@pulumi.output_type
class CloudProjectNetworkPrivateRegionsAttribute(dict):
    def __init__(__self__, *,
                 status: str,
                 openstackid: Optional[str] = None,
                 region: Optional[str] = None):
        pulumi.set(__self__, "status", status)
        if openstackid is not None:
            pulumi.set(__self__, "openstackid", openstackid)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def openstackid(self) -> Optional[str]:
        return pulumi.get(self, "openstackid")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class CloudProjectNetworkPrivateRegionsStatus(dict):
    def __init__(__self__, *,
                 status: str,
                 region: Optional[str] = None):
        pulumi.set(__self__, "status", status)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class CloudProjectNetworkPrivateSubnetIpPool(dict):
    def __init__(__self__, *,
                 dhcp: Optional[bool] = None,
                 end: Optional[str] = None,
                 network: Optional[str] = None,
                 region: Optional[str] = None,
                 start: Optional[str] = None):
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[bool]:
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class CloudProjectOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.CloudProjectOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[int] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.CloudProjectOrderDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class CloudProjectOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[int] = None,
                 quantity: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[int]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class CloudProjectPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.CloudProjectPlanConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.CloudProjectPlanConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class CloudProjectPlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudProjectPlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudProjectPlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudProjectPlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudProjectPlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.CloudProjectPlanOptionConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.CloudProjectPlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class CloudProjectPlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudProjectUserRole(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class DbaasLogsInputConfiguration(dict):
    def __init__(__self__, *,
                 flowgger: Optional['outputs.DbaasLogsInputConfigurationFlowgger'] = None,
                 logstash: Optional['outputs.DbaasLogsInputConfigurationLogstash'] = None):
        if flowgger is not None:
            pulumi.set(__self__, "flowgger", flowgger)
        if logstash is not None:
            pulumi.set(__self__, "logstash", logstash)

    @property
    @pulumi.getter
    def flowgger(self) -> Optional['outputs.DbaasLogsInputConfigurationFlowgger']:
        return pulumi.get(self, "flowgger")

    @property
    @pulumi.getter
    def logstash(self) -> Optional['outputs.DbaasLogsInputConfigurationLogstash']:
        return pulumi.get(self, "logstash")


@pulumi.output_type
class DbaasLogsInputConfigurationFlowgger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logFormat":
            suggest = "log_format"
        elif key == "logFraming":
            suggest = "log_framing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbaasLogsInputConfigurationFlowgger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbaasLogsInputConfigurationFlowgger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbaasLogsInputConfigurationFlowgger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_format: str,
                 log_framing: str):
        pulumi.set(__self__, "log_format", log_format)
        pulumi.set(__self__, "log_framing", log_framing)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logFraming")
    def log_framing(self) -> str:
        return pulumi.get(self, "log_framing")


@pulumi.output_type
class DbaasLogsInputConfigurationLogstash(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputSection":
            suggest = "input_section"
        elif key == "filterSection":
            suggest = "filter_section"
        elif key == "patternSection":
            suggest = "pattern_section"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbaasLogsInputConfigurationLogstash. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbaasLogsInputConfigurationLogstash.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbaasLogsInputConfigurationLogstash.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_section: str,
                 filter_section: Optional[str] = None,
                 pattern_section: Optional[str] = None):
        pulumi.set(__self__, "input_section", input_section)
        if filter_section is not None:
            pulumi.set(__self__, "filter_section", filter_section)
        if pattern_section is not None:
            pulumi.set(__self__, "pattern_section", pattern_section)

    @property
    @pulumi.getter(name="inputSection")
    def input_section(self) -> str:
        return pulumi.get(self, "input_section")

    @property
    @pulumi.getter(name="filterSection")
    def filter_section(self) -> Optional[str]:
        return pulumi.get(self, "filter_section")

    @property
    @pulumi.getter(name="patternSection")
    def pattern_section(self) -> Optional[str]:
        return pulumi.get(self, "pattern_section")


@pulumi.output_type
class DedicatedServerInstallTaskDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changeLog":
            suggest = "change_log"
        elif key == "customHostname":
            suggest = "custom_hostname"
        elif key == "diskGroupId":
            suggest = "disk_group_id"
        elif key == "installRtm":
            suggest = "install_rtm"
        elif key == "installSqlServer":
            suggest = "install_sql_server"
        elif key == "noRaid":
            suggest = "no_raid"
        elif key == "postInstallationScriptLink":
            suggest = "post_installation_script_link"
        elif key == "postInstallationScriptReturn":
            suggest = "post_installation_script_return"
        elif key == "resetHwRaid":
            suggest = "reset_hw_raid"
        elif key == "softRaidDevices":
            suggest = "soft_raid_devices"
        elif key == "sshKeyName":
            suggest = "ssh_key_name"
        elif key == "useDistribKernel":
            suggest = "use_distrib_kernel"
        elif key == "useSpla":
            suggest = "use_spla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedServerInstallTaskDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedServerInstallTaskDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedServerInstallTaskDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_log: Optional[str] = None,
                 custom_hostname: Optional[str] = None,
                 disk_group_id: Optional[int] = None,
                 install_rtm: Optional[bool] = None,
                 install_sql_server: Optional[bool] = None,
                 language: Optional[str] = None,
                 no_raid: Optional[bool] = None,
                 post_installation_script_link: Optional[str] = None,
                 post_installation_script_return: Optional[str] = None,
                 reset_hw_raid: Optional[bool] = None,
                 soft_raid_devices: Optional[int] = None,
                 ssh_key_name: Optional[str] = None,
                 use_distrib_kernel: Optional[bool] = None,
                 use_spla: Optional[bool] = None):
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if disk_group_id is not None:
            pulumi.set(__self__, "disk_group_id", disk_group_id)
        if install_rtm is not None:
            pulumi.set(__self__, "install_rtm", install_rtm)
        if install_sql_server is not None:
            pulumi.set(__self__, "install_sql_server", install_sql_server)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if no_raid is not None:
            pulumi.set(__self__, "no_raid", no_raid)
        if post_installation_script_link is not None:
            pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        if post_installation_script_return is not None:
            pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        if reset_hw_raid is not None:
            pulumi.set(__self__, "reset_hw_raid", reset_hw_raid)
        if soft_raid_devices is not None:
            pulumi.set(__self__, "soft_raid_devices", soft_raid_devices)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if use_distrib_kernel is not None:
            pulumi.set(__self__, "use_distrib_kernel", use_distrib_kernel)
        if use_spla is not None:
            pulumi.set(__self__, "use_spla", use_spla)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[str]:
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="diskGroupId")
    def disk_group_id(self) -> Optional[int]:
        return pulumi.get(self, "disk_group_id")

    @property
    @pulumi.getter(name="installRtm")
    def install_rtm(self) -> Optional[bool]:
        return pulumi.get(self, "install_rtm")

    @property
    @pulumi.getter(name="installSqlServer")
    def install_sql_server(self) -> Optional[bool]:
        return pulumi.get(self, "install_sql_server")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter(name="noRaid")
    def no_raid(self) -> Optional[bool]:
        return pulumi.get(self, "no_raid")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter(name="resetHwRaid")
    def reset_hw_raid(self) -> Optional[bool]:
        return pulumi.get(self, "reset_hw_raid")

    @property
    @pulumi.getter(name="softRaidDevices")
    def soft_raid_devices(self) -> Optional[int]:
        return pulumi.get(self, "soft_raid_devices")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[str]:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistribKernel")
    def use_distrib_kernel(self) -> Optional[bool]:
        return pulumi.get(self, "use_distrib_kernel")

    @property
    @pulumi.getter(name="useSpla")
    def use_spla(self) -> Optional[bool]:
        return pulumi.get(self, "use_spla")


@pulumi.output_type
class DomainZoneOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainZoneOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainZoneOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainZoneOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.DomainZoneOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[int] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.DomainZoneOrderDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class DomainZoneOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainZoneOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainZoneOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainZoneOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[int] = None,
                 quantity: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[int]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class DomainZonePlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainZonePlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainZonePlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainZonePlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.DomainZonePlanConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.DomainZonePlanConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class DomainZonePlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainZonePlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainZonePlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainZonePlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainZonePlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.DomainZonePlanOptionConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.DomainZonePlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class DomainZonePlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IpServiceOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpServiceOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpServiceOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpServiceOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.IpServiceOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[int] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.IpServiceOrderDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class IpServiceOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpServiceOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpServiceOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpServiceOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[int] = None,
                 quantity: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[int]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class IpServicePlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpServicePlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpServicePlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpServicePlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.IpServicePlanConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.IpServicePlanConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class IpServicePlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IpServicePlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpServicePlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpServicePlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpServicePlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.IpServicePlanOptionConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.IpServicePlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class IpServicePlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IpServiceRoutedTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpServiceRoutedTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpServiceRoutedTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpServiceRoutedTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: Optional[str] = None):
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class IploadbalancingHttpFarmProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceSsl":
            suggest = "force_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingHttpFarmProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingHttpFarmProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingHttpFarmProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 force_ssl: Optional[bool] = None,
                 interval: Optional[int] = None,
                 match: Optional[str] = None,
                 method: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 port: Optional[int] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if force_ssl is not None:
            pulumi.set(__self__, "force_ssl", force_ssl)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="forceSsl")
    def force_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class IploadbalancingHttpRouteAction(dict):
    def __init__(__self__, *,
                 type: str,
                 status: Optional[int] = None,
                 target: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class IploadbalancingHttpRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"
        elif key == "subField":
            suggest = "sub_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingHttpRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingHttpRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingHttpRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: Optional[str] = None,
                 match: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 rule_id: Optional[int] = None,
                 sub_field: Optional[str] = None):
        if field is not None:
            pulumi.set(__self__, "field", field)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if sub_field is not None:
            pulumi.set(__self__, "sub_field", sub_field)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="subField")
    def sub_field(self) -> Optional[str]:
        return pulumi.get(self, "sub_field")


@pulumi.output_type
class IploadbalancingOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.IploadbalancingOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[int] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.IploadbalancingOrderDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class IploadbalancingOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[int] = None,
                 quantity: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[int]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class IploadbalancingOrderableZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingOrderableZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingOrderableZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingOrderableZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 plan_code: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_code is not None:
            pulumi.set(__self__, "plan_code", plan_code)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> Optional[str]:
        return pulumi.get(self, "plan_code")


@pulumi.output_type
class IploadbalancingPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.IploadbalancingPlanConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.IploadbalancingPlanConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class IploadbalancingPlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IploadbalancingPlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingPlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingPlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingPlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.IploadbalancingPlanOptionConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.IploadbalancingPlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class IploadbalancingPlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IploadbalancingTcpFarmProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceSsl":
            suggest = "force_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingTcpFarmProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingTcpFarmProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingTcpFarmProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 force_ssl: Optional[bool] = None,
                 interval: Optional[int] = None,
                 match: Optional[str] = None,
                 method: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 port: Optional[int] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if force_ssl is not None:
            pulumi.set(__self__, "force_ssl", force_ssl)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="forceSsl")
    def force_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class IploadbalancingTcpRouteAction(dict):
    def __init__(__self__, *,
                 type: str,
                 target: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class IploadbalancingTcpRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"
        elif key == "subField":
            suggest = "sub_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IploadbalancingTcpRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IploadbalancingTcpRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IploadbalancingTcpRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: Optional[str] = None,
                 match: Optional[str] = None,
                 negate: Optional[bool] = None,
                 pattern: Optional[str] = None,
                 rule_id: Optional[int] = None,
                 sub_field: Optional[str] = None):
        if field is not None:
            pulumi.set(__self__, "field", field)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if sub_field is not None:
            pulumi.set(__self__, "sub_field", sub_field)

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="subField")
    def sub_field(self) -> Optional[str]:
        return pulumi.get(self, "sub_field")


@pulumi.output_type
class MeInstallationTemplateCustomization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changeLog":
            suggest = "change_log"
        elif key == "customHostname":
            suggest = "custom_hostname"
        elif key == "postInstallationScriptLink":
            suggest = "post_installation_script_link"
        elif key == "postInstallationScriptReturn":
            suggest = "post_installation_script_return"
        elif key == "sshKeyName":
            suggest = "ssh_key_name"
        elif key == "useDistributionKernel":
            suggest = "use_distribution_kernel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeInstallationTemplateCustomization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeInstallationTemplateCustomization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeInstallationTemplateCustomization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 change_log: Optional[str] = None,
                 custom_hostname: Optional[str] = None,
                 post_installation_script_link: Optional[str] = None,
                 post_installation_script_return: Optional[str] = None,
                 rating: Optional[int] = None,
                 ssh_key_name: Optional[str] = None,
                 use_distribution_kernel: Optional[bool] = None):
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if custom_hostname is not None:
            pulumi.set(__self__, "custom_hostname", custom_hostname)
        if post_installation_script_link is not None:
            pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        if post_installation_script_return is not None:
            pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        if rating is not None:
            pulumi.set(__self__, "rating", rating)
        if ssh_key_name is not None:
            pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        if use_distribution_kernel is not None:
            pulumi.set(__self__, "use_distribution_kernel", use_distribution_kernel)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[str]:
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> Optional[str]:
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> Optional[str]:
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter
    def rating(self) -> Optional[int]:
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> Optional[str]:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistributionKernel")
    def use_distribution_kernel(self) -> Optional[bool]:
        return pulumi.get(self, "use_distribution_kernel")


@pulumi.output_type
class VrackOrder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"
        elif key == "orderId":
            suggest = "order_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VrackOrder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VrackOrder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VrackOrder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 details: Optional[Sequence['outputs.VrackOrderDetail']] = None,
                 expiration_date: Optional[str] = None,
                 order_id: Optional[int] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.VrackOrderDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        return pulumi.get(self, "order_id")


@pulumi.output_type
class VrackOrderDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderDetailId":
            suggest = "order_detail_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VrackOrderDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VrackOrderDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VrackOrderDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 order_detail_id: Optional[int] = None,
                 quantity: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[int]:
        return pulumi.get(self, "order_detail_id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class VrackPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VrackPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VrackPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VrackPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.VrackPlanConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.VrackPlanConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class VrackPlanConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VrackPlanOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planCode":
            suggest = "plan_code"
        elif key == "pricingMode":
            suggest = "pricing_mode"
        elif key == "catalogName":
            suggest = "catalog_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VrackPlanOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VrackPlanOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VrackPlanOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 plan_code: str,
                 pricing_mode: str,
                 catalog_name: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.VrackPlanOptionConfiguration']] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[str]:
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.VrackPlanOptionConfiguration']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class VrackPlanOptionConfiguration(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryFilterFeatureResult(dict):
    def __init__(__self__, *,
                 vulnerability: bool):
        pulumi.set(__self__, "vulnerability", vulnerability)

    @property
    @pulumi.getter
    def vulnerability(self) -> bool:
        return pulumi.get(self, "vulnerability")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryFilterRegistryLimitResult(dict):
    def __init__(__self__, *,
                 image_storage: int,
                 parallel_request: int):
        pulumi.set(__self__, "image_storage", image_storage)
        pulumi.set(__self__, "parallel_request", parallel_request)

    @property
    @pulumi.getter(name="imageStorage")
    def image_storage(self) -> int:
        return pulumi.get(self, "image_storage")

    @property
    @pulumi.getter(name="parallelRequest")
    def parallel_request(self) -> int:
        return pulumi.get(self, "parallel_request")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryResultResult(dict):
    def __init__(__self__, *,
                 plans: Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanResult'],
                 region_name: str):
        pulumi.set(__self__, "plans", plans)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanResult']:
        return pulumi.get(self, "plans")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryResultPlanResult(dict):
    def __init__(__self__, *,
                 code: str,
                 created_at: str,
                 features: Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanFeatureResult'],
                 id: str,
                 name: str,
                 registry_limits: Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimitResult'],
                 updated_at: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registry_limits", registry_limits)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanFeatureResult']:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registryLimits")
    def registry_limits(self) -> Sequence['outputs.GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimitResult']:
        return pulumi.get(self, "registry_limits")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryResultPlanFeatureResult(dict):
    def __init__(__self__, *,
                 vulnerability: bool):
        pulumi.set(__self__, "vulnerability", vulnerability)

    @property
    @pulumi.getter
    def vulnerability(self) -> bool:
        return pulumi.get(self, "vulnerability")


@pulumi.output_type
class GetCloudProjectCapabilitiesContainerregistryResultPlanRegistryLimitResult(dict):
    def __init__(__self__, *,
                 image_storage: int,
                 parallel_request: int):
        pulumi.set(__self__, "image_storage", image_storage)
        pulumi.set(__self__, "parallel_request", parallel_request)

    @property
    @pulumi.getter(name="imageStorage")
    def image_storage(self) -> int:
        return pulumi.get(self, "image_storage")

    @property
    @pulumi.getter(name="parallelRequest")
    def parallel_request(self) -> int:
        return pulumi.get(self, "parallel_request")


@pulumi.output_type
class GetCloudProjectContainerregistriesResultResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 id: str,
                 name: str,
                 project_id: str,
                 region: str,
                 size: int,
                 status: str,
                 updated_at: str,
                 url: str,
                 version: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCloudProjectContainerregistryUsersResultResult(dict):
    def __init__(__self__, *,
                 email: str,
                 id: str,
                 user: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetCloudProjectRegionServiceResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDedicatedServerVniResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 mode: str,
                 name: str,
                 nics: Sequence[str],
                 server_name: str,
                 uuid: str,
                 vrack: str):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vrack", vrack)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nics(self) -> Sequence[str]:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vrack(self) -> str:
        return pulumi.get(self, "vrack")


@pulumi.output_type
class GetIpServiceRoutedToResult(dict):
    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetIploadbalancingOrderableZoneResult(dict):
    def __init__(__self__, *,
                 name: str,
                 plan_code: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan_code", plan_code)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")


@pulumi.output_type
class GetMeInstallationTemplateCustomizationResult(dict):
    def __init__(__self__, *,
                 change_log: str,
                 custom_hostname: str,
                 post_installation_script_link: str,
                 post_installation_script_return: str,
                 rating: int,
                 ssh_key_name: str,
                 use_distribution_kernel: bool):
        pulumi.set(__self__, "change_log", change_log)
        pulumi.set(__self__, "custom_hostname", custom_hostname)
        pulumi.set(__self__, "post_installation_script_link", post_installation_script_link)
        pulumi.set(__self__, "post_installation_script_return", post_installation_script_return)
        pulumi.set(__self__, "rating", rating)
        pulumi.set(__self__, "ssh_key_name", ssh_key_name)
        pulumi.set(__self__, "use_distribution_kernel", use_distribution_kernel)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> str:
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter(name="customHostname")
    def custom_hostname(self) -> str:
        return pulumi.get(self, "custom_hostname")

    @property
    @pulumi.getter(name="postInstallationScriptLink")
    def post_installation_script_link(self) -> str:
        return pulumi.get(self, "post_installation_script_link")

    @property
    @pulumi.getter(name="postInstallationScriptReturn")
    def post_installation_script_return(self) -> str:
        return pulumi.get(self, "post_installation_script_return")

    @property
    @pulumi.getter
    def rating(self) -> int:
        return pulumi.get(self, "rating")

    @property
    @pulumi.getter(name="sshKeyName")
    def ssh_key_name(self) -> str:
        return pulumi.get(self, "ssh_key_name")

    @property
    @pulumi.getter(name="useDistributionKernel")
    def use_distribution_kernel(self) -> bool:
        return pulumi.get(self, "use_distribution_kernel")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemeResult(dict):
    def __init__(__self__, *,
                 hardware_raids: Sequence['outputs.GetMeInstallationTemplatePartitionSchemeHardwareRaidResult'],
                 name: str,
                 partitions: Sequence['outputs.GetMeInstallationTemplatePartitionSchemePartitionResult'],
                 priority: int):
        pulumi.set(__self__, "hardware_raids", hardware_raids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="hardwareRaids")
    def hardware_raids(self) -> Sequence['outputs.GetMeInstallationTemplatePartitionSchemeHardwareRaidResult']:
        return pulumi.get(self, "hardware_raids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> Sequence['outputs.GetMeInstallationTemplatePartitionSchemePartitionResult']:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemeHardwareRaidResult(dict):
    def __init__(__self__, *,
                 disks: Sequence[str],
                 mode: str,
                 name: str,
                 step: int):
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "step", step)

    @property
    @pulumi.getter
    def disks(self) -> Sequence[str]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def step(self) -> int:
        return pulumi.get(self, "step")


@pulumi.output_type
class GetMeInstallationTemplatePartitionSchemePartitionResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 mountpoint: str,
                 order: int,
                 raid: str,
                 size: int,
                 type: str,
                 volume_name: str):
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "mountpoint", mountpoint)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "raid", raid)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def mountpoint(self) -> str:
        return pulumi.get(self, "mountpoint")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def raid(self) -> str:
        return pulumi.get(self, "raid")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetOrderCartProductOptionsPlanPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductOptionsPlanPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductOptionsPlanPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductOptionsPlanPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrderCartProductOptionsPlanSelectedPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductOptionsPlanSelectedPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductOptionsPlanSelectedPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductOptionsPlanSelectedPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrderCartProductOptionsResultResult(dict):
    def __init__(__self__, *,
                 exclusive: bool,
                 family: str,
                 mandatory: bool,
                 plan_code: str,
                 prices: Sequence['outputs.GetOrderCartProductOptionsResultPriceResult'],
                 product_name: str,
                 product_type: str):
        pulumi.set(__self__, "exclusive", exclusive)
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "mandatory", mandatory)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter
    def exclusive(self) -> bool:
        return pulumi.get(self, "exclusive")

    @property
    @pulumi.getter
    def family(self) -> str:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductOptionsResultPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetOrderCartProductOptionsResultPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductOptionsResultPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductOptionsResultPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductOptionsResultPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrderCartProductPlanPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductPlanPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductPlanPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductPlanPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrderCartProductPlanSelectedPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductPlanSelectedPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductPlanSelectedPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductPlanSelectedPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOrderCartProductResultResult(dict):
    def __init__(__self__, *,
                 plan_code: str,
                 prices: Sequence['outputs.GetOrderCartProductResultPriceResult'],
                 product_name: str,
                 product_type: str):
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> str:
        return pulumi.get(self, "plan_code")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductResultPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetOrderCartProductResultPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: str,
                 duration: str,
                 interval: int,
                 maximum_quantity: int,
                 maximum_repeat: int,
                 minimum_quantity: int,
                 minimum_repeat: int,
                 price_in_ucents: int,
                 prices: Sequence['outputs.GetOrderCartProductResultPricePriceResult'],
                 pricing_mode: str,
                 pricing_type: str):
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> int:
        return pulumi.get(self, "maximum_repeat")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> int:
        return pulumi.get(self, "minimum_repeat")

    @property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> int:
        return pulumi.get(self, "price_in_ucents")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetOrderCartProductResultPricePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> str:
        return pulumi.get(self, "pricing_mode")

    @property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> str:
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetOrderCartProductResultPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: str,
                 text: str,
                 value: float):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> str:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


