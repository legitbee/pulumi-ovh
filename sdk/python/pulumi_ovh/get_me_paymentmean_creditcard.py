# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetMePaymentmeanCreditcardResult',
    'AwaitableGetMePaymentmeanCreditcardResult',
    'get_me_paymentmean_creditcard',
    'get_me_paymentmean_creditcard_output',
]

@pulumi.output_type
class GetMePaymentmeanCreditcardResult:
    """
    A collection of values returned by getMePaymentmeanCreditcard.
    """
    def __init__(__self__, default=None, description=None, description_regexp=None, id=None, state=None, states=None, use_default=None, use_last_to_expire=None):
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if description_regexp and not isinstance(description_regexp, str):
            raise TypeError("Expected argument 'description_regexp' to be a str")
        pulumi.set(__self__, "description_regexp", description_regexp)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if use_default and not isinstance(use_default, bool):
            raise TypeError("Expected argument 'use_default' to be a bool")
        pulumi.set(__self__, "use_default", use_default)
        if use_last_to_expire and not isinstance(use_last_to_expire, bool):
            raise TypeError("Expected argument 'use_last_to_expire' to be a bool")
        pulumi.set(__self__, "use_last_to_expire", use_last_to_expire)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="descriptionRegexp")
    def description_regexp(self) -> Optional[str]:
        return pulumi.get(self, "description_regexp")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def states(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "states")

    @property
    @pulumi.getter(name="useDefault")
    def use_default(self) -> Optional[bool]:
        return pulumi.get(self, "use_default")

    @property
    @pulumi.getter(name="useLastToExpire")
    def use_last_to_expire(self) -> Optional[bool]:
        return pulumi.get(self, "use_last_to_expire")


class AwaitableGetMePaymentmeanCreditcardResult(GetMePaymentmeanCreditcardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMePaymentmeanCreditcardResult(
            default=self.default,
            description=self.description,
            description_regexp=self.description_regexp,
            id=self.id,
            state=self.state,
            states=self.states,
            use_default=self.use_default,
            use_last_to_expire=self.use_last_to_expire)


def get_me_paymentmean_creditcard(description_regexp: Optional[str] = None,
                                  states: Optional[Sequence[str]] = None,
                                  use_default: Optional[bool] = None,
                                  use_last_to_expire: Optional[bool] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMePaymentmeanCreditcardResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['descriptionRegexp'] = description_regexp
    __args__['states'] = states
    __args__['useDefault'] = use_default
    __args__['useLastToExpire'] = use_last_to_expire
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ovh:index/getMePaymentmeanCreditcard:getMePaymentmeanCreditcard', __args__, opts=opts, typ=GetMePaymentmeanCreditcardResult).value

    return AwaitableGetMePaymentmeanCreditcardResult(
        default=__ret__.default,
        description=__ret__.description,
        description_regexp=__ret__.description_regexp,
        id=__ret__.id,
        state=__ret__.state,
        states=__ret__.states,
        use_default=__ret__.use_default,
        use_last_to_expire=__ret__.use_last_to_expire)


@_utilities.lift_output_func(get_me_paymentmean_creditcard)
def get_me_paymentmean_creditcard_output(description_regexp: Optional[pulumi.Input[Optional[str]]] = None,
                                         states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                         use_default: Optional[pulumi.Input[Optional[bool]]] = None,
                                         use_last_to_expire: Optional[pulumi.Input[Optional[bool]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMePaymentmeanCreditcardResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
