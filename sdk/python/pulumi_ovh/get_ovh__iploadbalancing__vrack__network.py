# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOvh_Iploadbalancing_Vrack_NetworkResult',
    'AwaitableGetOvh_Iploadbalancing_Vrack_NetworkResult',
    'get_ovh__iploadbalancing__vrack__network',
    'get_ovh__iploadbalancing__vrack__network_output',
]

@pulumi.output_type
class GetOvh_Iploadbalancing_Vrack_NetworkResult:
    """
    A collection of values returned by getOvh_Iploadbalancing_Vrack_Network.
    """
    def __init__(__self__, display_name=None, id=None, nat_ip=None, service_name=None, subnet=None, vlan=None, vrack_network_id=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat_ip and not isinstance(nat_ip, str):
            raise TypeError("Expected argument 'nat_ip' to be a str")
        pulumi.set(__self__, "nat_ip", nat_ip)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        pulumi.set(__self__, "subnet", subnet)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)
        if vrack_network_id and not isinstance(vrack_network_id, int):
            raise TypeError("Expected argument 'vrack_network_id' to be a int")
        pulumi.set(__self__, "vrack_network_id", vrack_network_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natIp")
    def nat_ip(self) -> str:
        return pulumi.get(self, "nat_ip")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vrackNetworkId")
    def vrack_network_id(self) -> int:
        return pulumi.get(self, "vrack_network_id")


class AwaitableGetOvh_Iploadbalancing_Vrack_NetworkResult(GetOvh_Iploadbalancing_Vrack_NetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOvh_Iploadbalancing_Vrack_NetworkResult(
            display_name=self.display_name,
            id=self.id,
            nat_ip=self.nat_ip,
            service_name=self.service_name,
            subnet=self.subnet,
            vlan=self.vlan,
            vrack_network_id=self.vrack_network_id)


def get_ovh__iploadbalancing__vrack__network(service_name: Optional[str] = None,
                                             vrack_network_id: Optional[int] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOvh_Iploadbalancing_Vrack_NetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['serviceName'] = service_name
    __args__['vrackNetworkId'] = vrack_network_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ovh:index/getOvh_Iploadbalancing_Vrack_Network:getOvh_Iploadbalancing_Vrack_Network', __args__, opts=opts, typ=GetOvh_Iploadbalancing_Vrack_NetworkResult).value

    return AwaitableGetOvh_Iploadbalancing_Vrack_NetworkResult(
        display_name=__ret__.display_name,
        id=__ret__.id,
        nat_ip=__ret__.nat_ip,
        service_name=__ret__.service_name,
        subnet=__ret__.subnet,
        vlan=__ret__.vlan,
        vrack_network_id=__ret__.vrack_network_id)


@_utilities.lift_output_func(get_ovh__iploadbalancing__vrack__network)
def get_ovh__iploadbalancing__vrack__network_output(service_name: Optional[pulumi.Input[str]] = None,
                                                    vrack_network_id: Optional[pulumi.Input[int]] = None,
                                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOvh_Iploadbalancing_Vrack_NetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
